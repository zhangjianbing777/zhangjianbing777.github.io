<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>在谷歌上百度</title>
  
  <subtitle>但行好事，莫问前程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-14T07:36:49.952Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>BigBing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你还在使用BeanUtils吗？</title>
    <link href="http://yoursite.com/interview/beanutils.html"/>
    <id>http://yoursite.com/interview/beanutils.html</id>
    <published>2020-03-11T00:14:42.000Z</published>
    <updated>2020-03-14T07:36:49.952Z</updated>
    
    <content type="html"><![CDATA[<p>你还在使用BeanUtils来拷贝对象吗？</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你还在使用BeanUtils来拷贝对象吗？&lt;/p&gt;
    
    </summary>
    
    
      <category term="interview" scheme="http://yoursite.com/categories/interview/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2020年</title>
    <link href="http://yoursite.com/life/life-my2020.html"/>
    <id>http://yoursite.com/life/life-my2020.html</id>
    <published>2020-03-09T15:04:42.000Z</published>
    <updated>2020-03-14T13:08:02.844Z</updated>
    
    <content type="html"><![CDATA[<p>2020年真是特殊的一年。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2020年真是特殊的一年。&lt;/p&gt;
    
    </summary>
    
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
      <category term="精彩生活" scheme="http://yoursite.com/tags/%E7%B2%BE%E5%BD%A9%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>RSA非对称加密算法简述</title>
    <link href="http://yoursite.com/algorithms/algorithms-rsa.html"/>
    <id>http://yoursite.com/algorithms/algorithms-rsa.html</id>
    <published>2020-02-22T13:38:00.000Z</published>
    <updated>2020-03-14T07:35:21.327Z</updated>
    
    <content type="html"><![CDATA[<p>对称加密和非对称加密简单分析。</p><a id="more"></a><h1 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h1><blockquote><p>简单来说对称加密就是加密和解密用的密钥都是相同的，能够反推出来。对称加密的优势就是快，缺点是密钥分发问题，容易被窃取，但现在有了量子保密通讯来分发密钥就相对安全多了，可惜一般人用不到。</p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><blockquote><p>A和B进行通讯，A想把数字10（10就叫做明文）传给B，但考虑到安全性，A和B约定好，A将明文加5后，传给B，B收到A传的数字后，减5，得出明文，那数字5就叫做密钥，这个密钥是A和B共同约定好的，不可以让第三个人知道，这样加解密的关系就成立了，当然，A和B的通讯不一定要加减5这么简单，可以做一系列很复杂的运算，但其本质还是一样的，即对称加密。</p></blockquote><h1 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h1><blockquote><p>非对称加密相对于对称加密来说就显得很安全了，简单来说就是加密和解密用的并不是同一个密钥，这样就不存在被窃取的可能。最常见的就是RSA非对称加密了，下面简单来说下是如何实现RSA加密的。</p></blockquote><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><blockquote><p>A想把数字m传送给B，首先B自己这边生成两个有关系的数字e和d，其中e叫公钥，公钥可以给任何一个人，当然也包括A。d叫私钥，d除了B自己知道，不可让其他任何人知道，包括A。ok，现在A拿到B的公钥e，利用算法把消息m通过e加密得到密文c，然后把密文c给了B，B利用自己的私钥d通过算法把密文c解密得出明文数字m，这样B就安全的获得了A传过来的数字m。</p></blockquote><h2 id="数学原理"><a href="#数学原理" class="headerlink" title="数学原理"></a>数学原理</h2><ol><li>找出两个质数，p和q</li><li>n = p * q</li><li>欧拉函数：t = (p-1)*(q-1)</li><li>公钥e：1 &lt; e &lt; t的整数，并且 e 和 t 互质。私钥 d * e 除以 t，余数为1。<blockquote><p>例如t = 20，p = 3，q = 11，e = 3，d = 7符合上述要求。回到非对称加密示例上来，A要把数字m传送给B。</p></blockquote></li></ol><ul><li>加密：首先A要把数字m加密，数字m的e次幂除以n然后求余，得出了密文c。</li><li>解密：然后B要把密文c解密，密文c的d次幂除以n然后求余，得出明文数字m。<h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3></li></ul><ol><li>A给B传输数据的时候，密文c、n(n可以算出来)和公钥e是公开的。</li><li>如果想解密那就需要获得私钥d。</li><li>获得私钥d，需要知道e和t。</li><li>e是公开的，获得t就需要知道p和q。</li><li>想获得p和q就需要对n进行质因分解。</li><li>比较小的数数字质因分解很简单，比如说21，在RSA算法中，一般n为1024位的二进制数，这样的数字质因分解是很困难的，普通计算机需要很多年，不过现在有了量子计算机，计算速度很快，这也就是为什么银行通常过一段时间会更换RSA密钥对的原因了。<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><blockquote><p>想破解RSA加密还是很困难的，在普通RSA的基础上出现了很多的变种，让破解变得更加困难了。破解RSA最大的困难是大数的质因分解。</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对称加密和非对称加密简单分析。&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithms" scheme="http://yoursite.com/categories/algorithms/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot使用Powermockito单元测试</title>
    <link href="http://yoursite.com/boot/boot-ut-powermock.html"/>
    <id>http://yoursite.com/boot/boot-ut-powermock.html</id>
    <published>2019-11-24T12:53:00.000Z</published>
    <updated>2020-03-14T12:50:44.405Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍一款优秀的UT框架mockito，mockito框架上手非常简单，但是它也有弊端和局限性，不能mock静态方法、私有方法、构造方法等，但powermockito框架很好的弥补了这一缺陷。</p><a id="more"></a><h1 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h1><blockquote><p>一般<code>powermockito</code>和<code>mockito</code>配合来使用，有相应的版本要求。</p></blockquote><table><thead><tr><th>powermockito</th><th>mockito</th></tr></thead><tbody><tr><td>1.6.5+</td><td>2.0.0-beta - 2.0.42-beta</td></tr><tr><td>1.10.19</td><td>1.6.4</td></tr><tr><td>1.10.8 - 1.10.x</td><td>1.6.2+</td></tr><tr><td>1.9.5-rc1 - 1.9.5</td><td>1.5.0 - 1.5.6</td></tr><tr><td>1.9.0-rc1 &amp; 1.9.0</td><td>1.4.10 - 1.4.12</td></tr><tr><td>1.8.5</td><td>1.3.9 - 1.4.9</td></tr><tr><td>1.8.4</td><td>1.3.7 &amp; 1.3.8</td></tr><tr><td>1.8.3</td><td>1.3.6</td></tr><tr><td>1.8.1 &amp; 1.8.2</td><td>1.3.5</td></tr><tr><td>1.8</td><td>1.3</td></tr><tr><td>1.7</td><td>1.2.5</td></tr><tr><td># pom配置文件</td><td></td></tr><tr><td><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.powermock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>powermock-module-junit4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.powermock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>powermock-api-mockito2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></td><td></td></tr><tr><td># mock静态方法</td><td></td></tr></tbody></table><blockquote><p>什么时候mock静态方法？比如一个类中有许多的public方法，也有static方法，在static方法中调用static方法，但我们并不想mock静态方法中的任何代码，就需要给这个static方法mock一个返回值，<code>mockito</code>框架就无能为力了，因为它并不能mock静态方法，所以需要配合<code>powermockito</code>框架来使用，如下：</p></blockquote><h2 id="被测试方法"><a href="#被测试方法" class="headerlink" title="被测试方法"></a>被测试方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mock静态方法 isTrue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/verifyStaticMcok"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verifyStaticMcok</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"zhangjianbing"</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = isTrue(str);</span><br><span class="line">    log.info(<span class="string">"校验姓名："</span> + flag);</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userName 用户名不能为空</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isTrue</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> StringUtils.isNotBlank(userName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><blockquote><p>测试类上加两个注解，<code>@PrepareForTest</code>可以是class数组。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(PowerMockRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">PrepareForTest</span>(<span class="title">UserSourceController</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserSourceControllerTest</span> </span>&#123;</span><br><span class="line">   <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试启动前，首先mock出静态方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mockStatic(UserSourceController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    when(UserSourceController.isTrue(any(String<span class="class">.<span class="keyword">class</span>))).<span class="title">thenReturn</span>(<span class="title">true</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>正常写测试用例就可以了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mock静态方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">verifyStaticMcok_success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = userSourceController.verifyStaticMcok();</span><br><span class="line">    assertTrue(flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="mock私有方法"><a href="#mock私有方法" class="headerlink" title="mock私有方法"></a>mock私有方法</h1><blockquote><p>查了很多资料，网上答案如出一辙，个人感觉<code>private</code>方法不应该被mock，既然是私有的它也属于本类中代码的原有的一部分，那应该让它走完得出结果，但<code>powermock</code>依然可以做到（通过反射）。什么时候使用？跟静态方法的使用场景一样。</p></blockquote><h2 id="被测试方法-1"><a href="#被测试方法-1" class="headerlink" title="被测试方法"></a>被测试方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mock私有方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userName 用户名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/verifyPrivateMethod"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">verifyPrivateMethod</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"传入的用户名："</span> + userName);</span><br><span class="line">    String result = getUserName(userName);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 私有方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str 传入参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getUserName</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"进入了私有方法"</span> + str);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试方法-1"><a href="#测试方法-1" class="headerlink" title="测试方法"></a>测试方法</h2><blockquote><p>测试类上加两个注解，<code>@PrepareForTest</code>可以是class数组。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(PowerMockRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">PrepareForTest</span>(<span class="title">UserSourceController</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserSourceControllerTest</span> </span>&#123;</span><br><span class="line">   <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注释写在了代码里。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mock私有方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">verifyPrivateMethod_success</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// spy被测类，只有被spy出来的类，才可以对私有方法进行mock</span></span><br><span class="line">    UserSourceController spy = PowerMockito.spy(<span class="keyword">new</span> UserSourceController());</span><br><span class="line">    <span class="comment">// 模拟私有方法（反射），意思是传入"zhangjianbing"，强制返回"laozheng"</span></span><br><span class="line">    <span class="comment">// 方法原型： public static &lt;T&gt; OngoingStubbing&lt;T&gt; when(Object instance, String methodName, Object... arguments) throws Exception;</span></span><br><span class="line">    PowerMockito.when(spy, <span class="string">"getUserName"</span>, <span class="string">"zhangjianbing"</span>).thenReturn(<span class="string">"laozheng"</span>);</span><br><span class="line">    String userName = spy.verifyPrivateMethod(<span class="string">"zhangjianbing"</span>);</span><br><span class="line">    <span class="comment">// 验证私有方法被执行了</span></span><br><span class="line">    PowerMockito.verifyPrivate(spy, Mockito.times(<span class="number">1</span>)).invoke(<span class="string">"getUserName"</span>, <span class="string">"zhangjianbing"</span>);</span><br><span class="line">    assertEquals(<span class="string">"laozheng"</span>, userName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>为什么<code>mockito</code>不能mock静态方法？<code>mockito</code>使用继承的方式实现mock的，用CGLIB生成mock对象代替真实的对象进行执行，为了mock实例的方法，你可以在子类中覆盖它，而static方法是不能被子类覆盖的，所以<code>mockito</code>不能mock静态方法。但<code>powermock</code>可以mock静态方法，因为它直接在字节码上工作。</li><li><code>@PrepareForTest</code>必须写在类上，不能写到具体的测试方法上否则会报错：<code>java.lang.Exception: No tests found matching Method</code>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍一款优秀的UT框架mockito，mockito框架上手非常简单，但是它也有弊端和局限性，不能mock静态方法、私有方法、构造方法等，但powermockito框架很好的弥补了这一缺陷。&lt;/p&gt;
    
    </summary>
    
    
      <category term="boot" scheme="http://yoursite.com/categories/boot/"/>
    
    
      <category term="Boot" scheme="http://yoursite.com/tags/Boot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot使用Mockito单元测试</title>
    <link href="http://yoursite.com/boot/boot-ut-mokito.html"/>
    <id>http://yoursite.com/boot/boot-ut-mokito.html</id>
    <published>2019-11-16T13:16:00.000Z</published>
    <updated>2020-03-14T07:47:21.005Z</updated>
    
    <content type="html"><![CDATA[<p>以前总觉的写单元测试真的是浪费生命，可是直到今天，我是真的认识到了，确实是浪费生命。</p><a id="more"></a><p>当然是假的哈哈，单元测试还是非常有必要的。</p><h1 id="单元测试的目的"><a href="#单元测试的目的" class="headerlink" title="单元测试的目的"></a>单元测试的目的</h1><blockquote><p>单元测试的目的是用来确保程式的逻辑如你预期的方式执行，而<code>并不是</code>用来验证是否符合客户的需求的！通过单元测试来建立一道坚实的保障，确保代码在日后的修改中不会被破坏掉。在修改BUG阶段是无法完全做到谁产生的BUG就安排谁去修改因为对当前代码要满足的各种目的不熟悉，在修改一个模块或者BUG的时候把原有正确的功能也影响到了！更要命的是，谁也不知道这个BUG出现了，等待测试人员需要去重新发现一遍。然而如果这个项目在一开始就编写了单元测试的话，我们可以通过方便的自动化单元测试框架运行所有的单元测试，进而检查在此次修改前的所有被单元测试所覆盖的代码是否依然正常运行（符合以前编写的单元测试期望，如果验证通过，则认为原有代码<code>未受到影响</code>）。</p></blockquote><h1 id="单元测试常用框架"><a href="#单元测试常用框架" class="headerlink" title="单元测试常用框架"></a>单元测试常用框架</h1><ul><li>JUnit <a href="https://junit.org/" target="_blank" rel="noopener">https://junit.org/</a></li><li>TestNG <a href="https://testng.org/" target="_blank" rel="noopener">https://testng.org/</a></li><li>Hamcrest <a href="http://hamcrest.org/" target="_blank" rel="noopener">http://hamcrest.org/</a></li><li>EasyMock <a href="http://easymock.org/" target="_blank" rel="noopener">http://easymock.org/</a></li><li>Spock <a href="http://spockframework.org/" target="_blank" rel="noopener">http://spockframework.org/</a></li><li>Mockito <a href="https://site.mockito.org/" target="_blank" rel="noopener">https://site.mockito.org/</a></li><li>PowerMock <a href="https://github.com/powermock/powermock/" target="_blank" rel="noopener">https://github.com/powermock/powermock/</a><blockquote><p><strong>UT的编写, 有一个非常重要的原则：拔!掉!网!线!也!能!跑!</strong></p></blockquote><h1 id="Mockito分层mock"><a href="#Mockito分层mock" class="headerlink" title="Mockito分层mock"></a>Mockito分层mock</h1><h2 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserContrlller的测试类 &#123;<span class="doctag">@link</span> UserController&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-11-16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(MockitoJUnitRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@SuppressWarnings("Duplicates")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> UserController userController;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserList_success</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// mock准备数据</span></span><br><span class="line">        UserReq userReq = mockUserReq();</span><br><span class="line">        PageInfo&lt;User&gt; pageInfo = mockPageInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 条件判断</span></span><br><span class="line">        when(userService.getUserList(any(UserReq<span class="class">.<span class="keyword">class</span>))).<span class="title">thenReturn</span>(<span class="title">new</span> <span class="title">BaseResponse</span>&lt;&gt;(<span class="title">pageInfo</span>))</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行代码</span></span><br><span class="line">        BaseResponse&lt;PageInfo&lt;User&gt;&gt; baseResponse = userController.getUserList(userReq);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 断言</span></span><br><span class="line">        assertNotNull(baseResponse.getData());</span><br><span class="line">        assertThat(baseResponse.getData().getPageNum(), is(Integer.valueOf(userReq.getPageNum())));</span><br><span class="line">        assertThat(baseResponse.getData().getPageSize(), is(Integer.valueOf(userReq.getPageSize())));</span><br><span class="line">        assertThat(baseResponse.getData().getList().get(<span class="number">0</span>).getLongminId(), is(userReq.getLongminId()));</span><br><span class="line">        assertThat(baseResponse.getData().getList().get(<span class="number">0</span>).getIsCertify(), is(Integer.valueOf(userReq.getIsCertify())));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证</span></span><br><span class="line">        verify(userService, times(<span class="number">1</span>)).getUserList(any(UserReq<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserReq <span class="title">mockUserReq</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserReq userReq = <span class="keyword">new</span> UserReq();</span><br><span class="line">        userReq.setPageNum(<span class="string">"1"</span>);</span><br><span class="line">        userReq.setPageSize(<span class="string">"10"</span>);</span><br><span class="line">        userReq.setLongminId(<span class="string">"zhangjianbing"</span>);</span><br><span class="line">        userReq.setIsCertify(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">return</span> userReq;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageInfo&lt;User&gt; <span class="title">mockPageInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setLongminId(<span class="string">"zhangjianbing"</span>);</span><br><span class="line">        user.setIsCertify(<span class="number">1</span>);</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(user);</span><br><span class="line">        pageInfo.setList(list);</span><br><span class="line">        pageInfo.setPageNum(<span class="number">1</span>);</span><br><span class="line">        pageInfo.setPageSize(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> pageInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserServiceImpl单元测</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-11-16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(MockitoJUnitRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@SuppressWarnings("Duplicates")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserList_success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserReq userReq = mockUserReq();</span><br><span class="line">        List&lt;User&gt; list = mockUserList();</span><br><span class="line">        when(userMapper.selectList(any(QueryWrapper<span class="class">.<span class="keyword">class</span>))).<span class="title">thenReturn</span>(<span class="title">list</span>)</span>;</span><br><span class="line">        BaseResponse&lt;PageInfo&lt;User&gt;&gt; baseResponse = userService.getUserList(userReq);</span><br><span class="line">        assertTrue(baseResponse.getData().getList().size() != <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 再次模拟，需要跟源代码的方法一致</span></span><br><span class="line">        verify(userMapper, Mockito.times(<span class="number">1</span>)).selectList(any(QueryWrapper<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserReq <span class="title">mockUserReq</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserReq userReq = <span class="keyword">new</span> UserReq();</span><br><span class="line">        userReq.setPageNum(<span class="string">"1"</span>);</span><br><span class="line">        userReq.setPageSize(<span class="string">"10"</span>);</span><br><span class="line">        userReq.setLongminId(<span class="string">"zhangjianbing"</span>);</span><br><span class="line">        userReq.setIsCertify(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">return</span> userReq;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">mockUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        User user1 = <span class="keyword">new</span> User();</span><br><span class="line">        User user2 = <span class="keyword">new</span> User();</span><br><span class="line">        User user3 = <span class="keyword">new</span> User();</span><br><span class="line">        Collections.addAll(list, user1, user2, user3);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dao层"><a href="#dao层" class="headerlink" title="dao层"></a>dao层</h2><blockquote><p>先开启环境</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开启测试的进程，模拟一个端口号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-11-15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = WalletApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">RunWith</span>(<span class="title">SpringRunner</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">abstract</span> <span class="title">class</span> <span class="title">WalletApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>dao的测试类继承启动类</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserMapper的测试类 &#123;<span class="doctag">@link</span> UserMapper&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-11-16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"Duplicates"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> <span class="keyword">extends</span> <span class="title">WalletApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserReq userReq = mockUserReq();</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.lambda()</span><br><span class="line">                .eq(StringUtils.isNotBlank(userReq.getIsCertify()), User::getIsCertify, userReq.getIsCertify())</span><br><span class="line">                .eq(StringUtils.isNotBlank(userReq.getLongminId()), User::getLongminId, userReq.getLongminId());</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);</span><br><span class="line">        assertTrue(userList.size() != <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserReq <span class="title">mockUserReq</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserReq userReq = <span class="keyword">new</span> UserReq();</span><br><span class="line">        userReq.setPageNum(<span class="string">"1"</span>);</span><br><span class="line">        userReq.setPageSize(<span class="string">"10"</span>);</span><br><span class="line">        userReq.setLongminId(<span class="string">""</span>);</span><br><span class="line">        userReq.setIsCertify(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> userReq;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>依赖内存数据库H2，配置文件如下：</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">classpath:db/schema-h2.sql</span></span><br><span class="line">    <span class="attr">data:</span> <span class="string">classpath:db/data-h2.sql</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:h2:mem:test</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><blockquote><p>data-h2.sql</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM user;</span><br><span class="line">INSERT INTO user (id, name, age, email) VALUES</span><br><span class="line">  (1, &#39;Jone&#39;, 18, &#39;test1@baomidou.com&#39;),</span><br><span class="line">  (2, &#39;Jack&#39;, 20, &#39;test2@baomidou.com&#39;),</span><br><span class="line">  (3, &#39;Tom&#39;, 28, &#39;test3@baomidou.com&#39;),</span><br><span class="line">  (4, &#39;Sandy&#39;, 21, &#39;test4@baomidou.com&#39;),</span><br><span class="line">  (5, &#39;Billie&#39;, 24, &#39;test5@baomidou.com&#39;);</span><br></pre></td></tr></table></figure><blockquote><p>schema-h2.sql</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS user;</span><br><span class="line">CREATE TABLE user</span><br><span class="line">(</span><br><span class="line">  id BIGINT(20) NOT NULL COMMENT &#39;主键ID&#39;,</span><br><span class="line">  name VARCHAR(30) NULL DEFAULT NULL COMMENT &#39;姓名&#39;,</span><br><span class="line">  age INT(11) NULL DEFAULT NULL COMMENT &#39;年龄&#39;,</span><br><span class="line">  email VARCHAR(50) NULL DEFAULT NULL COMMENT &#39;邮箱&#39;,</span><br><span class="line">  PRIMARY KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="Mockito优缺点"><a href="#Mockito优缺点" class="headerlink" title="Mockito优缺点"></a>Mockito优缺点</h1><ul><li>Mockito无法模拟构造方法，静态方法，私有方法，后续会补上<code>PowerMockito</code>的基本使用。</li><li>Mockito简单容易上手，代码清晰明了，就是代码量有点多，<code>Spock</code>是个很棒的框架，它是Groovy语言写的，底层使用的是JUnit，研究一下，后续补上。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前总觉的写单元测试真的是浪费生命，可是直到今天，我是真的认识到了，确实是浪费生命。&lt;/p&gt;
    
    </summary>
    
    
      <category term="boot" scheme="http://yoursite.com/categories/boot/"/>
    
    
      <category term="Boot" scheme="http://yoursite.com/tags/Boot/"/>
    
  </entry>
  
  <entry>
    <title>CyclicBarrier和CountDownLatch比较</title>
    <link href="http://yoursite.com/interview/interview-cyclicbarrier-countdownlatch.html"/>
    <id>http://yoursite.com/interview/interview-cyclicbarrier-countdownlatch.html</id>
    <published>2019-11-11T15:18:00.000Z</published>
    <updated>2020-03-14T13:05:49.751Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要总结归纳了两者的异同，温故而知新，可以吃鸡矣。</p><a id="more"></a><ol><li>名称不同（废话），CyclicBarrier中文叫回环栅栏，CountDownLatch中文叫闭锁或者发令枪。</li><li>CyclicBarrier中await()会阻塞方法的执行，而CountDownLatch中的countDown()不会阻塞方法执行。</li><li>CyclicBarrier是等全部线程就位后一起执行，而CountDownLatch是计数器减为0的时候，开始执行。</li><li>CyclicBarrier可以重复的利用，CountDownLatch只能用一次。</li><li>这两个类在初始化的时候，初始值并不一定等于线程数，根据实际业务来规定。<blockquote><p>相关参考链接：</p></blockquote></li></ol><ul><li><a href="https://www.zhangjianbing.com/archives/56" target="_blank" rel="noopener">https://www.zhangjianbing.com/archives/56</a></li><li><a href="https://www.zhangjianbing.com/archives/55" target="_blank" rel="noopener">https://www.zhangjianbing.com/archives/55</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要总结归纳了两者的异同，温故而知新，可以吃鸡矣。&lt;/p&gt;
    
    </summary>
    
    
      <category term="interview" scheme="http://yoursite.com/categories/interview/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之：策略模式</title>
    <link href="http://yoursite.com/designpattern/designpattern-strategy.html"/>
    <id>http://yoursite.com/designpattern/designpattern-strategy.html</id>
    <published>2019-11-11T14:22:00.000Z</published>
    <updated>2020-03-14T13:03:45.510Z</updated>
    
    <content type="html"><![CDATA[<p>策略模式一般用法就是一个接口有多个实现类，每个实现类都是对接口的不同实现，均代表了接口的不同实现形式，比如说，一个计算的接口，你不必在接口中定义加减乘除的抽象方法，仅需要一个抽象方法，多个实现类来实现这个接口中的抽象方法即可。</p><a id="more"></a><h1 id="普通用法"><a href="#普通用法" class="headerlink" title="普通用法"></a>普通用法</h1><h2 id="抽象接口"><a href="#抽象接口" class="headerlink" title="抽象接口"></a>抽象接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">BigDecimal <span class="title">doCalc</span><span class="params">(BigDecimal var1, BigDecimal var2)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口的实现类"><a href="#接口的实现类" class="headerlink" title="接口的实现类"></a>接口的实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加法实现类&#123;<span class="doctag">@link</span> Calculate&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcAdd</span> <span class="keyword">implements</span> <span class="title">Calculate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">doCalc</span><span class="params">(BigDecimal var1, BigDecimal var2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> var1.add(var2).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 减法实现类&#123;<span class="doctag">@link</span> Calculate&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcSub</span> <span class="keyword">implements</span> <span class="title">Calculate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">doCalc</span><span class="params">(BigDecimal var1, BigDecimal var2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> var1.subtract(var2).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calculate calculate1 = <span class="keyword">new</span> CalcAdd();</span><br><span class="line">        BigDecimal doCalc1 = calculate1.doCalc(<span class="keyword">new</span> BigDecimal(<span class="number">1</span>), <span class="keyword">new</span> BigDecimal(<span class="number">2</span>));</span><br><span class="line">        System.out.println(doCalc1);</span><br><span class="line">        System.out.println(<span class="string">"-------------------------------------"</span>);</span><br><span class="line">        Calculate calculate2 = <span class="keyword">new</span> CalcSub();</span><br><span class="line">        BigDecimal doCalc2 = calculate2.doCalc(<span class="keyword">new</span> BigDecimal(<span class="number">1</span>), <span class="keyword">new</span> BigDecimal(<span class="number">2</span>));</span><br><span class="line">        System.out.println(doCalc2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="优化if-else语句"><a href="#优化if-else语句" class="headerlink" title="优化if-else语句"></a>优化if-else语句</h1><blockquote><p>其实感觉可读性并不强，不如直接if-else来的直接，大体思路就是：首先抽象出一个抽象类，这个抽象类的作用是规范if条件成立时候的处理逻辑，然后每一个if条件都当成一个抽象类的派生类，当遇到需要判断的条件的时候，把条件传到一个可以获取派生类的方法中，利用多态的特性，看起来仅需要一行代码就能搞定多个if，但其实，随着if的增多，代码维护以及可读性变得很低。比如：有很多种会员，不同的会员有不同的处理逻辑，举例如下。</p></blockquote><h2 id="会员枚举"><a href="#会员枚举" class="headerlink" title="会员枚举"></a>会员枚举</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MemberEnum &#123;</span><br><span class="line"></span><br><span class="line">    BRONZE(<span class="string">"1"</span>, <span class="string">"青铜会员"</span>, <span class="string">"BronzeMember"</span>),</span><br><span class="line">    SILVER(<span class="string">"2"</span>, <span class="string">"青铜会员"</span>, <span class="string">"SilverMember"</span>),</span><br><span class="line">    GOLD(<span class="string">"3"</span>, <span class="string">"青铜会员"</span>, <span class="string">"GoldMember"</span>),</span><br><span class="line">    PLATINUM(<span class="string">"4"</span>, <span class="string">"青铜会员"</span>, <span class="string">"PlatinumMember"</span>),</span><br><span class="line">    DIAMOND(<span class="string">"5"</span>, <span class="string">"青铜会员"</span>, <span class="string">"DiamondMember"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    MemberEnum(String code, String desc, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getNameByCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (MemberEnum t : MemberEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t.getCode().equals(code)) &#123;</span><br><span class="line">                <span class="keyword">return</span> t.name;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象接口-1"><a href="#抽象接口-1" class="headerlink" title="抽象接口"></a>抽象接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMemberService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(String message)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口派生类"><a href="#接口派生类" class="headerlink" title="接口派生类"></a>接口派生类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BronzeMember</span> <span class="keyword">implements</span> <span class="title">IMemberService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"恭喜您，"</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiamondMember</span> <span class="keyword">implements</span> <span class="title">IMemberService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"恭喜您，"</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoldMember</span> <span class="keyword">implements</span> <span class="title">IMemberService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"恭喜您，"</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlatinumMember</span> <span class="keyword">implements</span> <span class="title">IMemberService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"恭喜您，"</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SilverMember</span> <span class="keyword">implements</span> <span class="title">IMemberService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"恭喜您，"</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向容器中注入Bean"><a href="#向容器中注入Bean" class="headerlink" title="向容器中注入Bean"></a>向容器中注入Bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rednaxela</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 向容器中注入条件判断的Bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/11/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> https://www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanRegistryConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"BronzeMember"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BronzeMember <span class="title">bronzeMember</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BronzeMember();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"DiamondMember"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DiamondMember <span class="title">diamondMember</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DiamondMember();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"GoldMember"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> GoldMember <span class="title">goldMember</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GoldMember();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"PlatinumMember"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatinumMember <span class="title">platinumMember</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PlatinumMember();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"SilverMember"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SilverMember <span class="title">silverMember</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SilverMember();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(BeanRegistryConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        String name = MemberEnum.getNameByCode(<span class="string">"1"</span>);</span><br><span class="line">        IMemberService iMemberService = (IMemberService)applicationContext.getBean(name);</span><br><span class="line">        iMemberService.process(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>个人感觉策略模式的最大好处就是不改变源代码的基础上增加派生类，比如再多一个超级会员的等级，我只需要再写一个派生类就可以了，其它的代码以及用法完全不用变，缺点就是你在使用派生类的时候需要知道派生类的名字叫什么或者说判断的条件是什么，假如派生类很多，就很难维护，所谓有利有弊吧。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;策略模式一般用法就是一个接口有多个实现类，每个实现类都是对接口的不同实现，均代表了接口的不同实现形式，比如说，一个计算的接口，你不必在接口中定义加减乘除的抽象方法，仅需要一个抽象方法，多个实现类来实现这个接口中的抽象方法即可。&lt;/p&gt;
    
    </summary>
    
    
      <category term="designpattern" scheme="http://yoursite.com/categories/designpattern/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>我们的项目上线了</title>
    <link href="http://yoursite.com/life/life-project-online.html"/>
    <id>http://yoursite.com/life/life-project-online.html</id>
    <published>2019-11-06T16:35:00.000Z</published>
    <updated>2020-03-14T13:08:48.783Z</updated>
    
    <content type="html"><![CDATA[<p>从2019年3月28号到2019年11月07号历经8个月，团队终于有了自己的成果，虽然中间过程坎坎坷坷，但最终的结果还是好的。从项目准备立项到立项，提出需求到落实，从框架搭建到模块拆分，再到代码落实，需求变更、业务方调整、第三方对接等等阻碍，真的是有一种不翔到一泻千里反复轮回的感觉。</p><a id="more"></a><p>首先介绍一下我们”庞大”的研发队伍吧。前端SDE：广亮和中海以及中途走的李洋、相新。后台SDE：丹姐、光晓、许鹏、帅超、晓鑫和我还有中途走的李冲。测试：吴晓、大洋以及后来的王亮和晓龙。TPM：大神白尼and台湾小姐姐谊谨。SDM：大神刚哥。团队氛围融洽、队友间配合默契、有过激烈的讨论、有过各抒己见的工作态度、也有过各持己见的久刚不下、但更多的是开心、舒坦，没有的是相互推诿、互相责怪、做事拖拉。大家一起吃饭，一起加班，一起讨论解决方案，这几个月真的非常开心。遗憾的是其中有几个人中途走了，相新回老家了，李洋去了自如，帅超去了京东，这里真心祝福他们工作顺利，有机会再做同事、做并肩作战的伙伴。</p><p>然后简单介绍下我们的项目吧。项目代号”LongCoin”。为集团内部员工提供福利的一款产品，员工之间可以使用虚拟币(龙币)相互转账、预约、祝福，还可以申请活动福利发放。高阶员工可以使用龙币打赏、犒赏员工、激励员工。龙币进项：集团统一下发到各个账户，再由各个账户发放到个人或者管理者账户中。龙币只能在内部员工间流转，它唯一的出项就是员工使用龙币兑换了第三方福利平台的积分，使用积分进行了消费。</p><p>最后，很久没更新博客了，因为这几周太忙了（真他娘的会找借口）。^~^<br><img src="https://image.zhangjianbing.com/article/picture/longcointeam.png#mirages-width=1590&mirages-height=1062&mirages-cdn-type=1&shadow" alt="请输入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从2019年3月28号到2019年11月07号历经8个月，团队终于有了自己的成果，虽然中间过程坎坎坷坷，但最终的结果还是好的。从项目准备立项到立项，提出需求到落实，从框架搭建到模块拆分，再到代码落实，需求变更、业务方调整、第三方对接等等阻碍，真的是有一种不翔到一泻千里反复轮回的感觉。&lt;/p&gt;
    
    </summary>
    
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
      <category term="精彩生活" scheme="http://yoursite.com/tags/%E7%B2%BE%E5%BD%A9%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之：模板方法模式</title>
    <link href="http://yoursite.com/designpattern/designpattern-template.html"/>
    <id>http://yoursite.com/designpattern/designpattern-template.html</id>
    <published>2019-09-25T23:09:00.000Z</published>
    <updated>2020-03-14T13:03:54.609Z</updated>
    
    <content type="html"><![CDATA[<p>什么是模板方法？即让工作或流程顺序按照写好的模板进行下去，同时还可以自定义流程，以及简化流程。</p><a id="more"></a><p><strong>举例：冲泡茶和咖啡均分四步进行：</strong></p><ol><li>把水煮沸</li><li>冲泡咖啡（茶）</li><li>把咖啡（茶）倒入杯子</li><li>加糖（柠檬）</li></ol><h1 id="一般写法"><a href="#一般写法" class="headerlink" title="一般写法"></a>一般写法</h1><p><strong>咖啡类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 制作咖啡：</span></span><br><span class="line"><span class="comment">         * 1。 把水煮沸</span></span><br><span class="line"><span class="comment">         * 2。 用水冲泡</span></span><br><span class="line"><span class="comment">         * 3。 把咖啡倒进杯子</span></span><br><span class="line"><span class="comment">         * 4。 加糖</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        boilWater();</span><br><span class="line">        brewCoffee();</span><br><span class="line">        pourInCup();</span><br><span class="line">        addSuger();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"把水煮沸"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brewCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用水冲泡咖啡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"把咖啡倒进杯子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSuger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"加糖"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>茶类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tea</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 制作茶：</span></span><br><span class="line"><span class="comment">         * 1。 把水煮沸</span></span><br><span class="line"><span class="comment">         * 2。 用水冲泡</span></span><br><span class="line"><span class="comment">         * 3。 把茶倒进杯子</span></span><br><span class="line"><span class="comment">         * 4。 加柠檬</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        boilWater();</span><br><span class="line">        pourInCup();</span><br><span class="line">        pourInCup();</span><br><span class="line">        addLemon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"把水煮沸"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brewTea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用水冲泡茶"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"把茶倒进杯子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLemon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"加柠檬"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这种实现方式有很多重复的代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Coffee coffee = <span class="keyword">new</span> Coffee();</span><br><span class="line">        Tea tea = <span class="keyword">new</span> Tea();</span><br><span class="line">        coffee.prepare();</span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">        tea.prepare();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h1><p><strong>定义抽象的模板方法，把公共方法抽离出来，其它交给子类去实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DrinksTemplate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设定为final，不让子类去覆盖或篡改流程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        pourInCup();</span><br><span class="line">        add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"把水煮沸"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交给子类实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"把饮料倒进杯子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>咖啡类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">DrinksTemplate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用沸水冲泡咖啡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"加糖"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>茶类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tea</span> <span class="keyword">extends</span> <span class="title">DrinksTemplate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用沸水冲泡茶"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"加柠檬"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Coffee coffee = <span class="keyword">new</span> Coffee();</span><br><span class="line">        Tea tea = <span class="keyword">new</span> Tea();</span><br><span class="line">        coffee.prepare();</span><br><span class="line">        System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line">        tea.prepare();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用钩子函数"><a href="#使用钩子函数" class="headerlink" title="使用钩子函数"></a>使用钩子函数</h1><blockquote><p>钩子函数是在抽象模板方法中定义的，它的作用就是控制流程中的某个步骤是否执行、简化流程，子类可以选择覆盖。比如，在准备给用户冲泡咖啡或茶之前询问用户是否需要加糖或者柠檬，不需要就不进行加糖或柠檬这一步骤了。</p></blockquote><p><strong>抽象模板方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DrinksTemplate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设定为final，不让子类去覆盖或篡改流程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        pourInCup();</span><br><span class="line">        <span class="keyword">if</span> (ifAdd()) &#123;</span><br><span class="line">            add();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"把水煮沸"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交给子类实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"把饮料倒进杯子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 钩子函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">ifAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>只让茶类去覆盖钩子函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tea</span> <span class="keyword">extends</span> <span class="title">DrinksTemplate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean ifAdd;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用沸水冲泡茶"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"加柠檬"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">ifAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ifAdd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"Duplicates"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Coffee coffee = <span class="keyword">new</span> Coffee();</span><br><span class="line">        Tea tea = <span class="keyword">new</span> Tea();</span><br><span class="line">        <span class="comment">// 启用钩子函数</span></span><br><span class="line">        tea.setIfAdd(<span class="keyword">false</span>);</span><br><span class="line">        coffee.prepare();</span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">        tea.prepare();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">把水煮沸</span><br><span class="line">用沸水冲泡咖啡</span><br><span class="line">把饮料倒进杯子</span><br><span class="line">加糖</span><br><span class="line">==========</span><br><span class="line">把水煮沸</span><br><span class="line">用沸水冲泡茶</span><br><span class="line">把饮料倒进杯子</span><br></pre></td></tr></table></figure><h1 id="好莱坞原则"><a href="#好莱坞原则" class="headerlink" title="好莱坞原则"></a>好莱坞原则</h1><p>未完。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是模板方法？即让工作或流程顺序按照写好的模板进行下去，同时还可以自定义流程，以及简化流程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="designpattern" scheme="http://yoursite.com/categories/designpattern/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程系列之 (七)：CyclicBarrier 工具类</title>
    <link href="http://yoursite.com/concurrent/concurrentprogram-cyclicbarrier.html"/>
    <id>http://yoursite.com/concurrent/concurrentprogram-cyclicbarrier.html</id>
    <published>2019-09-23T02:50:00.000Z</published>
    <updated>2020-03-14T12:58:36.275Z</updated>
    
    <content type="html"><![CDATA[<p><code>CyclicBarrier</code>是<code>java.util.concurrent</code>包下的并发工具类，通常叫回环栅栏，它的作用跟<code>CountDownLatch</code>很像，但也有很大区别，它是要等到所有线程到达某个点，才能一起向下运行。CyclicBarrier实现主要基于ReentrantLock。</p><a id="more"></a><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><blockquote><p>运动会中等所有运动员就绪后，开始比赛。</p></blockquote><p><strong>运动员（类似于线程）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Athletes</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CyclicBarrier cyclicBarrier;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Athletes</span><span class="params">(CyclicBarrier cyclicBarrier, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cyclicBarrier = cyclicBarrier;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">"就位"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cyclicBarrier.await();</span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">double</span> time = random.nextDouble() + <span class="number">9</span>;</span><br><span class="line">            System.out.println(name + <span class="string">": "</span> + time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Athletes&gt; athleteList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        athleteList.add(<span class="keyword">new</span> Athletes(cyclicBarrier, <span class="string">"博尔特"</span>));</span><br><span class="line">        athleteList.add(<span class="keyword">new</span> Athletes(cyclicBarrier, <span class="string">"鲍威尔"</span>));</span><br><span class="line">        athleteList.add(<span class="keyword">new</span> Athletes(cyclicBarrier, <span class="string">"盖伊"</span>));</span><br><span class="line">        athleteList.add(<span class="keyword">new</span> Athletes(cyclicBarrier, <span class="string">"布雷克"</span>));</span><br><span class="line">        athleteList.add(<span class="keyword">new</span> Athletes(cyclicBarrier, <span class="string">"加特林"</span>));</span><br><span class="line">        athleteList.add(<span class="keyword">new</span> Athletes(cyclicBarrier, <span class="string">"苏炳添"</span>));</span><br><span class="line">        athleteList.add(<span class="keyword">new</span> Athletes(cyclicBarrier, <span class="string">"路人甲"</span>));</span><br><span class="line">        athleteList.add(<span class="keyword">new</span> Athletes(cyclicBarrier, <span class="string">"路人乙"</span>));</span><br><span class="line">        Executor executor = Executors.newFixedThreadPool(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (Athletes athlete : athleteList) &#123;</span><br><span class="line">            executor.execute(athlete);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 再次比赛（CountDownLatch不可以重复利用）</span></span><br><span class="line">        <span class="keyword">for</span> (Athletes athlete : athleteList) &#123;</span><br><span class="line">            executor.execute(athlete);</span><br><span class="line">        &#125;</span><br><span class="line">        ((ExecutorService) executor).shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>比赛结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">鲍威尔就位</span><br><span class="line">盖伊就位</span><br><span class="line">博尔特就位</span><br><span class="line">加特林就位</span><br><span class="line">布雷克就位</span><br><span class="line">苏炳添就位</span><br><span class="line">路人甲就位</span><br><span class="line">路人乙就位</span><br><span class="line">博尔特: <span class="number">9.432140484108947</span></span><br><span class="line">路人甲: <span class="number">9.867771637173409</span></span><br><span class="line">加特林: <span class="number">9.582797646365496</span></span><br><span class="line">路人乙: <span class="number">9.410753732211774</span></span><br><span class="line">布雷克: <span class="number">9.422788146940936</span></span><br><span class="line">鲍威尔: <span class="number">9.838028130660083</span></span><br><span class="line">苏炳添: <span class="number">9.506124200896416</span></span><br><span class="line">盖伊: <span class="number">9.120806964021032</span></span><br><span class="line">路人甲就位</span><br><span class="line">苏炳添就位</span><br><span class="line">加特林就位</span><br><span class="line">布雷克就位</span><br><span class="line">盖伊就位</span><br><span class="line">博尔特就位</span><br><span class="line">鲍威尔就位</span><br><span class="line">路人乙就位</span><br><span class="line">路人乙: <span class="number">9.368666795856056</span></span><br><span class="line">路人甲: <span class="number">9.160379612093944</span></span><br><span class="line">加特林: <span class="number">9.165764553853304</span></span><br><span class="line">博尔特: <span class="number">9.795900155563556</span></span><br><span class="line">苏炳添: <span class="number">9.776369290344261</span></span><br><span class="line">鲍威尔: <span class="number">9.322663435858155</span></span><br><span class="line">盖伊: <span class="number">9.406014868148848</span></span><br><span class="line">布雷克: <span class="number">9.69509705666573</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到，<code>CyclicBarrier</code>可以循环的使用，重复比赛，这也是<code>CyclicBarrier</code>的特点。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;CyclicBarrier&lt;/code&gt;是&lt;code&gt;java.util.concurrent&lt;/code&gt;包下的并发工具类，通常叫回环栅栏，它的作用跟&lt;code&gt;CountDownLatch&lt;/code&gt;很像，但也有很大区别，它是要等到所有线程到达某个点，才能一起向下运行。CyclicBarrier实现主要基于ReentrantLock。&lt;/p&gt;
    
    </summary>
    
    
      <category term="concurrent" scheme="http://yoursite.com/categories/concurrent/"/>
    
    
      <category term="并发编程" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程系列之 (六)：CountDownLatch工具类</title>
    <link href="http://yoursite.com/concurrent/concurrentprogram-countdownlatch.html"/>
    <id>http://yoursite.com/concurrent/concurrentprogram-countdownlatch.html</id>
    <published>2019-09-22T23:30:00.000Z</published>
    <updated>2020-03-14T12:58:16.696Z</updated>
    
    <content type="html"><![CDATA[<p>CountDownLatch是<code>java.util.concurrent</code>包下面的并发工具类，通常叫发令枪或者闭锁。它的主要作用就是灵活的控制线程的执行顺序，完成线程之间的协作，它的底层借助了AQS队列同步器来完成功能。</p><a id="more"></a><h1 id="业务场景一"><a href="#业务场景一" class="headerlink" title="业务场景一"></a>业务场景一</h1><blockquote><p>业务场景描述：假设一条流水线上有三个工作者：worker1，worker2，worker3。有一个任务的完成需要他们三者协作完成，worker3可以开始这个任务的前提是worker1和worker2完成了他们的工作，而worker1和worker2是可以并行他们各自的工作的。</p></blockquote><h2 id="Join实现"><a href="#Join实现" class="headerlink" title="Join实现"></a>Join实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchAndJoin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 三个独立的工人线程</span></span><br><span class="line">        worker worker1 = <span class="keyword">new</span> worker(<span class="string">"worker1"</span>, (<span class="keyword">long</span>) (Math.random()*<span class="number">4000</span>));</span><br><span class="line">        worker worker2 = <span class="keyword">new</span> worker(<span class="string">"worker2"</span>, (<span class="keyword">long</span>) (Math.random()*<span class="number">4000</span>));</span><br><span class="line">        worker worker3 = <span class="keyword">new</span> worker(<span class="string">"worker3"</span>, (<span class="keyword">long</span>) (Math.random()*<span class="number">4000</span>));</span><br><span class="line">        worker1.start();</span><br><span class="line">        worker2.start();</span><br><span class="line">        </span><br><span class="line">        worker1.join();</span><br><span class="line">        worker2.join();</span><br><span class="line">        System.out.println(<span class="string">"准备工作就绪..."</span>);</span><br><span class="line"></span><br><span class="line">        worker3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工人类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">worker</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 名字</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="comment">//工作时间</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> time;</span><br><span class="line"></span><br><span class="line">        worker(String name, <span class="keyword">long</span> time) &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.time = time;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(name + <span class="string">"开始工作"</span>);</span><br><span class="line">                Thread.sleep(time);</span><br><span class="line">                System.out.println(name + <span class="string">"工作完成，耗费时间="</span> + time);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">worker2开始工作</span><br><span class="line">worker1开始工作</span><br><span class="line">worker1工作完成，耗费时间=<span class="number">601</span></span><br><span class="line">worker2工作完成，耗费时间=<span class="number">2886</span></span><br><span class="line">准备工作就绪...</span><br><span class="line">worker3开始工作</span><br><span class="line">worker3工作完成，耗费时间=<span class="number">686</span></span><br></pre></td></tr></table></figure><blockquote><p>可以顺利的完成工作，join的工作原理是，不停检查thread是否存活，如果存活则让当前线程永远wait，直到thread线程终止，线程的notifyAll就会被调用，还可以理解为join就是插队的意思</p></blockquote><h2 id="CountDownLatch实现"><a href="#CountDownLatch实现" class="headerlink" title="CountDownLatch实现"></a>CountDownLatch实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化计数器为2</span></span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 三个独立的工人线程</span></span><br><span class="line">        worker worker1 = <span class="keyword">new</span> worker(<span class="string">"worker1"</span>, (<span class="keyword">long</span>) (Math.random() * <span class="number">4000</span>), countDownLatch);</span><br><span class="line">        worker worker2 = <span class="keyword">new</span> worker(<span class="string">"worker2"</span>, (<span class="keyword">long</span>) (Math.random() * <span class="number">4000</span>), countDownLatch);</span><br><span class="line">        worker worker3 = <span class="keyword">new</span> worker(<span class="string">"worker3"</span>, (<span class="keyword">long</span>) (Math.random() * <span class="number">4000</span>), countDownLatch);</span><br><span class="line">        worker1.start();</span><br><span class="line">        worker2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当计数器不为0的时候均等待</span></span><br><span class="line">        countDownLatch.await();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"准备工作就绪..."</span>);</span><br><span class="line">        worker3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">worker</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> time;</span><br><span class="line">        <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">        worker(String name, <span class="keyword">long</span> time, CountDownLatch countDownLatch) &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.time = time;</span><br><span class="line">            <span class="keyword">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(name + <span class="string">" 开始工作了。。。"</span>);</span><br><span class="line">            <span class="comment">// 减一</span></span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">            System.out.println(name + <span class="string">" 工作完成。。。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建一个计数器为2的 CountDownLatch ，让Worker持有这个CountDownLatch 实例，当完成自己的工作后，调用countDownLatch.countDown() 方法将计数器减1。countDownLatch.await() 方法会一直阻塞直到计数器为0，主线程才会继续往下执行。</p></blockquote><p><strong>运行结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">worker1 开始工作了。。。</span><br><span class="line">worker1 工作完成。。。</span><br><span class="line">worker2 开始工作了。。。</span><br><span class="line">worker2 工作完成。。。</span><br><span class="line">准备工作就绪...</span><br><span class="line">worker3 开始工作了。。。</span><br><span class="line">worker3 工作完成。。。</span><br></pre></td></tr></table></figure><blockquote><p>从结果上来看，都解决了问题，但是他们还是有区别的。</p></blockquote><h1 id="业务场景二"><a href="#业务场景二" class="headerlink" title="业务场景二"></a>业务场景二</h1><blockquote><p>业务场景：假设worker的工作可以分为两个阶段，work6只需要等待其它woker完成他们各自工作的第一个阶段之后才可以开始自己的工作，而不是场景1中的必须等待work1和work2把他们的工作全部完成之后才能开始。这样join就不可以实现了，应当采用CountDownLatch 来实现。</p></blockquote><h2 id="只能CountDownLatch实现"><a href="#只能CountDownLatch实现" class="headerlink" title="只能CountDownLatch实现"></a>只能CountDownLatch实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化计数器为5</span></span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 六个独立的工人线程</span></span><br><span class="line">        worker worker1 = <span class="keyword">new</span> worker(<span class="string">"worker1"</span>, (<span class="keyword">long</span>) (Math.random() * <span class="number">4000</span>), countDownLatch);</span><br><span class="line">        worker worker2 = <span class="keyword">new</span> worker(<span class="string">"worker2"</span>, (<span class="keyword">long</span>) (Math.random() * <span class="number">4000</span>), countDownLatch);</span><br><span class="line">        worker worker3 = <span class="keyword">new</span> worker(<span class="string">"worker3"</span>, (<span class="keyword">long</span>) (Math.random() * <span class="number">4000</span>), countDownLatch);</span><br><span class="line">        worker worker4 = <span class="keyword">new</span> worker(<span class="string">"worker4"</span>, (<span class="keyword">long</span>) (Math.random() * <span class="number">4000</span>), countDownLatch);</span><br><span class="line">        worker worker5 = <span class="keyword">new</span> worker(<span class="string">"worker5"</span>, (<span class="keyword">long</span>) (Math.random() * <span class="number">4000</span>), countDownLatch);</span><br><span class="line">        worker worker6 = <span class="keyword">new</span> worker(<span class="string">"worker6"</span>, (<span class="keyword">long</span>) (Math.random() * <span class="number">4000</span>), countDownLatch);</span><br><span class="line"></span><br><span class="line">        worker1.start();</span><br><span class="line">        worker2.start();</span><br><span class="line">        worker3.start();</span><br><span class="line">        worker4.start();</span><br><span class="line">        worker5.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当计数器不为0的时候均等待</span></span><br><span class="line">        countDownLatch.await();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"准备工作就绪..."</span>);</span><br><span class="line">        worker6.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">worker</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> time;</span><br><span class="line">        <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">        worker(String name, <span class="keyword">long</span> time, CountDownLatch countDownLatch) &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.time = time;</span><br><span class="line">            <span class="keyword">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(name + <span class="string">" 工作开始。。。"</span>);</span><br><span class="line">                Thread.sleep(time);</span><br><span class="line">                System.out.println(name + <span class="string">" 第一阶段工作完成。。。用时:"</span> + time);</span><br><span class="line">                <span class="comment">// 计数器减一</span></span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">                <span class="comment">// 假设第二阶段的工作都需要两秒完成</span></span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                System.out.println(name + <span class="string">" 第二阶段工作完成。。。用时:"</span> + (time + <span class="number">2000</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>多运行几次发现：线程6等到前面5个线程的第一阶段全部完成，就开始运行了，运行结果：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">worker3 工作开始。。。</span><br><span class="line">worker2 工作开始。。。</span><br><span class="line">worker1 工作开始。。。</span><br><span class="line">worker4 工作开始。。。</span><br><span class="line">worker5 工作开始。。。</span><br><span class="line">worker3 第一阶段工作完成。。。用时:<span class="number">1410</span></span><br><span class="line">worker5 第一阶段工作完成。。。用时:<span class="number">2022</span></span><br><span class="line">worker2 第一阶段工作完成。。。用时:<span class="number">2273</span></span><br><span class="line">worker1 第一阶段工作完成。。。用时:<span class="number">2856</span></span><br><span class="line">worker3 第二阶段工作完成。。。用时:<span class="number">3410</span></span><br><span class="line">worker4 第一阶段工作完成。。。用时:<span class="number">3430</span></span><br><span class="line">准备工作就绪...</span><br><span class="line">worker6 工作开始。。。</span><br><span class="line">worker5 第二阶段工作完成。。。用时:<span class="number">4022</span></span><br><span class="line">worker2 第二阶段工作完成。。。用时:<span class="number">4273</span></span><br><span class="line">worker1 第二阶段工作完成。。。用时:<span class="number">4856</span></span><br><span class="line">worker4 第二阶段工作完成。。。用时:<span class="number">5430</span></span><br><span class="line">worker6 第一阶段工作完成。。。用时:<span class="number">3773</span></span><br><span class="line">worker6 第二阶段工作完成。。。用时:<span class="number">5773</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li>调用thread.join() 方法必须等thread 执行完毕，当前线程才能继续往下执行，而CountDownLatch通过计数器提供了更灵活的控制，只要检测到计数器为0当前线程就可以往下执行而不用管相应的thread是否执行完毕。</li><li>在使用CountDownLatch的时候，子线程数目并不一定要跟计数器初始值一样，子线程中完全可以扣减多次，来实现线程的灵活控制，但最终的结果必须扣减至0。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CountDownLatch是&lt;code&gt;java.util.concurrent&lt;/code&gt;包下面的并发工具类，通常叫发令枪或者闭锁。它的主要作用就是灵活的控制线程的执行顺序，完成线程之间的协作，它的底层借助了AQS队列同步器来完成功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="concurrent" scheme="http://yoursite.com/categories/concurrent/"/>
    
    
      <category term="并发编程" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程系列之 (五)：原子操作类CAS</title>
    <link href="http://yoursite.com/concurrent/concurrentprogram-cas.html"/>
    <id>http://yoursite.com/concurrent/concurrentprogram-cas.html</id>
    <published>2019-09-19T06:09:00.000Z</published>
    <updated>2020-03-14T12:57:26.043Z</updated>
    
    <content type="html"><![CDATA[<p>CAS是compare and swap英文的缩写，皇家翻译过来为：比较然后交换。</p><a id="more"></a><h2 id="CAS的原理"><a href="#CAS的原理" class="headerlink" title="CAS的原理"></a>CAS的原理</h2><ol><li>三个运算符：一个内存地址V，一个期望值A，一个新值B。</li><li>基本思路：如果地址V上的值和期望值A相等，返回true，并给地址V赋上新值B，如果不是，返回false，不做任何操作。</li><li>循环(死循环，或者叫自旋)里不断的进行CAS操作。</li></ol><p><strong>现代处理器都支持CAS的指令，循环这个指令，直到成功为止。</strong></p><h2 id="CAS所带来的问题"><a href="#CAS所带来的问题" class="headerlink" title="CAS所带来的问题"></a>CAS所带来的问题</h2><p>1.ABA问题。</p><blockquote><p>所谓的ABA问题就是假设某个内存地址上有一个数值A，但一个线程过来后把它变成了B，然后又变回了A，另一个线程过来后，发现内存地址上的值和期望的值一样，故CAS成功了，其实，内存地址上的值发生了变化，这种问题可以用加版本号的方式来解决。下面代码会演示。</p></blockquote><p>2.系统开销问题。</p><blockquote><p>当一个CAS操作永远不成功，它就会一直自旋，系统开销巨大，遇到这种情况，我们只能使用syn锁或者其他锁的方式来替代CAS操作了。</p></blockquote><p>3.只能保证一个共享变量的原子操作。</p><blockquote><p>就是只能够保证一个共享变量，如果想保证多个变量的话，可以将这些变量放入一个引用变量中，atomic为我们提供了操纵引用变量的类，叫AtomicReference</p></blockquote><h2 id="相关原子操作类"><a href="#相关原子操作类" class="headerlink" title="相关原子操作类"></a>相关原子操作类</h2><ol><li>基本类型类：AtomicBoolean，AtomicInteger，AtomicLong</li><li>数组类：AtomicIntegerArray，AtomicLongArray</li><li>引用类型：AtomicReference，AtomicMarkableReference，AtomicStampedReference</li><li>原子更新字段类：AtomicReferenceFieldUpdater，AtomicIntegerFieldUpdater，AtomicLongFieldUpdater</li></ol><h2 id="AtomicInteger基本类型"><a href="#AtomicInteger基本类型" class="headerlink" title="AtomicInteger基本类型"></a>AtomicInteger基本类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> AtomicInteger ai = <span class="keyword">new</span> AtomicInteger(<span class="number">10</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 类似"i++"</span></span><br><span class="line">        System.out.println(ai.getAndIncrement());</span><br><span class="line">        <span class="comment">// 类似"++i"</span></span><br><span class="line">        System.out.println(ai.incrementAndGet());</span><br><span class="line">        System.out.println(ai.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>打印结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h2 id="AtomicReference引用类型"><a href="#AtomicReference引用类型" class="headerlink" title="AtomicReference引用类型"></a>AtomicReference引用类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> AtomicReference&lt;User&gt; atomicReference = <span class="keyword">new</span> AtomicReference();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"Ryan1"</span>, <span class="number">18</span>); <span class="comment">// 要修改的实例</span></span><br><span class="line">        <span class="comment">// 用之包装一下实体类对象</span></span><br><span class="line">        atomicReference.set(user);</span><br><span class="line">        <span class="comment">// 新对象</span></span><br><span class="line">        User newUser = <span class="keyword">new</span> User(<span class="string">"Ryan2"</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="comment">// CAS操作</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = atomicReference.compareAndSet(user, newUser); <span class="comment">// 要变化的实例</span></span><br><span class="line">        System.out.println(flag);</span><br><span class="line">        <span class="comment">// 打印包装类中的对象</span></span><br><span class="line">        System.out.println(atomicReference.get().getName());</span><br><span class="line">        System.out.println(atomicReference.get().getAge());</span><br><span class="line">        System.out.println(<span class="string">"========================"</span>);</span><br><span class="line">        <span class="comment">// 打印原对象</span></span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">        System.out.println(user.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个实体类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">        User(String name, <span class="keyword">int</span> age) &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line">Ryan2</span><br><span class="line"><span class="number">20</span></span><br><span class="line">========================</span><br><span class="line">Ryan1</span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure><p><strong>分析：</strong><br>通过compareAndSet方法进行CAS操作，可见被包装过的user对象本值是不会发生变化的，改变的只是包装的user对象，他们两个在被包装的时候就已经不同了。</p><h2 id="AtomicReference存在的问题"><a href="#AtomicReference存在的问题" class="headerlink" title="AtomicReference存在的问题"></a>AtomicReference存在的问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 声明引用值为0</span></span><br><span class="line">    <span class="keyword">static</span> AtomicReference&lt;Integer&gt; atomicReference = <span class="keyword">new</span> AtomicReference(<span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 引用</span></span><br><span class="line">        <span class="keyword">final</span> Integer reference = atomicReference.get();</span><br><span class="line">        <span class="comment">// 原引用</span></span><br><span class="line">        System.out.println(<span class="string">"reference初始值:"</span> + reference);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新起一个线程用来首次更改</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Integer reference = atomicReference.get();</span><br><span class="line">                System.out.println(reference + <span class="string">"------"</span></span><br><span class="line">                        + atomicReference.compareAndSet(reference, reference + <span class="number">10</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改回原值</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Integer reference = atomicReference.get();</span><br><span class="line">                System.out.println(reference + <span class="string">"------"</span></span><br><span class="line">                        + atomicReference.compareAndSet(reference, reference - <span class="number">10</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再做CAS</span></span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Integer reference = atomicReference.get();</span><br><span class="line">                System.out.println(reference + <span class="string">"------"</span></span><br><span class="line">                        + atomicReference.compareAndSet(reference, reference + <span class="number">10</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// t1,t2,t3以此执行</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.start();</span><br><span class="line">        t2.join();</span><br><span class="line">        t3.start();</span><br><span class="line">        t3.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(atomicReference.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reference初始值:<span class="number">0</span></span><br><span class="line"><span class="number">0</span>------<span class="keyword">true</span></span><br><span class="line"><span class="number">10</span>------<span class="keyword">true</span></span><br><span class="line"><span class="number">0</span>------<span class="keyword">true</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p><strong>以上代码可以举个例子：</strong></p><blockquote><p>你倒了一杯水放桌子上，干了点别的事，然后同事把你水喝了又给你重新倒了一杯水，你回来看水还在，拿起来就喝，如果你不管水中间被人喝过，只关心水还在，这就是ABA问题。上面代码就只关注结果没变就可以修改成功，不关注过程。</p></blockquote><h2 id="AtomicStampedReference解决ABA问题"><a href="#AtomicStampedReference解决ABA问题" class="headerlink" title="AtomicStampedReference解决ABA问题"></a>AtomicStampedReference解决ABA问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicStampedReferenceTest02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明引用值为0，版本号为0</span></span><br><span class="line">    <span class="keyword">static</span> AtomicStampedReference&lt;Integer&gt; atomicStampedReference = <span class="keyword">new</span> AtomicStampedReference(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 原始版本号</span></span><br><span class="line">        <span class="keyword">final</span> Integer initialStamp = atomicStampedReference.getStamp();</span><br><span class="line">        <span class="comment">// 原始引用</span></span><br><span class="line">        <span class="keyword">final</span> Integer initialReference = atomicStampedReference.getReference();</span><br><span class="line">        <span class="comment">// 原引用和原版本号</span></span><br><span class="line">        System.out.println(<span class="string">"reference初始值: "</span> + initialReference + <span class="string">"版本号初始值: "</span> + initialStamp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新起一个线程用来首次更改</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"原始值："</span>+initialReference + <span class="string">" ====== 原始版本号："</span> + initialStamp + <span class="string">" ====== 首次修改结果："</span></span><br><span class="line">                        + atomicStampedReference.compareAndSet(initialReference, initialReference + <span class="number">10</span>, initialStamp, initialStamp + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Integer stamp = atomicStampedReference.getStamp();</span><br><span class="line">                Integer reference = atomicStampedReference.getReference();</span><br><span class="line">                System.out.println(<span class="string">"当前引用："</span>+reference + <span class="string">" ====== 当前版本号："</span> + stamp + <span class="string">" ====== 第二次修改结果："</span></span><br><span class="line">                        + atomicStampedReference.compareAndSet(reference, reference - <span class="number">10</span>, stamp, stamp + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 取到当前引用值和版本号，但是修改的时候使用最开始的版本号</span></span><br><span class="line">                Integer stamp = atomicStampedReference.getStamp();</span><br><span class="line">                Integer reference = atomicStampedReference.getReference();</span><br><span class="line">                System.out.println(<span class="string">"当前引用："</span>+reference + <span class="string">" ====== 当前版本号："</span> + stamp + <span class="string">" ====== 第三次修改结果："</span></span><br><span class="line">                        + atomicStampedReference.compareAndSet(initialReference, reference + <span class="number">10</span>, initialStamp, stamp + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// t1,t2,t3顺序执行</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.start();</span><br><span class="line">        t2.join();</span><br><span class="line">        t3.start();</span><br><span class="line">        t3.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"当前的引用："</span> + atomicStampedReference.getReference());</span><br><span class="line">        System.out.println(<span class="string">"当前的版本号："</span> + atomicStampedReference.getStamp());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">reference初始值: <span class="number">0</span>版本号初始值: <span class="number">0</span></span><br><span class="line">原始值：<span class="number">0</span> ====== 原始版本号：<span class="number">0</span> ====== 首次修改结果：<span class="keyword">true</span></span><br><span class="line">当前引用：<span class="number">10</span> ====== 当前版本号：<span class="number">1</span> ====== 第二次修改结果：<span class="keyword">true</span></span><br><span class="line">当前引用：<span class="number">0</span> ====== 当前版本号：<span class="number">2</span> ====== 第三次修改结果：<span class="keyword">false</span></span><br><span class="line">当前的引用：<span class="number">0</span></span><br><span class="line">当前的版本号：<span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><blockquote><p>采用AtomicStampedReference来解决ABA问题，t1线程修改了初始值，并将版本号加1，t2线程将值修改回了初始值，但是版本号加1，t3线程想要修改初始值，虽然当前值跟初始值相等，但是版本号还是用的原来的，故数据修改失败，解决了ABA问题。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CAS是compare and swap英文的缩写，皇家翻译过来为：比较然后交换。&lt;/p&gt;
    
    </summary>
    
    
      <category term="concurrent" scheme="http://yoursite.com/categories/concurrent/"/>
    
    
      <category term="并发编程" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>你有没有发现，父母开始看你脸色了</title>
    <link href="http://yoursite.com/life/life-thinking-in-life.html"/>
    <id>http://yoursite.com/life/life-thinking-in-life.html</id>
    <published>2019-08-28T13:50:00.000Z</published>
    <updated>2020-03-14T13:09:56.585Z</updated>
    
    <content type="html"><![CDATA[<p>在我们心中，父母总是“强势”的一方，我们反抗、争论、摔门而走，却好像都无力抵抗。</p><a id="more"></a><p>慢慢的，我们长大了，慢慢长成可以和父母平起平坐的年纪，可成长带来了新的痛苦：<br>你有没有发现，你的父母已经开始看你脸色了？你有没有发现，你的父母开始在你面前变得小心翼翼了？<br>每次假期回家返程时，父母总会“求着”我带东西回去：<br>“蒸好的包子带着吧？你用微波炉热一下就可以吃。”<br>“牛奶带着吧？排骨、牛肉带着吧？省得买。”<br>“米、面都还有吗？给你带点儿？”<br>“水果带着吧？留着路上吃。”<br>……<br>而我总会下意识地拒绝：“太重了！”“都能买得到！”“装不下！”“你烦不烦啊！”<br>其实我真没多想，单纯是觉得带着不方便，可后来突然发现，以前他们会劈头盖脸骂我不知好歹，而现在他们居然不再强求，拿着东西转身离开。<br>那一刻，看到他们脸上的落寞，突然觉得自己很混蛋。<br>不知从何时开始，父母已经不再能逼着你做你不喜欢的事了，就连对你好，都变得小心翼翼，生怕惹你不开心。<br>前段时间，朋友的父亲生病住院，朋友一家居然隔了一周才知道他生病了。<br>其实期间他给孩子打过电话的，但对生病之事只字未提，而是问“忙不忙？”“累不累？”<br>后来问及才知道，他本来是想告诉孩子的，可从电话中得知子女忙着工作，所以不想麻烦子女，自己一个人跑去住院，自己照顾自己，吃喝都是定的医院餐。<br>即使后来子女们都知道了，他还是固执地不让他们买东西来，不让他们送饭。<br>女儿还是决定给他送饭，每天很丰盛，可他有的菜却动都不动，一问才得知，他害怕他动过的菜，子女嫌弃，而他也吃不完那么多，所以为了不浪费，干脆只吃一样，剩下的让女儿带回去吃。<br>一句话听得他女儿瞬间落泪，她想不明白，为什么父亲会活得那么小心翼翼。怎么会嫌弃啊？那是她爸爸啊！<br>不知从何时开始，父母变得唯唯诺诺，担心打扰我们的生活，害怕惹起我们的厌烦，无限委屈自己，自己的事情全都自己做，就连病了痛了，都不愿给你添麻烦。<br>曾经，都是我理直气壮地给爸妈打电话：“我没钱了，给我打点钱。”<br>而后来某天，父亲突然给我打来电话，支支吾吾半天，小心翼翼地问：“你有钱吗？能借我一点吗？”<br>曾经父母都会用“命令”的口气对我说话。<br>可现在，家里大小事情，他们都开始下意识地和我商量，问我的意见，遵循我的意见。<br>曾经他们好像什么都懂。<br>而现在，他们会戴着老花镜，拿着手机，小心翼翼地敲开我的房门：“这个我不懂，你能教教我吗？”<br>不知从何时开始，父母不再是那个无所不能的超人了。<br>他们也有不会的、不懂的，他们开始下意识地依赖你，却又小心翼翼，害怕你不开心。<br>我曾看过一段视频，很短，却很扎心。<br>开篇是一场面试，一个头发已经开始花白的老人，坐在两个年轻女孩面前接受面试。<br>两位面试官很诧异，一个谈吐不凡并且已经退休了的老人，为什么要来应聘一个跑腿打杂的实习生工作？<br>从这位父亲口中说出的理由，让人心酸：原来他只是不想被时代抛弃，想要多学学，然后能多照顾女儿一点。<br>而在这背后，是女儿长大了，他不再被需要了。<br>他在吃饭时看到了桌上的账单，他想帮女儿缴费，可女儿说账单自己会付。<br>疑惑的他偷偷地跑到了营业厅帮女儿缴费，可是却被营业厅的人笑话了，因为现在早已是网络自动缴费时代。<br>下着大雨，女儿没带伞，他担心女儿被淋湿，就坐了好远的公交车来给女儿送伞。<br>可其实，女儿正准备直接打车回家，他的出现反而是添乱，女儿还要打车绕远路送他回家。<br>偷偷地到女儿的家，想要给她做顿好吃的，可没想到却打碎了碗。<br>女儿看着一片狼藉，语气难免重了些：“我又不是小孩了，我能照顾好自己！”<br>他沉默了，尴尬地转身离开。<br>这位父亲看着女儿的脸色，手足无措。<br>他想帮忙，却总是帮不上。他想学新事物，却又不敢麻烦女儿教他。<br>“小时候啊，她总夸我是超人。现在啊，我过时了，总是在添乱。女儿长大了，不需要爸爸这个过时的超人了。”<br>这位爸爸的话让人心酸，而我们的父母又何尝不是如此呢？<br>都说爱得深的那一个，就是卑微的那一个。<br>在父母和子女的关系上，其实同样适用。<br>只是与爱情不同，亲情上的卑微，往往更低到骨子里。<br>面对着老去的父母，很多时候，子女也和当初的他们一样“趾高气昂”：<br>“怎么教了你那么多遍，你还不会！”<br>“你不会就不要乱碰！”<br>“怎么这么点小事都做不好？”<br>“跟你说了多少遍了……”<br>很多时候，越长大，我们可能越会对父母不耐烦，觉得他们唠叨，觉得烦，觉得他们做不好很多事。<br>这让他们开始害怕，躲在自己的小圈子里，战战兢兢，小心翼翼地看你的脸色，生怕惹你不开心，言语、行为中甚至都带着一丝“犹豫”和“讨好”。<br>父母和子女的关系，随着子女慢慢长大，开始产生质的逆转。<br>曾经弱势的一方变得强势，强势的一方却变得小心翼翼。<br>这个家，以后是你的了。<br>子女们往往无意识地就变得强势，无意识地就会不耐烦。<br>但其实子女们能这么肆无忌惮，还不是仗着知道父母的爱永远不会过时。<br>从小时候“为你好”式的严厉，到老了之后小心翼翼地和你相处。<br>自始至终，他们都从没忘记过爱你。<br>他们只是老了，并没有什么错。<br>如果某一天，你的父母开始看你脸色了。<br>如果某一天，你的父母开始小心翼翼地跟你说话了。<br>如果某一天，面对着你的坏脾气，父母开始变得沉默了。<br>如果某一天，你的父母开始按照你的要求做了。<br>请你一定要对他们好一点。<br>因为这预示着他们变老了。<br>请你一定要对他们好一点。<br>就像他们爱你时那样。<br>对他们多一些耐心。<br>对他们多一些关心。<br>对他们多一些依赖。<br>对他们多一些帮助。<br>帮着他们融入这个新新世界。<br>让他们一辈子能做你的超人。<br>他们养我们长大，就让我们陪他们终老。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们心中，父母总是“强势”的一方，我们反抗、争论、摔门而走，却好像都无力抵抗。&lt;/p&gt;
    
    </summary>
    
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
      <category term="精彩生活" scheme="http://yoursite.com/tags/%E7%B2%BE%E5%BD%A9%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程系列之 (四)：Fork/Join框架的使用</title>
    <link href="http://yoursite.com/concurrent/concurrentprogram-forkjoin.html"/>
    <id>http://yoursite.com/concurrent/concurrentprogram-forkjoin.html</id>
    <published>2019-08-27T02:08:00.000Z</published>
    <updated>2020-03-14T16:49:56.222Z</updated>
    
    <content type="html"><![CDATA[<p>天下合久必分，分久必合，数据又何尝不是呢？</p><a id="more"></a><blockquote><p>在Java7中，引入了Fork/Join框架，这个框架有两个特点：</p></blockquote><ul><li><p>分而治之</p><ul><li>分而治之就是将大任务分割成一个个的小任务，再把小任务的结果合并作为大任务的结果，化繁为简的思想。</li></ul></li><li><p>工作秘取</p><ul><li>工作秘取(work stealing)，即空闲线程会主动取其它线程未完成的队列中拿去任务执行，这种算法大大的减少了工作执行的时间。<blockquote><p>主要有四个类：</p></blockquote></li></ul></li><li><p><code>ForkJoinPool</code>：相当于线程池。</p></li><li><p><code>ForkJoinTask</code>：小任务的抽象类</p></li><li><p><code>RecursiveTask</code>：扩展自<code>ForkJoinTask</code>的抽象类，有返回值。</p></li><li><p><code>RecursiveAction</code>：扩展自<code>ForkJoinTask</code>的抽象类，无返回值。</p><blockquote><p>向线程池中提交任务的方法：</p></blockquote></li><li><p><code>invoke、invokeAll</code>：同步提交，需要等待完成才会有返回结果。</p></li><li><p><code>submit、execute</code>：异步提交。</p><blockquote><p>简单使用示例：</p></blockquote></li><li><p>首先初始化一个数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ryan Zhang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> https://www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MakeArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ARRAY_LENGTH = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] makeArray() &#123;</span><br><span class="line">        <span class="comment">// 初始化一个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[ARRAY_LENGTH];</span><br><span class="line">        <span class="comment">// 填充数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ARRAY_LENGTH; i++) &#123;</span><br><span class="line">            array[i] = i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用循环累加的方法计算数组中元素的和：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ryan Zhang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 普通遍历求和</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> https://www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalSum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">int</span>[] array = MakeArray.makeArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 此处是模拟计算时长。</span></span><br><span class="line">            <span class="comment">// Thread.sleep(1);</span></span><br><span class="line">            sum += array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"耗时："</span> + (endTime - startTime) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从1加到1万，很快就累加出来了。</p></li><li><p>使用框架来计算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ryan Zhang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> https://www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinSum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化数组</span></span><br><span class="line">        <span class="keyword">int</span>[] array = MakeArray.makeArray();</span><br><span class="line">        <span class="comment">// 创建池子</span></span><br><span class="line">        ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">        SumTask sumTask = <span class="keyword">new</span> SumTask(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        Integer sum = forkJoinPool.invoke(sumTask);</span><br><span class="line">        System.out.println(<span class="string">"总和："</span> + sum);</span><br><span class="line">        System.out.println(<span class="string">"耗时："</span> + (System.currentTimeMillis() - startTime) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description: 扩展有返回值的RecursiveTask，用来交给池子执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SumTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 不可再拆分的阈值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THRESHOLD = MakeArray.ARRAY_LENGTH / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[] array;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fromIndex;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> toIndex;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SumTask</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.array = array;</span><br><span class="line">            <span class="keyword">this</span>.fromIndex = fromIndex;</span><br><span class="line">            <span class="keyword">this</span>.toIndex = toIndex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (toIndex - fromIndex &lt; THRESHOLD) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = fromIndex; i &lt;= toIndex; i++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 此处是模拟计算时长。</span></span><br><span class="line">                        <span class="comment">// Thread.sleep(1);</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    sum += array[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sum;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 计算中间下标</span></span><br><span class="line">                <span class="keyword">int</span> mid = (fromIndex + toIndex) / <span class="number">2</span>;</span><br><span class="line">                <span class="comment">// 左边任务</span></span><br><span class="line">                SumTask left = <span class="keyword">new</span> SumTask(array, fromIndex, mid);</span><br><span class="line">                <span class="comment">// 右边任务</span></span><br><span class="line">                SumTask right = <span class="keyword">new</span> SumTask(array, mid + <span class="number">1</span>, toIndex);</span><br><span class="line">                <span class="comment">// 提交到线程池进行处理</span></span><br><span class="line">                invokeAll(left, right);</span><br><span class="line">                <span class="comment">// 拿到结果返回</span></span><br><span class="line">                <span class="keyword">return</span> left.join() + right.join();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>分别运行上面两段代码，发现结果并没有很大差别，这是因为，我们设置的数组长度小、没有模拟计算时长，假如把计算时长打开，会发现用框架比不用，计算速度至少快了十倍。</code></p></li><li><p>ForkJoin的简单总结：</p><ul><li>分而治之的思想就是递归。</li><li>阈值不好确定，高了，不如单线程，低了，栈深度不容易控制，造成栈溢出。</li><li>任务拆解的太深，容易造成线程堆积，导致系统性能下降。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;天下合久必分，分久必合，数据又何尝不是呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="concurrent" scheme="http://yoursite.com/categories/concurrent/"/>
    
    
      <category term="并发编程" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程系列之 (三)：理解ThreadLocal</title>
    <link href="http://yoursite.com/concurrent/concurrentprogram-threadlocal.html"/>
    <id>http://yoursite.com/concurrent/concurrentprogram-threadlocal.html</id>
    <published>2019-08-26T15:09:00.000Z</published>
    <updated>2020-03-14T02:51:40.824Z</updated>
    
    <content type="html"><![CDATA[<p>每个线程独有的本地副本ThreadLocal</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每个线程独有的本地副本ThreadLocal&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="concurrent" scheme="http://yoursite.com/categories/concurrent/"/>
    
    
      <category term="并发编程" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程系列之 (二)：notify()和notifyAll()</title>
    <link href="http://yoursite.com/concurrent/concurrentprogram-notify.html"/>
    <id>http://yoursite.com/concurrent/concurrentprogram-notify.html</id>
    <published>2019-08-26T15:06:00.000Z</published>
    <updated>2020-03-14T13:00:06.201Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍notify()和notifyAll()的区别和用法。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将介绍notify()和notifyAll()的区别和用法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="concurrent" scheme="http://yoursite.com/categories/concurrent/"/>
    
    
      <category term="并发编程" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程系列之(一)：synchronized关键字</title>
    <link href="http://yoursite.com/concurrent/concurrentprogram-synchronized.html"/>
    <id>http://yoursite.com/concurrent/concurrentprogram-synchronized.html</id>
    <published>2019-08-26T15:05:00.000Z</published>
    <updated>2020-03-14T02:49:48.267Z</updated>
    
    <content type="html"><![CDATA[<p>synchronized关键字</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;synchronized关键字&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="concurrent" scheme="http://yoursite.com/categories/concurrent/"/>
    
    
      <category term="并发编程" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Apache ZooKeeper（八）：基于zookeeper的分布式锁</title>
    <link href="http://yoursite.com/zk/zookeeper-008.html"/>
    <id>http://yoursite.com/zk/zookeeper-008.html</id>
    <published>2019-08-05T14:29:00.000Z</published>
    <updated>2020-03-14T13:36:46.994Z</updated>
    
    <content type="html"><![CDATA[<p>zookeeper版本3.4.14，zkclient版本0.10。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>什么情况下需要用锁？</p></blockquote><ol><li>多任务环境下</li><li>每个任务对同一个资源进行写的操作</li><li>对资源的访问是互斥的<blockquote><p>任务通过竞争获取锁，才能够对资源进行写的操作，当有一个任务对资源进行更新的时候，其它的任务都不能对这个资源进行操作，直到该任务更新完成。</p></blockquote><h1 id="基于同名节点的分布式锁"><a href="#基于同名节点的分布式锁" class="headerlink" title="基于同名节点的分布式锁"></a>基于同名节点的分布式锁</h1><blockquote><p>同名节点的分布式锁，缺点很多，最大的是会引起“羊群(惊群)效应”，下面只画流程图，就不写代码了。</p></blockquote></li></ol><p><img src="https://image.zhangjianbing.com/article/picture/distribute_lock01.png#shadow=true&mirages-width=1312&mirages-height=1032&mirages-cdn-type=1" alt="请输入图片描述"></p><h1 id="基于临时顺序节点的分布式锁"><a href="#基于临时顺序节点的分布式锁" class="headerlink" title="基于临时顺序节点的分布式锁"></a>基于临时顺序节点的分布式锁</h1><blockquote><p>性能较好，不会出现锁释放不了的情况，实现稍复杂，流程图如下：</p></blockquote><p><img src="https://image.zhangjianbing.com/article/picture/distribute_lock02.png#shadow=true&mirages-width=1778&mirages-height=1274&mirages-cdn-type=1" alt="请输入图片描述"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote><p>配置文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 需要将这几个jar包排除掉，会跟lombok的log4j冲突 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>锁实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/8/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建zk客户端，这里用了自定义序列化器，也可以去掉即可。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ZkClient zkClient = <span class="keyword">new</span> ZkClient(<span class="string">"47.104.129.162:2181"</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="keyword">new</span> MySerializer());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 称之为锁的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_PATH = <span class="string">"/lock"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前请求的节点前一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String beforePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前请求的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String currentPath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch cdl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DistributedLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 不存在，则创建永久节点</span></span><br><span class="line">        <span class="keyword">if</span> (!zkClient.exists(LOCK_PATH)) &#123;</span><br><span class="line">            zkClient.createPersistent(LOCK_PATH);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 尝试获取锁</span></span><br><span class="line">        <span class="keyword">if</span> (tryLock()) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" 获得分布式锁！"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 对临时子节点进行监听</span></span><br><span class="line">            waitForLock();</span><br><span class="line">            lock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试去加锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果currentPath为空则第一次尝试加锁，第一次加锁赋值currentPath</span></span><br><span class="line">        <span class="keyword">if</span> (currentPath == <span class="keyword">null</span> || currentPath.length() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建一个临时顺序节点</span></span><br><span class="line">            currentPath = <span class="keyword">this</span>.zkClient.createEphemeralSequential(LOCK_PATH + <span class="string">"/"</span>, <span class="string">"lock"</span>);</span><br><span class="line">            System.out.println(<span class="string">"----------------------------&gt;"</span> + currentPath);</span><br><span class="line">            <span class="comment">// 获取锁的根节点所有的临时节点并排序</span></span><br><span class="line">            List&lt;String&gt; childrens = <span class="keyword">this</span>.zkClient.getChildren(LOCK_PATH);</span><br><span class="line">            <span class="comment">// 由小到大排序所有的临时子节点</span></span><br><span class="line">            Collections.sort(childrens);</span><br><span class="line">            <span class="comment">// 判断刚刚创建的临时子节点是否最小，如果当前节点等于childrens中的最小的一个就占用锁</span></span><br><span class="line">            <span class="keyword">if</span> (currentPath.equals(LOCK_PATH + <span class="string">'/'</span> + childrens.get(<span class="number">0</span>))) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 找出刚创建的currentPath前面的一个的节点,并赋值给beforePath</span></span><br><span class="line">                <span class="keyword">int</span> wz = Collections.binarySearch(childrens, currentPath.substring(<span class="number">6</span>));</span><br><span class="line">                beforePath = LOCK_PATH + <span class="string">'/'</span> + childrens.get(wz - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待锁,并对临时子节点进行监听</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">waitForLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IZkDataListener listener = <span class="keyword">new</span> IZkDataListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataDeleted</span><span class="params">(String dataPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":监听到节点删除事件！---------------------------"</span>);</span><br><span class="line">                <span class="keyword">if</span> (cdl != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 解除等待</span></span><br><span class="line">                    cdl.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataChange</span><span class="params">(String dataPath, Object data)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对beforePath进行监听</span></span><br><span class="line">        <span class="keyword">this</span>.zkClient.subscribeDataChanges(beforePath, listener);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.zkClient.exists(beforePath)) &#123;</span><br><span class="line">            cdl = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 利用countdownLatch让客户端线程进行等待</span></span><br><span class="line">                cdl.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                log.error(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解除监听</span></span><br><span class="line">        <span class="keyword">this</span>.zkClient.unsubscribeDataChanges(beforePath, listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 删除当前临时节点</span></span><br><span class="line">        zkClient.delete(currentPath);</span><br><span class="line">        zkClient.close();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"释放了锁。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>线程类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/8/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OrderCodeGenerator ong = <span class="keyword">new</span> OrderCodeGenerator();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发的线程数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 按照线程数初始化倒计数器,倒计数器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch cdl = <span class="keyword">new</span> CountDownLatch(NUM);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DistributedLock lock = <span class="keyword">new</span> DistributedLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建订单接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String orderCode = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备获取锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取订单编号</span></span><br><span class="line">            orderCode = ong.getOrderCode();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//完成业务逻辑以后释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ……业务代码</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"insert into DB使用id：=======================&gt;"</span> + orderCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 等待其他线程初始化</span></span><br><span class="line">            cdl.countDown();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建订单</span></span><br><span class="line">        createOrder();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= NUM; i++) &#123;</span><br><span class="line">            <span class="comment">// 按照线程数迭代实例化线程</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> OrderServiceImpl()).start();</span><br><span class="line">            <span class="comment">// 创建一个线程，倒计数器减1</span></span><br><span class="line">        &#125;</span><br><span class="line">        cdl.await();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不安全的增长类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/8/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderCodeGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自增长序列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照“年-月-日-小时-分钟-秒-自增长序列”的规则生成订单编号</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Date now = <span class="keyword">new</span> Date();</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>);</span><br><span class="line">        <span class="keyword">return</span> sdf.format(now) + ++i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>至此，基于zookeeper的分布式锁完。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;zookeeper版本3.4.14，zkclient版本0.10。&lt;/p&gt;
    
    </summary>
    
    
      <category term="zk" scheme="http://yoursite.com/categories/zk/"/>
    
    
      <category term="zk" scheme="http://yoursite.com/tags/zk/"/>
    
  </entry>
  
  <entry>
    <title>Apache ZooKeeper（七）：ZkClient的基本使用以及服务注册与发现</title>
    <link href="http://yoursite.com/zk/zookeeper-007.html"/>
    <id>http://yoursite.com/zk/zookeeper-007.html</id>
    <published>2019-07-31T03:23:00.000Z</published>
    <updated>2020-03-14T13:16:14.948Z</updated>
    
    <content type="html"><![CDATA[<p>ZkClient是对zk原生API的再次封装，它有如下许多优点：</p><a id="more"></a><ol><li>屏蔽了zk原生api诸多操作细节，更加简洁。</li><li>最重要的是实现了超时重连的机制。</li><li>优化watcher机制。</li><li>方便的事件监听机制等等。</li></ol><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><blockquote><p>这里只介绍最常用的方法，具体请google，参考：<br><a href="https://blog.csdn.net/T1DMzks/article/details/78440717" target="_blank" rel="noopener">https://blog.csdn.net/T1DMzks/article/details/78440717</a></p></blockquote><h2 id="创建连接"><a href="#创建连接" class="headerlink" title="创建连接"></a>创建连接</h2><p><code>ZkClient zkClient = new ZkClient(&quot;47.104.129.162:2181&quot;, 5000, 5000, new MySerializer());</code>，简单的一句话此框架为我们建立好了一个连接。</p><h2 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h2><ul><li>临时节点：<code>zkClient.create(path, &quot;&quot;, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</code></li><li>永久节点：<code>zkClient.create(path, &quot;&quot;, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</code><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2></li><li>普通删除：<code>zkClient.delete(&quot;/temp&quot;);</code></li><li>递归删除：<code>zkClient.deleteRecursive(&quot;/super&quot;);</code><h2 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h2></li><li>获取子节点：<code>List&lt;String&gt; list = zkClient.getChildren(&quot;/super&quot;);</code></li><li>读取节点内容：<code>String data = zkClient.readData(&quot;/temp&quot;);</code><h2 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a>更新节点</h2><code>zkClient.writeData(&quot;/super/c1&quot;, &quot;新内容&quot;);</code><h2 id="判断节点是否存在"><a href="#判断节点是否存在" class="headerlink" title="判断节点是否存在"></a>判断节点是否存在</h2><code>boolean exists = zkClient.exists(&quot;/temp&quot;);</code><h2 id="监听机制"><a href="#监听机制" class="headerlink" title="监听机制"></a>监听机制</h2></li><li>监听子节点状态：<code>zkClient.subscribeChildChanges(path, new IZkChildListener() {...}</code>，这个方法只会监听子节点的新增和删除状态，并不会监听内容的变更。</li><li>监听节点变化：<code>zkClient.subscribeDataChanges(path, new IZkDataListener() {...}</code>，这个方法用来监听节点内容的变更。<h1 id="服务的注册与发现"><a href="#服务的注册与发现" class="headerlink" title="服务的注册与发现"></a>服务的注册与发现</h1></li></ul><blockquote><p>ZkClient是有两个jar包，我们一般使用<code>101tec</code>而不使用<code>Sgroschupf</code>，后者在2011年就不再维护了，首先导入jar包，如下：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 需要将这几个jar包排除掉，会跟lombok的log4j冲突 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里使用了lombok的log4j，它们会跟zkclient自带的冲突，所以这里需要将与log4j的包全部排除。</p></blockquote><h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><blockquote><p>首先在服务启动的时候注册监听器，将我们自定义的监听器注入进去</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerBootStrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(ProducerBootStrap<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">servletListenerRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletListenerRegistrationBean servletListenerRegistrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean();</span><br><span class="line">        servletListenerRegistrationBean.setListener(<span class="keyword">new</span> ProducerListener());</span><br><span class="line">        <span class="keyword">return</span> servletListenerRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"ProducerListener"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(ProducerListener.class.getClassLoader().getResourceAsStream("application.properties"));</span><br><span class="line">            <span class="comment">// 获取服务的ip和端口号，并将它们拼接后写到zookeeper的临时顺序节点中</span></span><br><span class="line">            String hostAddress = InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">            String port = properties.getProperty(<span class="string">"server.port"</span>);</span><br><span class="line">            ProducerRegisterService.register(hostAddress, port);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者注册服务到zookeeper中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"ProducerRegisterService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerRegisterService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_SERVICE = <span class="string">"/service"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_NAME = <span class="string">"/producer"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String ipAddr, String port)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 服务节点的根路径</span></span><br><span class="line">            String path = BASE_SERVICE + SERVICE_NAME;</span><br><span class="line">            ZkClient zkClient = <span class="keyword">new</span> ZkClient(<span class="string">"47.104.129.162:2181"</span>, <span class="number">5000</span>, <span class="number">5000</span>, <span class="keyword">new</span> MySerializer());</span><br><span class="line">            <span class="keyword">boolean</span> exists = zkClient.exists(path);</span><br><span class="line">            <span class="comment">// 根路径不存在，则创建为永久节点</span></span><br><span class="line">            <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">                <span class="comment">// 创建父节点</span></span><br><span class="line">                zkClient.create(BASE_SERVICE, <span class="string">""</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">                <span class="comment">// 创建服务节点</span></span><br><span class="line">                zkClient.create(path, <span class="string">""</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 拼接ip和端口</span></span><br><span class="line">            String serverPath = ipAddr + <span class="string">":"</span> + port;</span><br><span class="line">            <span class="comment">// 创建临时顺序节点</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 临时：为了生产者挂掉，可以通过watch机制通知客户端</span></span><br><span class="line"><span class="comment">             * 顺序：可以有很多个生产者组成集群对外提供服务</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            zkClient.create(path + <span class="string">"/child"</span>, serverPath, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">            log.info(<span class="string">"生产者注册到zookeeper成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"生产者注册到zookeeper失败"</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>自定义序列化方式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义序列化方式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySerializer</span> <span class="keyword">implements</span> <span class="title">ZkSerializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(Object bytes) <span class="keyword">throws</span> ZkMarshallingError &#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(bytes).getBytes(Charsets.UTF_8);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> ZkMarshallingError </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(bytes, Charsets.UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置文件和controller</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8080</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/producer"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/sendMsg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello-world~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h2><blockquote><p>在服务启动的时候从zk拉取数据并监听节点的变化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerBootStrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(ConsumerBootStrap<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">servletListenerRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletListenerRegistrationBean servletListenerRegistrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean();</span><br><span class="line">        servletListenerRegistrationBean.setListener(<span class="keyword">new</span> ConsumerListener());</span><br><span class="line">        <span class="keyword">return</span> servletListenerRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"ConsumerListener"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_SERVICE = <span class="string">"/service"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_NAME = <span class="string">"/producer"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZkClient zkClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String path = BASE_SERVICE + SERVICE_NAME;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从zookeeper上拉取节点信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initServiceList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zkClient = <span class="keyword">new</span> ZkClient(<span class="string">"47.104.129.162:2181"</span>, <span class="number">5000</span>, <span class="number">5000</span>, <span class="keyword">new</span> MySerializer());</span><br><span class="line">            zkClient.subscribeDataChanges(path, <span class="keyword">new</span> IZkDataListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataChange</span><span class="params">(String s, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="comment">// 当节点变化时，更新服务节点信息</span></span><br><span class="line">                    updateServiceList();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataDeleted</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="comment">// 当节点删除时，更新服务节点信息</span></span><br><span class="line">                    updateServiceList();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 初次更新服务节点信息</span></span><br><span class="line">            updateServiceList();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新serviceList节点信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateServiceList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;String&gt; serviceList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="comment">// 获取所有子节点</span></span><br><span class="line">            List&lt;String&gt; children = zkClient.getChildren(path);</span><br><span class="line">            <span class="keyword">for</span> (String subNode : children) &#123;</span><br><span class="line">                <span class="comment">// 读取节点内容</span></span><br><span class="line">                <span class="keyword">byte</span>[] data = zkClient.readData(path + <span class="string">"/"</span> + subNode);</span><br><span class="line">                String ipPort = <span class="keyword">new</span> String(data, <span class="string">"utf-8"</span>);</span><br><span class="line">                serviceList.add(ipPort);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 选用负载均衡算法</span></span><br><span class="line">            LoadBalance.serviceHosts = serviceList;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        initServiceList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>序列化方式和负载算法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadBalance</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; serviceHosts;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">randomPickServiceHost</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomLoadBalance</span> <span class="keyword">extends</span> <span class="title">LoadBalance</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">randomPickServiceHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String host = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(serviceHosts))&#123;</span><br><span class="line">            <span class="keyword">int</span> nextInt = <span class="keyword">new</span> Random().nextInt(serviceHosts.size());</span><br><span class="line">            host = serviceHosts.get(nextInt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义序列化方式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySerializer</span> <span class="keyword">implements</span> <span class="title">ZkSerializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(Object bytes) <span class="keyword">throws</span> ZkMarshallingError &#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(bytes).getBytes(Charsets.UTF_8);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> ZkMarshallingError </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(bytes, Charsets.UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置文件和controller</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8090</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/consumer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RandomLoadBalance randomLoadBalance = <span class="keyword">new</span> RandomLoadBalance();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/fetchMsg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String host = randomLoadBalance.randomPickServiceHost();</span><br><span class="line">        String str = restTemplate.getForObject(<span class="string">"http://"</span> + host + <span class="string">"/producer/sendMsg"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"---------------------------"</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ol><li>启动zk</li><li>启动两个producer</li><li>启动一个consumer</li><li>访问localhost:8090/consumer/fetchMsg即可。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ZkClient是对zk原生API的再次封装，它有如下许多优点：&lt;/p&gt;
    
    </summary>
    
    
      <category term="zk" scheme="http://yoursite.com/categories/zk/"/>
    
    
      <category term="zk" scheme="http://yoursite.com/tags/zk/"/>
    
  </entry>
  
  <entry>
    <title>Apache ZooKeeper（六）：基于ZooKeeper的服务注册与发现</title>
    <link href="http://yoursite.com/zk/zookeeper-006.html"/>
    <id>http://yoursite.com/zk/zookeeper-006.html</id>
    <published>2019-07-25T08:39:00.000Z</published>
    <updated>2020-03-14T13:16:10.563Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot2.0基于Zookeeper实现服务的注册与发现。zk版本是<code>3.4.14</code>。</p><a id="more"></a><h1 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h1><ol><li><p>在producer启动的时候，将ip和端口放到指定的临时顺序节点下</p></li><li><p>在consumer启动的时候，从指定的节点下拉取并监听这个节点的动态</p></li><li><p>当producer因为某种因素宕掉后，consumer会再次更新本地节点的状态信息，从而实现动态感知功能</p></li><li><p>consumer使用restTemplate通过某种负载机制实现远程调用</p><h1 id="pom配置"><a href="#pom配置" class="headerlink" title="pom配置"></a>pom配置</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web project --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- zookeeper original jar --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意这里的版本，最好跟远程服务的版本一致，否则可能出现莫名其妙的错误。</p></blockquote><h1 id="producer配置"><a href="#producer配置" class="headerlink" title="producer配置"></a>producer配置</h1><blockquote><p>有几个注意的地方</p></blockquote></li><li><p>zk不允许级联创建节点</p></li><li><p>必须创建临时顺序节点</p></li><li><p>节点权限放开</p><h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer01BootStrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(Producer01BootStrap<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">servletListenerRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletListenerRegistrationBean servletListenerRegistrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean();</span><br><span class="line">        servletListenerRegistrationBean.setListener(<span class="keyword">new</span> Producer01Listener());</span><br><span class="line">        <span class="keyword">return</span> servletListenerRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动监听器"><a href="#启动监听器" class="headerlink" title="启动监听器"></a>启动监听器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"Producer01Listener"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer01Listener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(Producer01Listener.class.getClassLoader().getResourceAsStream("application.properties"));</span><br><span class="line">            <span class="comment">// 获取服务的ip和端口号，并将它们拼接后写到zookeeper的临时顺序节点中</span></span><br><span class="line">            String hostAddress = InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">            String port = properties.getProperty(<span class="string">"server.port"</span>);</span><br><span class="line">            Producer01RegisterService.register(hostAddress, port);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者注册服务到zookeeper中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"Producer01RegisterService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer01RegisterService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_SERVICE = <span class="string">"/service"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_NAME = <span class="string">"/producer"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String ipAddr, String port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 服务节点的根路径</span></span><br><span class="line">            String path = BASE_SERVICE + SERVICE_NAME;</span><br><span class="line">            ZooKeeper zooKeeper = <span class="keyword">new</span> ZooKeeper(<span class="string">"10.231.128.34:2181"</span>, <span class="number">5000</span>, (watchedEvent -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            &#125;));</span><br><span class="line">            Stat exists = zooKeeper.exists(path, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 根路径不存在，则创建为永久节点</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == exists) &#123;</span><br><span class="line">                <span class="comment">// 创建父节点</span></span><br><span class="line">                zooKeeper.create(BASE_SERVICE, <span class="string">""</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">                <span class="comment">// 创建服务节点</span></span><br><span class="line">                zooKeeper.create(path, <span class="string">""</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 拼接ip和端口</span></span><br><span class="line">            String serverPath = ipAddr + <span class="string">":"</span> + port;</span><br><span class="line">            <span class="comment">// 创建临时顺序节点</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 临时：为了生产者挂掉，可以通过watch机制通知客户端</span></span><br><span class="line"><span class="comment">             * 顺序：可以有很多个生产者组成集群对外提供服务</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            zooKeeper.create(path + <span class="string">"/child"</span>, serverPath.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">            log.info(<span class="string">"生产者注册到zookeeper成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"生产者注册到zookeeper失败"</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="consumer"><a href="#consumer" class="headerlink" title="consumer"></a>consumer</h1><h2 id="启动类-1"><a href="#启动类-1" class="headerlink" title="启动类"></a>启动类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer01BootStrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(Consumer01BootStrap<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">servletListenerRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletListenerRegistrationBean servletListenerRegistrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean();</span><br><span class="line">        servletListenerRegistrationBean.setListener(<span class="keyword">new</span> Consumer01Listener());</span><br><span class="line">        <span class="keyword">return</span> servletListenerRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"Consumer01Listener"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer01Listener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_SERVICE = <span class="string">"/service"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_NAME = <span class="string">"/producer"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zooKeeper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String path = BASE_SERVICE + SERVICE_NAME;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从zookeeper上拉取节点信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initServiceList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zooKeeper = <span class="keyword">new</span> ZooKeeper(<span class="string">"10.231.128.34:2181"</span>, <span class="number">5000</span>, (watchedEvent -&gt; &#123;</span><br><span class="line">                <span class="comment">// 当节点变化时，更新服务节点信息</span></span><br><span class="line">                <span class="keyword">if</span> (watchedEvent.getType() == Watcher.Event.EventType.NodeChildrenChanged &amp;&amp; path.equals(watchedEvent.getPath())) &#123;</span><br><span class="line">                    updateServiceList();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">            <span class="comment">// 初次更新服务节点信息</span></span><br><span class="line">            updateServiceList();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新serviceList节点信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateServiceList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;String&gt; serviceList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            List&lt;String&gt; children = zooKeeper.getChildren(path, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">for</span> (String subNode : children) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] data = zooKeeper.getData(path + <span class="string">"/"</span> + subNode, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">                String ipPort = <span class="keyword">new</span> String(data, <span class="string">"utf-8"</span>);</span><br><span class="line">                serviceList.add(ipPort);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 选用负载均衡算法</span></span><br><span class="line">            LoadBalance.serviceHosts = serviceList;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        initServiceList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="负载类"><a href="#负载类" class="headerlink" title="负载类"></a>负载类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadBalance</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; serviceHosts;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">randomPickServiceHost</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomLoadBalance</span> <span class="keyword">extends</span> <span class="title">LoadBalance</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">randomPickServiceHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String host = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(serviceHosts))&#123;</span><br><span class="line">            <span class="keyword">int</span> nextInt = <span class="keyword">new</span> Random().nextInt(serviceHosts.size());</span><br><span class="line">            host = serviceHosts.get(nextInt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><blockquote><p>producer的controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/producer"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/sendMsg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello-world~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>consumer的controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/consumer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RandomLoadBalance randomLoadBalance = <span class="keyword">new</span> RandomLoadBalance();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/fetchMsg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String host = randomLoadBalance.randomPickServiceHost();</span><br><span class="line">        String str = restTemplate.getForObject(<span class="string">"http://"</span> + host + <span class="string">"/producer/sendMsg"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"---------------------------"</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动zookeeper</p></li><li><p>启动producer</p></li><li><p>启动consumer</p></li><li><p>在浏览器中访问：<code>localhost:8090/consumer/fetchMsg</code></p></li></ol><blockquote><p>全文（完）</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SpringBoot2.0基于Zookeeper实现服务的注册与发现。zk版本是&lt;code&gt;3.4.14&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="zk" scheme="http://yoursite.com/categories/zk/"/>
    
    
      <category term="zk" scheme="http://yoursite.com/tags/zk/"/>
    
  </entry>
  
</feed>
