<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>在谷歌上百度</title>
  
  <subtitle>但行好事，莫问前程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-13T15:12:31.855Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>BigBing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>还在使用BeanUtils吗？</title>
    <link href="http://yoursite.com/interview/beanutils.html"/>
    <id>http://yoursite.com/interview/beanutils.html</id>
    <published>2020-03-11T00:14:42.000Z</published>
    <updated>2020-03-13T15:12:31.855Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从名字上来看，BeanUtils是一个很好用的工具类。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;从名字上来看，BeanUtils是一个很好用的工具类。&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="interview" scheme="http://yoursite.com/categories/interview/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2020特殊的一年</title>
    <link href="http://yoursite.com/life/my2020.html"/>
    <id>http://yoursite.com/life/my2020.html</id>
    <published>2020-03-09T15:04:42.000Z</published>
    <updated>2020-03-13T15:27:34.847Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2020年真是特殊的一年，它是一个闰年</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;2020年真是特殊的一年，它是一个闰年&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
      <category term="精彩生活" scheme="http://yoursite.com/tags/%E7%B2%BE%E5%BD%A9%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>我的离职感悟</title>
    <link href="http://yoursite.com/life/life-leave-job-feeling.html"/>
    <id>http://yoursite.com/life/life-leave-job-feeling.html</id>
    <published>2019-03-27T07:28:00.000Z</published>
    <updated>2020-03-13T15:28:04.381Z</updated>
    
    <content type="html"><![CDATA[<p>　　Emmmmm，就在今天，我从公司被动离职了，前前后后墨迹了两个月吧。在去年十月的时候，由于公司合规问题，导致资金链断裂，工资仅发放百分之八十，公司说什么时候效益好了，再补回来，这简直是天方夜谭，鬼都不信，明摆着降薪，然后公司几个有眼光又有实力的人，立马投简历，面试成功走了，临走给我们悄悄的说，感觉公司不行了，能走尽快走吧，然而许多人都选择了相信公司，相信公司有朝一日定能东山再起，我虽然不相信，但以我现在的实力，真的没把握找个更好的，于是一边学习，一边上班，终于拖到了过年回来，眼看1月14号了，要发12月份的工资了，却迟迟不到账，但公司也没给出具体原因，只是说会晚发，没有说明什么时候发，一月份这个时候我就已经在面试了，本打算去杭州，恰好杭州阿里村淘在招人，我就参加了电话面试，无奈，前两轮电话面试都过了，倒在了第三轮现场面试上，实力不济，算法基础太差，发散性思维不佳，还有很多不足的地方，于是阿里就暂告一段落了。</p><p>　　紧接着来到了二月份，不得不说北京的天气变得真快，我一月份还在穿羽绒服呢，二月份，早就脱下了羽绒服，换上了薄夹克，顿时感觉轻了不少，心里也感觉痛快，二月份还是接着骑驴找马，有时间就去面试，用面试来补充自己的知识盲点，然而不是公司太远，就是薪水不符(感觉其实还是自己菜，实话)。二月份该发一月份的工资，依旧没有发，这个时候，有些人憋不住了，就要去仲裁公司，我其实心里更着急，马上要到交房租的时候了，却不发工资，跟同事一说，他们说你不就交个房租么，我们还要还房贷，还要养孩子，同样还要交房租，哈哈，一听，心里不着急了，反正我还有点老本，就再学习半个月吧，感觉也差不多了，准能找一个好工作。</p><p>　　就这么待着，还是骑驴找马，马上就来到了三月份，年后回来我也很奇怪，毕竟我是没结婚，没孩子，没房贷压力的人，不发工资影响倒不是很大，然而很多有贷款的同事，竟然没有一个跳槽走的，还是在那儿干活，但干活的态度很差，估计是因为没有发工资的原因吧，也或许有自己为难的地方吧。都说金三银四是北京这边跳槽的好季节，但都知道，今年，2019年互联网公司的行情都很差，很多岗位要求高，但给的少，我依然时不时的去面试，回来总结，其实发现面试也就那么回事，千篇一律，问不出什么花样来，有的时候就想，你能问一个谷歌上面没有的面试题，也算你牛叉。到了三月中旬，公司依旧没有发2月的工资，我心里也开始烦躁了，不发工资，也没有发工资的消息，我很差钱，绝不能再待了，恰好同学介绍我去他们公司，就去面了，顺利的面上了，待遇真的还不错，交接了几天，于三月26号正式离职，28号入职新公司。</p><blockquote><p>以下是我离职的感悟，也可以说是惨痛的教训吧。</p></blockquote><ol><li>在与公司签合同的时候，必须一式三份，自己手里必须有一份合同，不要给我说离职的时候申请，如果说以后仲裁，没合同是不行的。</li><li>离职证明必须要手写签名的，必须要实际红墨印章的，不能是电子版的。</li><li>只要公司一个月未发工资，请立马投简历跳槽。</li><li>仲裁的话，最好是集体仲裁，并且有能力的话找个律师，当然找了律师钱也不一定要得回来，还有就是开了离职证明再去仲裁，成功几率会小很多。但如果先仲裁，再去开离职证明，离职证明上可能会写与公司有劳动纠纷之类的话语，很有可能会影响你下家公司。</li><li>什么是资本？资本就是随时具备跳槽的能力，所以应该时刻学习，完美充电，整装待发。</li><li>俗话说，当一天和尚撞一天钟，做好自己份内的工作，对自己负责，对同事负责。</li><li>其实我们每个人都是一个线程，都运行在一个叫做地球的虚拟机当中，我们有始有终，生老病死，对应，创建运行异常消亡，真的很像，等我们这个线程结束了，将会把该线程中称为生活的变量清空，只不过这个线程划过的痕迹还在，但它会随着时间慢慢变淡，有的线程生命周期很长，有的却很短，但它们生命的意义却截然不同。。。。。。活出自己的精彩，我们生命中不仅有代码，还有丰富多彩的人生，加油。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　Emmmmm，就在今天，我从公司被动离职了，前前后后墨迹了两个月吧。在去年十月的时候，由于公司合规问题，导致资金链断裂，工资仅发放百分之八十，公司说什么时候效益好了，再补回来，这简直是天方夜谭，鬼都不信，明摆着降薪，然后公司几个有眼光又有实力的人，立马投简历，面试成功走
      
    
    </summary>
    
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
      <category term="精彩生活" scheme="http://yoursite.com/tags/%E7%B2%BE%E5%BD%A9%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Stop Learning Frameworks</title>
    <link href="http://yoursite.com/life/life-please-stop-lean-framework.html"/>
    <id>http://yoursite.com/life/life-please-stop-lean-framework.html</id>
    <published>2019-03-26T03:09:00.000Z</published>
    <updated>2020-03-13T15:27:31.966Z</updated>
    
    <content type="html"><![CDATA[<p>We are developers. We need to stay up to date with technology. Every day, we learn programming languages, frameworks, and libraries. The more modern tools we know — the better.<br>我们是程序员，每天都在了解最新的技术，每天都在学习编程语言、框架和库。因为我们知道的现代编程工具越多越好，对吧？</p><p>Keeping up to date with Angular, React, Vue, Riot, Ember, Knockout is fun.<br>不停地追随 Angular、React、Vue、Riot、Ember、Knockout 的脚步还真是一件有意思的事情呢。（译注：反话）</p><h1 id="But-we-are-wasting-our-time"><a href="#But-we-are-wasting-our-time" class="headerlink" title="But we are wasting our time."></a>But we are wasting our time.</h1><p>但这其实是在浪费时间！</p><p>Time is the most precious resource we have. Time is limited, nonrenewable and you cannot buy more of it.<br>时间是人类最宝贵的资源。时间是有限的、不可再生的，你可以用钱买任何东西，却买不了时间。</p><p>Technology, like fashion, is changing at the speed of light. To catch up, we need to run very fast. This race has no winners because it has no end.<br>技术，就像时尚，在以光速在变化着。为了赶上它，我们需要跑的非常快。但是这个跑道上没有终点，所以没有赢家。</p><h1 id="My-mentor-once-taught-me-a-lesson"><a href="#My-mentor-once-taught-me-a-lesson" class="headerlink" title="My mentor once taught me a lesson:"></a>My mentor once taught me a lesson:</h1><p>我的导师曾经这样教我：</p><blockquote><p>Mentor: “Ed, what are you doing?”<br>艾德，你在做什么？</p></blockquote><blockquote><p>Me (proud): “I am reading a book about building modern Java apps with GWT.”<br>我（自豪地说）：我在读一本关于如何使用 GWT 构建现代 Java 应用的书呢。</p></blockquote><blockquote><p>Mentor: “What for?”<br>你读它做什么？</p></blockquote><blockquote><p>Me: “As a Java developer, I need to keep up with trends. GWT is a thing.”<br>作为一名 Java 开发者，我需要跟上潮流。GWT 就是现在的潮流。</p></blockquote><blockquote><p>Mentor: “What technology book did you read before GWT?”<br>你在读这本书之前还读过什么书？</p></blockquote><blockquote><p>Me: “It’s a 500-page-long Apache Tapestry book. Tapestry was a thing.”<br>我读了一本关于 Apache Tapestry 的书，那本书有 500 页。Apache Tapestry 是之前的潮流。</p></blockquote><blockquote><p>Mentor: “Is Tapestry still a thing?”<br>Apache Tapestry 现在还是潮流吗？</p></blockquote><blockquote><p>Me: “Not anymore. GWT is a thing.”<br>不是了，GWT 才是。</p></blockquote><blockquote><p>Mentor: “Can you re-use Tapestry skills to solve current problems?”<br>你之前从 Tapestry 学到的技能现在还能用吗？</p></blockquote><blockquote><p>Me: “No, no one is using it today.”<br>不能用了。</p></blockquote><blockquote><p>Mentor: “Does Tapestry knowledge help you understand GWT better?”<br>Tapestry 能帮助你更好地理解 GWT 吗？</p></blockquote><blockquote><p>Me: “No, it doesn’t. But I see some overlapping patterns.”<br>不能。不过两者都用到了一些设计模式。</p></blockquote><blockquote><p>Mentor: “It’s Design Patterns. Do they help you solve current problems?”<br>那就是设计模式了，设计模式能帮你解决你遇到的问题吗？</p></blockquote><blockquote><p>Me: “Yes. Many of them.”<br>可以，而且帮助很大。</p></blockquote><blockquote><p>Mentor: “Technology come and go, but it has a lot in common. Set priorities right. Invest 80% of your learning time in fundamentals. Leave 20% for frameworks, libraries and tools.”<br>新事物来了又走，其实有很多共同点。你应该学你该学的。你应该把你 80% 的学习时间用在学习基础上，剩下 20% 的时间才是用来学习框架、库和工具的。</p></blockquote><blockquote><p>Me: “Hmm… Only 20% for frameworks, libraries, and tools?”<br>哦……只留 20% 的时间学习框架、库和工具？</p></blockquote><blockquote><p>Mentor: “Yes. You’ll learn them at work anyway while solving problems.”<br>是的。你在工作中解决问题时自然就会学会框架、库和工具。</p></blockquote><blockquote><p>Me: “Thanks.”<br>谢谢老师。</p></blockquote><blockquote><p>Mentor: “You’ll thank me later.”<br>你之后还会谢我的。</p></blockquote><p>This advice has changed my life. I removed all framework books from my bookshelf. The guilt pile shrank from 50 to 0 books. What a relief!<br>导师的建议改变了我的生活。我把书架上关于框架的书全部都扔了，五十本书一本不剩，扔得我很开心。</p><p>I bought a set of evergreen books. These books took 80% of my learning time:<br>我买了一些不会过时的书，并用 80% 的学习时间来读这些书：</p><ul><li>The Pragmatic Programmer<br>程序员修炼之道</li><li>Clean Code<br>代码整洁之道</li><li>The Clean Coder<br>程序员的职业素养</li><li>Domain-Driven Design<br>领域驱动设计和实践</li><li>Growing Object-Oriented Software, Guided by Tests<br>测试驱动的面向对象软件开发</li><li>Continuous Delivery<br>持续交付</li></ul><p>I also bought a single book on the current technology. The Lindy effect suggested that Spring Framework must be a good investment:<br>我只买了一本关于最新技术的书，是关于 Spring 的。因为根据林迪效应，学习 Spring 是一项不错的投资。</p><blockquote><p>The future life expectancy of technology is proportional to its current age. Every extra period of survival implies a longer remaining life expectancy.<br>林迪效应认为，对于不会自然消亡的事物，如一项技术或一个想法，其预期寿命与其当前的生命成正比；即，只要这一事物多存活一天，就意味着其预期生寿命会更长一些。</p></blockquote><p>The longer a technology is on the market, the safer investment it is.<br>一项技术在市场上存活得越久，就越值得我们投资（学习）它。</p><p>Don’t rush to learn new technology – it has a high probability of dying.<br>不要急着学习新技术，因为这些技术很可能会死。</p><p>Time will show which technology is worth investing in. Time is your best advisor. Learn to wait.<br>时间会告诉你答案，你要学会等待。</p><p>Ten years have passed since then. I helped 50 different software projects. Thanks to the advice, everything I learn is portable across companies, teams, domains. My knowledge is still relevant today. I did not waste my time.<br>十年来，我参与开发过 50 个不同的软件项目。得益于我导师的建议，我学的所有东西都适用于不同的公司、团队和领域。我的知识今天仍然有用。我没有浪费我的时间。</p><p>All projects seem different unless you look under the surface:<br>如果你看得更深入些，你会发现所有的软件项目都是类似的：</p><ul><li>Programming languages are different, but design smells are alike.<br>用的编程语言虽然不一样，但是设计方法是类似的。</li><li>Frameworks are different, but the same design patterns shine through.<br>用的框架虽然是不一样的，但是设计模式是类似的。</li><li>Developers are different, but rules of dealing with people are uniform.<br>参与的开发者是不一样的，但是如何和这些人打交道是不变的。</li></ul><p>Remember – frameworks, libraries and tools come and go. Time is precious.<br>记住，框架、库和工具来了又走。时间才是珍贵的。</p><h1 id="Invest-your-golden-time-in-transferable-skills-Skills-that-will-always-be-relevant"><a href="#Invest-your-golden-time-in-transferable-skills-Skills-that-will-always-be-relevant" class="headerlink" title="Invest your golden time in transferable skills. Skills that will always be relevant."></a>Invest your golden time in transferable skills. Skills that will always be relevant.</h1><p>将你的黄金时间用于学习通用技能，那些不会过时的技能。</p><ul><li><del>Microservices frameworks</del> Evolutionary Architecture<br>不要学习微服务框架，学习演进式架构（Evolutionary Architecture）。</li><li><del>New programming language</del> Clean Code, Design Patterns, DDD<br>不要学习新的编程语言，学习代码整洁之道、设计模式、领域驱动设计（DDD）。</li><li><del>LeSS, SAFe</del> Lean manufacturing principles<br>不要学习 LeSS 和规模化敏捷框架（SAFe），学习精益生产原则（Lean manufacturing principles）。</li><li><del>Hystrix</del> Fault Tolerance Patterns<br>不要学习 Hystrix，学习容错模式（Fault Tolerance Patterns）。</li><li><del>Docker</del> Continuous Delivery<br>不要学习 Docker，学成持续交付。</li><li><del>Angular</del> Web, HTTP and REST<br>不要学习 Angular、React 和 Vue，学习 Web、HTTP 和 REST。</li></ul><blockquote><p>原文出自：<a href="https://sizovs.net/2018/12/17/stop-learning-frameworks" target="_blank" rel="noopener">https://sizovs.net/2018/12/17/stop-learning-frameworks</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We are developers. We need to stay up to date with technology. Every day, we learn programming languages, frameworks, and libraries. The 
      
    
    </summary>
    
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
      <category term="精彩生活" scheme="http://yoursite.com/tags/%E7%B2%BE%E5%BD%A9%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>狗知道自己是狗吗？</title>
    <link href="http://yoursite.com/life/life-doglike.html"/>
    <id>http://yoursite.com/life/life-doglike.html</id>
    <published>2019-03-21T07:40:00.000Z</published>
    <updated>2020-03-13T15:27:28.165Z</updated>
    
    <content type="html"><![CDATA[<p>　　相信大家对于狗这个生物并不陌生，不知道大家对于狗是怎么认识的？宠物？朋友？伴侣？或者是美食？（呃，美食太凶残了，本人不这么认为）。诚然，对于人来说，狗只是一条狗，不管怎么看待也不会给它合法权益。随之而来的是一个全新的问题，狗知道自己是狗吗？</p><p>　　之所以提出这个问题，是来源于一部漫画作品。这部作品叫做《一条狗》，讲述了一个人与一条狗互换身体的故事。但是这个故事并不十分诚实，因为主观意识还是人，只不过是人的意识狗的身体而已。所以，问题是在于，在狗的意识中，究竟是怎样看待自己的？</p><p>　　首先一个很明显的事情，狗是狗生的，但是大部分的狗却是人养大的。狗从小就被人从母亲身边带走，所以狗的亲生父母无法教育狗怎么当好一条狗，只好被人类传授价值观。换句话说，狗被人类饲养之后，接触的全部都是人，它会不会本能的认为自己也是人？</p><p>　　我觉得这件事其实还是在于社交范围，就像是狼孩的传说。从小被狼养大的孩子会认为自己也是只狼，在狼孩没有遇到人之前，他会认为狼是自己的同类。那么同样道理，从小被人养大的狗很可能也会认为自己是个人，至少在接触到其他狗之前，大概会以为自己是一个与其他人都不同的“人”，这就好比某一方面有缺陷的孩子会自卑一样，狗更是与其他人完全不一样，所以在没有接触过其他狗的时候，它自己作为人是会认为自己是人的，只是有一些不一样的“人”。</p><p>　　但是随着慢慢的成长，狗并不一定会比人差，一岁的时候狗已经算是成年了，而人却连爬都不会爬，所以这个阶段的狗，并不会因为自己与其他人不同而自卑，反而会抑制住不骄傲，因为狗已经比同龄人领先太多了，作为狗本性一定是善良的，不会去欺负同龄人，但是自己绝对是非常开心非常健壮的。</p><p>　　最大的问题在于，狗见到了其他的狗会怎么想。因为在正常情况下，狗不可避免的会见到其他的狗，但是不同的狗的处境是不一样的，有的狗地位高，有的狗地位低，甚至有的狗因为被抛弃而成为流浪狗。当身处于正常家庭的狗见到那些流浪狗的时候，会不会出现一种鄙视的心情。这种心情来源于自己身体的健壮以及是否有主人，也直接关系到狗的自信心。</p><p>　　当狗见到其他狗时，我想真正聪明的狗是能够意识到自己作为狗，和养大自己的人是有很大差距的。这时狗的价值观很有可能崩塌！因为在此之前它一直以为自己是人，但是直到见到了其他的狗之后才发现自己是条狗！这个阶段的狗很有可能无法面对现实，当然经过一番挣扎之后，狗最终还是选择面对现实，毕竟养大它的人会给它食物，而狗本身没有被赋予荣辱观，即使没有尊严变成别人的一条狗，狗也是可以接受的。</p><p>　　综上所述，狗，在自己成长到一定阶段之后，见识过很多事情之后，是可以发现自己是条狗的。当它发现自己是条狗以后，也许会安然自若，接受这个现实，也有可能心情抑郁，无法面对现实，但是无论是怎样的心情，狗都会一如既往的活下去，毕竟，生存才是最重要的。</p><p>　　当然，如果是人的意识，狗的身体，情况怕是不好说。这个取决于这个人的意识脑残程度到底几级。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　相信大家对于狗这个生物并不陌生，不知道大家对于狗是怎么认识的？宠物？朋友？伴侣？或者是美食？（呃，美食太凶残了，本人不这么认为）。诚然，对于人来说，狗只是一条狗，不管怎么看待也不会给它合法权益。随之而来的是一个全新的问题，狗知道自己是狗吗？&lt;/p&gt;
&lt;p&gt;　　之所以提出
      
    
    </summary>
    
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
      <category term="精彩生活" scheme="http://yoursite.com/tags/%E7%B2%BE%E5%BD%A9%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的表锁和行锁</title>
    <link href="http://yoursite.com/interview/interview-formlock.html"/>
    <id>http://yoursite.com/interview/interview-formlock.html</id>
    <published>2019-03-15T14:39:00.000Z</published>
    <updated>2020-03-13T15:20:59.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a><strong>基本命令</strong></h1><p><strong>查看那张表被锁住，其中In_use字段大于0则表被锁。</strong></p><blockquote><p>show open tables;</p></blockquote><p><strong>给某张表上锁</strong></p><blockquote><p>lock table 【表名】【read/write】;</p></blockquote><p><strong>释放所有的锁</strong></p><blockquote><p>unlock tables;</p></blockquote><p><strong>查看引擎</strong></p><blockquote><p>show engines;</p></blockquote><p><strong>查看自动提交状态</strong></p><blockquote><p>show variables like ‘autocommit’;</p></blockquote><h1 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a><strong>表锁</strong></h1><blockquote><p><strong>以下是在MyISAM引擎下，MyISAM偏读。</strong></p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><strong>t_logs 表一张。</strong></li><li><strong>session1 给t_logs上读锁或写锁。</strong></li><li><strong>session2 不做任何与锁有关操作。</strong></li></ul><h2 id="读锁"><a href="#读锁" class="headerlink" title="读锁"></a>读锁</h2><blockquote><p>读锁也叫共享锁，以下都是测试出来的结果，有兴趣可以自己试试。</p></blockquote><table><thead><tr><th>Session1</th><th>Session2</th></tr></thead><tbody><tr><td>可以查询 t_logs 表</td><td>可以查询 t_logs 表</td></tr><tr><td>不可以更新 t_logs 表</td><td>不可以更新 t_logs 表<br>会阻塞，必须等待锁释放</td></tr><tr><td>不可以查询别的表</td><td>可以查询别的表</td></tr><tr><td>不可以更新别的表</td><td>可以更新别的表</td></tr></tbody></table><p><strong>总结：当前会话为某张表加了读锁，当前会话仅仅能读取加锁的表，任何其它操作都不能做。而其他会话对此表只有读的权限，但除此之外的表，则正常操作。</strong></p><h2 id="写锁"><a href="#写锁" class="headerlink" title="写锁"></a>写锁</h2><blockquote><p>写锁也叫排它锁</p></blockquote><table><thead><tr><th>Session1</th><th>Session2</th></tr></thead><tbody><tr><td>可以查询 t_logs 表</td><td>不可以查询 t_logs 表<br>会阻塞</td></tr><tr><td>可以更新 t_logs 表</td><td>不可以更新 t_logs 表<br>会阻塞，必须等待锁释放</td></tr><tr><td>不可以查询别的表</td><td>可以查询别的表</td></tr><tr><td>不可以更新别的表</td><td>可以更新别的表</td></tr></tbody></table><p><strong>总结：当前会话为某张表加了写锁，那么当前会话就独享了这张表，拥有这张表的读写权限，且不能够对除此表之外的任何表做任何操作。其它会话也不可以对此表进行任何操作。</strong></p><h1 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a><strong>行锁</strong></h1><blockquote><p><strong>MySQL在5.1以后默认的存储引擎就是InnoDB，行锁演示是在InnoDB引擎下，该引擎支持事务，并且为了并发性能引进了行级锁。</strong></p></blockquote><h2 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h2><p>为了演示效果，先关闭自动提交功能。</p><blockquote><p>set autocommit = 0;</p></blockquote><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在Session1执行 commit 命令之前，假设修改 id = 1 的这一行，得出如下结论：</p><table><thead><tr><th>Session1</th><th>Session2</th></tr></thead><tbody><tr><td>能够修改id为1的这一行</td><td>除了id为1的这一行都可以修改</td></tr><tr><td>也能够修改别的记录<br>但修改哪条记录，那条记录就被锁住</td><td>除了被锁住的记录不能修改以外(可以读)，其它都可以修改</td></tr></tbody></table><p>总结：行级锁顾名思义就是锁定数据库中的一行，对于数据库来说开销比锁一张表大，但是发生锁冲突的概率比表锁小很多，并发性能高很多，当前会话锁住这一行后，其它会话要想修改这一行，必须等待上一个会话进行事务的提交，否则就会阻塞在这里。但对于其它未被锁住的行，是不受任何影响的。</p><h1 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a><strong>间隙锁</strong></h1><p>什么时候会发生间隙锁？看下面例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t_permission;</span><br><span class="line">+----+----------------+-------------+</span><br><span class="line">| id | url            | description |</span><br><span class="line">+----+----------------+-------------+</span><br><span class="line">|  1 | /user/create   | create      |</span><br><span class="line">|  3 | /user/update   | update      |</span><br><span class="line">|  4 | /user/retrieve | retrieve    |</span><br><span class="line">|  5 | /user/delete   | delete      |</span><br><span class="line">+----+----------------+-------------+</span><br></pre></td></tr></table></figure><p>t_permission 表 id 为主键，但缺少了 id = 2，当我们使用范围更新数据的时候，如下语句：</p><blockquote><p>update t_permission set description = ‘666’ where id &gt; 0 and id &lt; 6;</p></blockquote><p>将 id = 2 包括了进去，那么mysql默认的会将这个范围之内所有的连续id都上锁，与此同时，在另一个会话中进行插入 id = 2 的数据操作：</p><blockquote><p>insert into t_permission values(1,’222’,’222’);</p></blockquote><p>那么这个插入操作会阻塞，这就是间隙锁。如果线上环境发生了这样的锁等待，很不好发觉，可以用show profile命令来排查。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;&lt;strong&gt;基本命令&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;查看那张表被锁住，其中In_use字段大于0则表被锁。&lt;/strong&gt;&lt;
      
    
    </summary>
    
    
      <category term="interview" scheme="http://yoursite.com/categories/interview/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之：代理模式</title>
    <link href="http://yoursite.com/designpattern/designpattern-proxy.html"/>
    <id>http://yoursite.com/designpattern/designpattern-proxy.html</id>
    <published>2019-03-12T07:48:00.000Z</published>
    <updated>2020-03-13T15:19:43.987Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>现实生活中，存在着各种代理，比如海外代购，律师，游戏代练等等，映射到Java中，也存在着代理，汇总实际场景中的使用，将代理分为了静态代理和动态代理两种模式。</p></blockquote><h1 id="StaticProxy"><a href="#StaticProxy" class="headerlink" title="StaticProxy"></a>StaticProxy</h1><blockquote><p>静态代理拆开来，静态指的是在程序运行前就已经存在了代理类的字节码文件，也就是这个代理类是程序员手动编写的，代理类和被代理类的关系就已经确定了的，代理指的就是编写的代理类对被代理类的增强效果。</p></blockquote><p>场景一：</p><p>张三看上了海外一家公司CompanyA制造的一款包，如果他自己想要买这款包，他就需要出国购买，出国前办理签证，坐飞机，买包，坐飞机，回家。但他并不像这么麻烦，于是他便找了一家代购店，于是张三所做的事情就是给钱，拿包完事，至于中间代购店如何出的国，如何坐的飞机，跟张三毫无关系，因为张三的目的就是要这个包，抽象如下：</p><p>业务接口BusinessA（制造包）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 制造包的业务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BusinessA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createBag</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产包的厂商CompanyA：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 国外生产包的厂商A，但不限于A，可能还有B，C 。。。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompanyA</span> <span class="keyword">implements</span> <span class="title">BusinessA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createBag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CompanyA公司生产的包。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理类ProxyStore：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 代理商店，它对外宣称有卖包的业务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyStore</span> <span class="keyword">implements</span> <span class="title">BusinessA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CompanyA companyA;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createBag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 在购买前做的事</span></span><br><span class="line">        doBefore();</span><br><span class="line">        <span class="comment">// 2. 从厂商购买</span></span><br><span class="line">        companyA.createBag();</span><br><span class="line">        <span class="comment">// 3. 运回国内</span></span><br><span class="line">        doAfter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"办理签证，坐飞机去国外。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"从国外运回国内。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CompanyA <span class="title">getCompanyA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> companyA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompanyA</span><span class="params">(CompanyA companyA)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.companyA = companyA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建代理类</span></span><br><span class="line">        ProxyStore proxyStore = <span class="keyword">new</span> ProxyStore();</span><br><span class="line">        <span class="comment">// 让代理有买包的权利</span></span><br><span class="line">        proxyStore.setCompanyA(<span class="keyword">new</span> CompanyA());</span><br><span class="line">        <span class="comment">// 由代理去购买</span></span><br><span class="line">        proxyStore.createBag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>静态代理的优缺点：</p></blockquote><ul><li>优点：业务类只需要关注业务本身，无需关心业务前后所做的增强处理，这些都交给代理来处理。</li><li>缺点：代理类代理的业务单一，假如业务接口扩展了，还需要改动代理类的代码，增加维护的成本。</li></ul><h1 id="DynamicProxy"><a href="#DynamicProxy" class="headerlink" title="DynamicProxy"></a>DynamicProxy</h1><blockquote><p>动态代理拆开，动态指的是代理类的源码是在程序运行期间由JVM根据反射等机制动态的生成，所以不存在代理类的字节码文件。代理类和委托类的关系是在程序运行时确定。</p></blockquote><ul><li>Proxy类，它是所有动态代理的父类，其中利用静态方法newProxyInstance()来创建代理类。</li><li>InvocationHandler接口，其中invoke方法的作用就是在代理类中调用目标方法，并返回结果。</li><li>invoke方法的三个参数<ul><li>proxy：代理对象的实例</li><li>method：通过它可以调用真实方法</li><li>args：传过来的参数</li></ul></li></ul><p>还是上面静态代理的例子(以下为JDK动态代理，只能代理接口)：</p><p>业务接口BusinessA：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 制造包的业务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BusinessA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createBag</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务接口BusinessB：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 制造手表的业务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BusinessB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createWatch</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产包的厂商CompanyA：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 国外生产包的厂商A，但不限于A，可能还有B，C 。。。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompanyA</span> <span class="keyword">implements</span> <span class="title">BusinessA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createBag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CompanyA公司生产的包。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产手表的厂商CompanyB：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 国外生产手表的厂商CompanyB</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompanyB</span> <span class="keyword">implements</span> <span class="title">BusinessB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createWatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CompanyB公司生产的手表。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理类：</p><p>需要实现InvocationHandler接口，并且重写invoke方法，还需要一个获取代理对象的方法getProxyInstance。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description 实现InvocationHandler接口的动态代理类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyClassBeans</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被代理的对象</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> Object tar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 利用反射来调用目标方法</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 调用目标方法之前</span></span><br><span class="line">        doBefore();</span><br><span class="line">        <span class="comment">// 2. 调用目标方法</span></span><br><span class="line">        Object invoke = method.invoke(tar, args);</span><br><span class="line">        <span class="comment">// 3. 调用目标方法之后</span></span><br><span class="line">        doAfter();</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 绑定该类实现的所有接口，取得代理类 **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(tar.getClass().getClassLoader(), tar.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ===================动态代理类中的增强方法========================</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在国外寻找优质的货源。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"精包装安全邮寄回国内。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ===========================get/set=============================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getTar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTar</span><span class="params">(Object tar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tar = tar;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取动态代理类</span></span><br><span class="line">        ProxyClassBeans proxyClassBeans = <span class="keyword">new</span> ProxyClassBeans();</span><br><span class="line">        IBusinessA companyA = <span class="keyword">new</span> CompanyA();</span><br><span class="line">        <span class="comment">// 将目标类交给代理类</span></span><br><span class="line">        proxyClassBeans.setTar(companyA);</span><br><span class="line">        <span class="comment">// 拿到代理对象</span></span><br><span class="line">        IBusinessA instance1 = (IBusinessA) proxyClassBeans.getProxyInstance();</span><br><span class="line">        instance1.createBag();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"================================="</span>);</span><br><span class="line"></span><br><span class="line">        IBusinessB companyB = <span class="keyword">new</span> CompanyB();</span><br><span class="line">        proxyClassBeans.setTar(companyB);</span><br><span class="line">        IBusinessB instance2 = (IBusinessB) proxyClassBeans.getProxyInstance();</span><br><span class="line">        instance2.saleWatch();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在国外寻找优质的货源。</span><br><span class="line">CompanyA公司生产的包。</span><br><span class="line">精包装安全邮寄回国内。</span><br><span class="line">=================================</span><br><span class="line">在国外寻找优质的货源。</span><br><span class="line">CompanyB公司生产的手表。</span><br><span class="line">精包装安全邮寄回国内。</span><br></pre></td></tr></table></figure><p>由运行结果可知，动态代理在增添业务的时候(增添了卖手表的业务)，只需要调用者传入不同的接口就好了，代理类不需要改动。</p><blockquote><p>动态代理的优缺点：</p></blockquote><ul><li>优点：同样，我们只关注业务类的逻辑即可，并且如果新增业务类，代理类的代码根本不需要动，因为代理对象是根据传入的接口类型生成的，方便扩展。</li><li>缺点：JDK动态代理，在生成代理对象的时候必须传入业务类的接口类型，也就是只能够代理接口。能够代理类的动态代理是CGLIB动态代理。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;现实生活中，存在着各种代理，比如海外代购，律师，游戏代练等等，映射到Java中，也存在着代理，汇总实际场景中的使用，将代理分为了静态代理和动态代理两种模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;StaticProxy&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="designpattern" scheme="http://yoursite.com/categories/designpattern/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MacOS常用快捷键</title>
    <link href="http://yoursite.com/tools/tools-mackey.html"/>
    <id>http://yoursite.com/tools/tools-mackey.html</id>
    <published>2019-03-11T02:59:00.000Z</published>
    <updated>2020-03-13T15:16:41.125Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>常用的快捷键如下：</strong></p></blockquote><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td><code>command</code> + <code>W</code></td><td>关闭当前应用窗口（不退出）</td></tr><tr><td><code>command</code> + <code>Q</code></td><td>退出当前应用（完全退出）</td></tr><tr><td><code>command</code> + <code>M</code></td><td>最小化当前窗口</td></tr><tr><td><code>command</code> + <code>N</code></td><td>新建当前应用窗口</td></tr><tr><td><code>command</code> + <code>空格</code></td><td>呼出命令行，可输入terminal、calc等功能</td></tr><tr><td><code>command</code> + <code>shift</code> + <code>.</code></td><td>显示 / 隐藏 隐藏文件</td></tr><tr><td><code>command</code> + <code>option</code> + <code>C</code></td><td>复制文件路径</td></tr><tr><td><code>command</code> + <code>shift</code> + <code>3</code></td><td>将当前屏幕截屏并将截图保存到桌面</td></tr><tr><td><code>command</code> + <code>shift</code> + <code>4</code></td><td>用鼠标选定区域截图或按空格选定窗口后点击鼠标左键截图，截图文件保存在桌面</td></tr><tr><td><code>command</code> + <code>control</code> + <code>shift</code> + <code>3</code></td><td>将当前屏幕截屏并将截图保存到剪切板</td></tr><tr><td><code>command</code> + <code>control</code> + <code>shift</code> + <code>4</code></td><td>用鼠标选定区域截图或按空格选定窗口后点击鼠标左键截图，截图文件保存在剪切板</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;常用的快捷键如下：&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;c
      
    
    </summary>
    
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="MAC" scheme="http://yoursite.com/tags/MAC/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之：工厂模式</title>
    <link href="http://yoursite.com/designpattern/designpattern-factory.html"/>
    <id>http://yoursite.com/designpattern/designpattern-factory.html</id>
    <published>2019-03-11T02:08:00.000Z</published>
    <updated>2020-03-13T15:15:44.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SimpleFactory"><a href="#SimpleFactory" class="headerlink" title="SimpleFactory"></a>SimpleFactory</h1><blockquote><p>说到工厂，我们应该能想到，造汽车的有汽车工厂，造轮船的有轮船工厂，映射到Java中，造对象的就应该有对象工厂，比如说我想要买一辆车，那我只需要去汽车工厂（先不去4S店）里面告诉它什么品牌的汽车，具体参数，给钱提车就完了，我并不需要了解汽车是如何造出来的，也就是屏蔽了造车的细节，这样的好处就是对于买家来说，简单方便，用户体验大大提升，对于卖家来说我厂生产汽车的具体细节不会外露。</p></blockquote><p>需求：</p><blockquote><p>用户提出要圆形、三角形、菱形等等。</p></blockquote><p>解决方案1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用户需要圆，自己new一个</span></span><br><span class="line">    Circle circle = <span class="keyword">new</span> Circle();</span><br><span class="line">    <span class="comment">// 用户需要三角形，自己new一个</span></span><br><span class="line">    Triangle triangle = <span class="keyword">new</span> Triangle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方案2：</p><p>可以使用简单工厂的模式，只需要将工厂暴露给调用方，调用方给出自己想要的形状就可以了，因为所有的设计模式都是面向接口编程，所以接口是少不了的。</p><blockquote><p>定义一个Shape接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 所有图形都有的公共属性，定义成抽象类也可以，接口也可</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Shape接口的实现类CricleShape</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 圆形实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleShape</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"圆形创建出来。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"画出一个圆形。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Shape接口的实现类Triangle</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 三角形实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TriangleShape</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TriangleShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"三角形创建出来。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"画出一个三角形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>简单工厂类，对外暴露方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 简单工厂类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 简单工厂模式对外屏蔽了对象的创建细节，需要什么对象直接从工厂获取。</span></span><br><span class="line"><span class="comment">     * 2. 将获取对象的方法声明成静态的，由工厂类，向外提供服务。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title">getShape</span><span class="params">(String shapeName)</span> </span>&#123;</span><br><span class="line">        Shape shape = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != shapeName &amp;&amp; !<span class="string">""</span>.equals(shapeName)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"circle"</span>.equalsIgnoreCase(shapeName)) &#123;</span><br><span class="line">                shape = <span class="keyword">new</span> CircleShape();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"triangle"</span>.equalsIgnoreCase(shapeName)) &#123;</span><br><span class="line">                shape = <span class="keyword">new</span> TriangleShape();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> shape;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试类</p></blockquote><p>在调用方只需要给工厂提供想要的形状即可，不必关心形状是如何来的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 简单工厂模式测试用例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Shape circle = ShapeFactory.getShape(<span class="string">"circle"</span>);</span><br><span class="line">        circle.draw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>简单工厂，根本来说不属于23中设计模式中的一种，但工厂方法模式和抽象工厂模式都是由它演变来的，它的缺点：系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，有可能造成工厂逻辑过于复杂，违背了OCP原则。</p></blockquote><h1 id="FactoryMethod"><a href="#FactoryMethod" class="headerlink" title="FactoryMethod"></a>FactoryMethod</h1><blockquote><p>还是上面的汽车例子，简单工厂类中维护了创建不同汽车的逻辑，比如说包括宝马，奔驰，奥迪，但后续需求越来越多，又增添了长城，马自达，大众等等品牌，那么这个工厂类的创建逻辑会越来越多，现实中，宝马有宝马自己的工厂，奔驰也有奔驰自己的工厂，映射到Java中，不同的类，应该有各自的工厂，这样的目的就是为了维护扩展方便，同时遵循了OCP原则。</p></blockquote><p>设计模式是基于接口的，首先要有一个汽车的接口Car，它用来规定汽车的公共功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 所有汽车的公共接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * car在跑。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">running</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是具体品牌汽车的实例：</p><p>宝马：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoMa</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"宝马飞驰。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>奔驰：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenChi</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"奔驰奔跑。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是各自品牌的工厂，在创建各自工厂之前，最好加一层汽车工厂接口，目的是用多态来返回不同的工厂，使代码更加灵活。</p><p>汽车工厂接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Car <span class="title">createCar</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各自的汽车工厂类：</p><p>宝马工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoMaFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">createCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"宝马工厂生产汽车。"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaoMa();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>奔驰工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenChiFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">createCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"奔驰工厂生产汽车。"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BenChi();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 先获取宝马车的工厂，如果想改奔驰的，仅改动一行代码即可。</span></span><br><span class="line">        CarFactory carFactory = <span class="keyword">new</span> BaoMaFactory();</span><br><span class="line">        <span class="comment">// 2. 利用工厂来制造汽车</span></span><br><span class="line">        Car car = carFactory.createCar();</span><br><span class="line">        car.running();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>工厂方法模式就很利于扩展，且不需要改动原来的代码，不管增加多少个品牌，只需要增加对应的工厂，以及实例就好了。</p></blockquote><p>适用场景：</p><ol><li>客户端不需要知道它所创建的对象的类。例子中我们不知道每个汽车具体叫什么名，只知道创建它的工厂名就完成了创建过程。</li><li>客户端可以通过子类来指定创建对应的对象。</li></ol><h1 id="AbstractFactory"><a href="#AbstractFactory" class="headerlink" title="AbstractFactory"></a>AbstractFactory</h1><blockquote><p>抽象工厂的局限性比较大，并且它不符合OCP原则，工厂方法模式是创建一个对象，而抽象工厂它可以创建一组对象，这是和工厂方法模式最大的不同点。上述汽车的例子，假如汽车生产出来，出厂之前，我还需要给汽车做一个包装保养的服务，比如宝马有宝马的包装保养，奔驰有奔驰的包装保养，那是不是应该再创建一个专门做保养的工厂呢，肯定不是，抽象工厂的作用就是将汽车的生产、保养，以及后续的任务都做到一起，秉承一条龙服务，包括汽车的生产，包装，保养，维修等。</p></blockquote><p><strong>首先定义基本接口：</strong></p><ul><li>汽车公共接口Car：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * car在跑。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">running</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>汽车维修服务接口CarFix：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarFix</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 汽车维修服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">carFix</span><span class="params">(Car car)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>汽车包装服务接口CarPack：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarPack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 汽车包装服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">carPack</span><span class="params">(Car car)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>三个接口的实现类：</strong></p><ul><li>Car类</li></ul><p>宝马BaoMa：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoMa</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"宝马飞驰。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>奔驰BenChi：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenChi</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"奔驰奔跑。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>维修类CarFixService：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFixService</span> <span class="keyword">implements</span> <span class="title">CarFix</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">carFix</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        System.out.println(car.getClass() + <span class="string">"在维修。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>包装类CarPackService：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarPackService</span> <span class="keyword">implements</span> <span class="title">CarPack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">carPack</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        System.out.println(car.getClass() + <span class="string">"精美包装。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抽象工厂：</strong></p><p>抽象工厂中提供了此工厂所有的服务以及功能，包括汽车生产、包装、维修等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 汽车创造</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Car <span class="title">createCar</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 汽车修理服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">CarFix <span class="title">carFix</span><span class="params">(Car car)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 汽车包装服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">CarPack <span class="title">carPack</span><span class="params">(Car car)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体的汽车工厂：</strong></p><p>奔驰工厂BenChiFactory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenChiFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">createCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BenChi();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CarFix <span class="title">carFix</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CarFixService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CarPack <span class="title">carPack</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CarPackService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>宝马工厂BaoMaFactory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoMaFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">createCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaoMa();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CarFix <span class="title">carFix</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CarFixService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CarPack <span class="title">carPack</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CarPackService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 先按名字获取工厂</span></span><br><span class="line">        AbstractFactory factory = <span class="keyword">new</span> BenChiFactory();</span><br><span class="line">        <span class="comment">// 2. 生产车</span></span><br><span class="line">        Car car = factory.createCar();</span><br><span class="line">        <span class="comment">// 3. 包装车</span></span><br><span class="line">        CarPack carPack = factory.carPack(car);</span><br><span class="line">        carPack.carPack(car);</span><br><span class="line">        <span class="comment">// 4. 上路</span></span><br><span class="line">        car.running();</span><br><span class="line">        <span class="comment">// 5. 修理车</span></span><br><span class="line">        CarFix carFix = factory.carFix(car);</span><br><span class="line">        carFix.carFix(car);</span><br><span class="line">        <span class="comment">// -- 以上全部都是由工厂来完成。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">生产奔驰。</span><br><span class="line">BenChi精美包装。</span><br><span class="line">奔驰奔跑。</span><br><span class="line">BenChi在维修。</span><br></pre></td></tr></table></figure><blockquote><p>抽象工厂适用场景：</p></blockquote><ol><li>和工厂方法一样客户端不需要知道它所创建的对象的类。</li><li>需要一组对象共同完成某种功能时。并且可能存在多组对象完成不同功能的情况。</li><li>系统结构稳定，不会频繁的增加对象。（因为一旦增加就需要修改原有代码，不符合开闭原则）</li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SimpleFactory&quot;&gt;&lt;a href=&quot;#SimpleFactory&quot; class=&quot;headerlink&quot; title=&quot;SimpleFactory&quot;&gt;&lt;/a&gt;SimpleFactory&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;说到工厂，我们应该能想到，
      
    
    </summary>
    
    
      <category term="designpattern" scheme="http://yoursite.com/categories/designpattern/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之：工厂模式</title>
    <link href="http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(13).html"/>
    <id>http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(13).html</id>
    <published>2019-03-11T02:08:00.000Z</published>
    <updated>2020-03-13T15:18:47.563Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="designpattern" scheme="http://yoursite.com/categories/designpattern/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之：工厂模式</title>
    <link href="http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(12).html"/>
    <id>http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(12).html</id>
    <published>2019-03-11T02:08:00.000Z</published>
    <updated>2020-03-13T15:18:47.563Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="designpattern" scheme="http://yoursite.com/categories/designpattern/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之：工厂模式</title>
    <link href="http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(16).html"/>
    <id>http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(16).html</id>
    <published>2019-03-11T02:08:00.000Z</published>
    <updated>2020-03-13T15:18:47.563Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="designpattern" scheme="http://yoursite.com/categories/designpattern/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之：工厂模式</title>
    <link href="http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(14).html"/>
    <id>http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(14).html</id>
    <published>2019-03-11T02:08:00.000Z</published>
    <updated>2020-03-13T15:18:47.563Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="designpattern" scheme="http://yoursite.com/categories/designpattern/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之：工厂模式</title>
    <link href="http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(10).html"/>
    <id>http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(10).html</id>
    <published>2019-03-11T02:08:00.000Z</published>
    <updated>2020-03-13T15:18:47.563Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="designpattern" scheme="http://yoursite.com/categories/designpattern/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之：工厂模式</title>
    <link href="http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(18).html"/>
    <id>http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(18).html</id>
    <published>2019-03-11T02:08:00.000Z</published>
    <updated>2020-03-13T15:18:47.563Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="designpattern" scheme="http://yoursite.com/categories/designpattern/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之：工厂模式</title>
    <link href="http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(17).html"/>
    <id>http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(17).html</id>
    <published>2019-03-11T02:08:00.000Z</published>
    <updated>2020-03-13T15:18:47.563Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="designpattern" scheme="http://yoursite.com/categories/designpattern/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之：工厂模式</title>
    <link href="http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(2).html"/>
    <id>http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(2).html</id>
    <published>2019-03-11T02:08:00.000Z</published>
    <updated>2020-03-13T15:18:47.563Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="designpattern" scheme="http://yoursite.com/categories/designpattern/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之：工厂模式</title>
    <link href="http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(19).html"/>
    <id>http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(19).html</id>
    <published>2019-03-11T02:08:00.000Z</published>
    <updated>2020-03-13T15:18:47.563Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="designpattern" scheme="http://yoursite.com/categories/designpattern/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之：工厂模式</title>
    <link href="http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(11).html"/>
    <id>http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(11).html</id>
    <published>2019-03-11T02:08:00.000Z</published>
    <updated>2020-03-13T15:18:47.563Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="designpattern" scheme="http://yoursite.com/categories/designpattern/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之：工厂模式</title>
    <link href="http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(15).html"/>
    <id>http://yoursite.com/designpattern/designpattern-proxy%20-%20%E5%89%AF%E6%9C%AC%20(15).html</id>
    <published>2019-03-11T02:08:00.000Z</published>
    <updated>2020-03-13T15:18:47.563Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="designpattern" scheme="http://yoursite.com/categories/designpattern/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
