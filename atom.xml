<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>在谷歌上百度</title>
  
  <subtitle>但行好事，莫问前程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-13T15:12:31.855Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>BigBing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>还在使用BeanUtils吗？</title>
    <link href="http://yoursite.com/interview/beanutils.html"/>
    <id>http://yoursite.com/interview/beanutils.html</id>
    <published>2020-03-11T00:14:42.000Z</published>
    <updated>2020-03-13T15:12:31.855Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从名字上来看，BeanUtils是一个很好用的工具类。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;从名字上来看，BeanUtils是一个很好用的工具类。&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="interview" scheme="http://yoursite.com/categories/interview/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2020特殊的一年</title>
    <link href="http://yoursite.com/life/my2020.html"/>
    <id>http://yoursite.com/life/my2020.html</id>
    <published>2020-03-09T15:04:42.000Z</published>
    <updated>2020-03-13T15:27:34.847Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2020年真是特殊的一年，它是一个闰年</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;2020年真是特殊的一年，它是一个闰年&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
      <category term="精彩生活" scheme="http://yoursite.com/tags/%E7%B2%BE%E5%BD%A9%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Apache ZooKeeper（六）：基于ZooKeeper的服务注册与发现</title>
    <link href="http://yoursite.com/zooKeeper/zookeeper-006.html"/>
    <id>http://yoursite.com/zooKeeper/zookeeper-006.html</id>
    <published>2019-07-25T08:39:00.000Z</published>
    <updated>2020-03-13T16:29:18.864Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SpringBoot2.0基于Zookeeper实现服务的注册与发现。zk版本是<code>3.4.14</code>。</p></blockquote><h1 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h1><ol><li><p>在producer启动的时候，将ip和端口放到指定的临时顺序节点下</p></li><li><p>在consumer启动的时候，从指定的节点下拉取并监听这个节点的动态</p></li><li><p>当producer因为某种因素宕掉后，consumer会再次更新本地节点的状态信息，从而实现动态感知功能</p></li><li><p>consumer使用restTemplate通过某种负载机制实现远程调用</p><h1 id="pom配置"><a href="#pom配置" class="headerlink" title="pom配置"></a>pom配置</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web project --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- zookeeper original jar --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意这里的版本，最好跟远程服务的版本一致，否则可能出现莫名其妙的错误。</p></blockquote><h1 id="producer配置"><a href="#producer配置" class="headerlink" title="producer配置"></a>producer配置</h1><blockquote><p>有几个注意的地方</p></blockquote></li><li><p>zk不允许级联创建节点</p></li><li><p>必须创建临时顺序节点</p></li><li><p>节点权限放开</p><h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer01BootStrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(Producer01BootStrap<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">servletListenerRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletListenerRegistrationBean servletListenerRegistrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean();</span><br><span class="line">        servletListenerRegistrationBean.setListener(<span class="keyword">new</span> Producer01Listener());</span><br><span class="line">        <span class="keyword">return</span> servletListenerRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动监听器"><a href="#启动监听器" class="headerlink" title="启动监听器"></a>启动监听器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"Producer01Listener"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer01Listener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(Producer01Listener.class.getClassLoader().getResourceAsStream("application.properties"));</span><br><span class="line">            <span class="comment">// 获取服务的ip和端口号，并将它们拼接后写到zookeeper的临时顺序节点中</span></span><br><span class="line">            String hostAddress = InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">            String port = properties.getProperty(<span class="string">"server.port"</span>);</span><br><span class="line">            Producer01RegisterService.register(hostAddress, port);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者注册服务到zookeeper中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"Producer01RegisterService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer01RegisterService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_SERVICE = <span class="string">"/service"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_NAME = <span class="string">"/producer"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String ipAddr, String port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 服务节点的根路径</span></span><br><span class="line">            String path = BASE_SERVICE + SERVICE_NAME;</span><br><span class="line">            ZooKeeper zooKeeper = <span class="keyword">new</span> ZooKeeper(<span class="string">"10.231.128.34:2181"</span>, <span class="number">5000</span>, (watchedEvent -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            &#125;));</span><br><span class="line">            Stat exists = zooKeeper.exists(path, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 根路径不存在，则创建为永久节点</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == exists) &#123;</span><br><span class="line">                <span class="comment">// 创建父节点</span></span><br><span class="line">                zooKeeper.create(BASE_SERVICE, <span class="string">""</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">                <span class="comment">// 创建服务节点</span></span><br><span class="line">                zooKeeper.create(path, <span class="string">""</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 拼接ip和端口</span></span><br><span class="line">            String serverPath = ipAddr + <span class="string">":"</span> + port;</span><br><span class="line">            <span class="comment">// 创建临时顺序节点</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 临时：为了生产者挂掉，可以通过watch机制通知客户端</span></span><br><span class="line"><span class="comment">             * 顺序：可以有很多个生产者组成集群对外提供服务</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            zooKeeper.create(path + <span class="string">"/child"</span>, serverPath.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">            log.info(<span class="string">"生产者注册到zookeeper成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"生产者注册到zookeeper失败"</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="consumer"><a href="#consumer" class="headerlink" title="consumer"></a>consumer</h1><h2 id="启动类-1"><a href="#启动类-1" class="headerlink" title="启动类"></a>启动类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer01BootStrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(Consumer01BootStrap<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">servletListenerRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletListenerRegistrationBean servletListenerRegistrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean();</span><br><span class="line">        servletListenerRegistrationBean.setListener(<span class="keyword">new</span> Consumer01Listener());</span><br><span class="line">        <span class="keyword">return</span> servletListenerRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"Consumer01Listener"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer01Listener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_SERVICE = <span class="string">"/service"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_NAME = <span class="string">"/producer"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zooKeeper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String path = BASE_SERVICE + SERVICE_NAME;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从zookeeper上拉取节点信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initServiceList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zooKeeper = <span class="keyword">new</span> ZooKeeper(<span class="string">"10.231.128.34:2181"</span>, <span class="number">5000</span>, (watchedEvent -&gt; &#123;</span><br><span class="line">                <span class="comment">// 当节点变化时，更新服务节点信息</span></span><br><span class="line">                <span class="keyword">if</span> (watchedEvent.getType() == Watcher.Event.EventType.NodeChildrenChanged &amp;&amp; path.equals(watchedEvent.getPath())) &#123;</span><br><span class="line">                    updateServiceList();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">            <span class="comment">// 初次更新服务节点信息</span></span><br><span class="line">            updateServiceList();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新serviceList节点信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateServiceList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;String&gt; serviceList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            List&lt;String&gt; children = zooKeeper.getChildren(path, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">for</span> (String subNode : children) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] data = zooKeeper.getData(path + <span class="string">"/"</span> + subNode, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">                String ipPort = <span class="keyword">new</span> String(data, <span class="string">"utf-8"</span>);</span><br><span class="line">                serviceList.add(ipPort);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 选用负载均衡算法</span></span><br><span class="line">            LoadBalance.serviceHosts = serviceList;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        initServiceList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="负载类"><a href="#负载类" class="headerlink" title="负载类"></a>负载类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadBalance</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; serviceHosts;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">randomPickServiceHost</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomLoadBalance</span> <span class="keyword">extends</span> <span class="title">LoadBalance</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">randomPickServiceHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String host = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(serviceHosts))&#123;</span><br><span class="line">            <span class="keyword">int</span> nextInt = <span class="keyword">new</span> Random().nextInt(serviceHosts.size());</span><br><span class="line">            host = serviceHosts.get(nextInt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><blockquote><p>producer的controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/producer"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/sendMsg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello-world~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>consumer的controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/consumer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RandomLoadBalance randomLoadBalance = <span class="keyword">new</span> RandomLoadBalance();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/fetchMsg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String host = randomLoadBalance.randomPickServiceHost();</span><br><span class="line">        String str = restTemplate.getForObject(<span class="string">"http://"</span> + host + <span class="string">"/producer/sendMsg"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"---------------------------"</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动zookeeper</p></li><li><p>启动producer</p></li><li><p>启动consumer</p></li><li><p>在浏览器中访问：<code>localhost:8090/consumer/fetchMsg</code></p></li></ol><blockquote><p>全文（完）</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;SpringBoot2.0基于Zookeeper实现服务的注册与发现。zk版本是&lt;code&gt;3.4.14&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;基本思路&quot;&gt;&lt;a href=&quot;#基本思路&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="zooKeeper" scheme="http://yoursite.com/categories/zooKeeper/"/>
    
    
      <category term="ZooKeeper" scheme="http://yoursite.com/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>Apache ZooKeeper（五）：ZooKeeper的选主机制</title>
    <link href="http://yoursite.com/zooKeeper/zookeeper-005.html"/>
    <id>http://yoursite.com/zooKeeper/zookeeper-005.html</id>
    <published>2019-07-24T03:50:00.000Z</published>
    <updated>2020-03-13T16:28:41.595Z</updated>
    
    <content type="html"><![CDATA[<p>zookeeper的选主机制分析。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;zookeeper的选主机制分析。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="zooKeeper" scheme="http://yoursite.com/categories/zooKeeper/"/>
    
    
      <category term="ZooKeeper" scheme="http://yoursite.com/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>Apache ZooKeeper（四）：ZooKeeper和Paxos</title>
    <link href="http://yoursite.com/zooKeeper/zookeeper-004.html"/>
    <id>http://yoursite.com/zooKeeper/zookeeper-004.html</id>
    <published>2019-07-24T03:46:00.000Z</published>
    <updated>2020-03-13T16:27:40.569Z</updated>
    
    <content type="html"><![CDATA[<p>paxos，帕克索斯算法简介。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;paxos，帕克索斯算法简介。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="zooKeeper" scheme="http://yoursite.com/categories/zooKeeper/"/>
    
    
      <category term="ZooKeeper" scheme="http://yoursite.com/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>Apache ZooKeeper（三）：关于ZooKeeper的权限ACL</title>
    <link href="http://yoursite.com/zooKeeper/zookeeper-003.html"/>
    <id>http://yoursite.com/zooKeeper/zookeeper-003.html</id>
    <published>2019-07-24T03:45:00.000Z</published>
    <updated>2020-03-13T16:25:46.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>关于ACL(Access Control List)权限控制列表，在实际工作中用的真是少之又少，并且我感觉也并不是很好用，大概了解一下，如以后工作有所涉及，再研究不迟。</p></blockquote><h1 id="权限特性"><a href="#权限特性" class="headerlink" title="权限特性"></a>权限特性</h1><ul><li>某客户端可能无法访问指定的节点，但可以访问没有设权限的它的子节点。</li><li>每个节点都可以设置多个权限控制方案。</li><li>zk的权限是针对于某个节点的，需要单独设置，并不能有组的概念，比如linux中的组权限。<h1 id="权限设定"><a href="#权限设定" class="headerlink" title="权限设定"></a>权限设定</h1><blockquote><p>常用权限命令：</p></blockquote></li><li><code>setAcl &lt;path&gt; &lt;acl&gt;</code></li><li><code>getAcl &lt;path&gt;</code></li><li><code>addauth &lt;scheme&gt; &lt;auth&gt;</code><blockquote><p>权限又分以下三个维度：</p></blockquote><h2 id="scheme"><a href="#scheme" class="headerlink" title="scheme"></a>scheme</h2><blockquote><p>scheme分四个级别</p></blockquote></li></ul><table><thead><tr><th>级别</th><th>描述</th></tr></thead><tbody><tr><td>digest</td><td>只有一个用户：anyone，代表所有人（默认）</td></tr><tr><td>auth</td><td>使用 IP 地址认证</td></tr><tr><td>ip</td><td>使用已添加认证的用户认证</td></tr><tr><td>world</td><td>使用“用户名:密码”方式认证</td></tr><tr><td>## id</td><td></td></tr></tbody></table><blockquote><p>不同的scheme对应的id也不一样</p></blockquote><table><thead><tr><th>scheme</th><th>id</th></tr></thead><tbody><tr><td>digest</td><td>id为用户名和加密后的密码</td></tr><tr><td>auth</td><td>id为用户名</td></tr><tr><td>ip</td><td>id为客户端的ip</td></tr><tr><td>world</td><td>anyone</td></tr><tr><td>## permission</td><td></td></tr></tbody></table><blockquote><p>权限的类型，比较好记（rwadc）</p></blockquote><table><thead><tr><th>权限</th><th>ACL简写</th><th>描述</th></tr></thead><tbody><tr><td>CREATE</td><td>c</td><td>可以创建子节点</td></tr><tr><td>DELETE</td><td>d</td><td>可以删除子节点（仅下一级节点）</td></tr><tr><td>READ</td><td>r</td><td>可以读取节点数据及显示子节点列表</td></tr><tr><td>WRITE</td><td>w</td><td>可以设置节点数据</td></tr><tr><td>ADMIN</td><td>a</td><td>可以设置节点访问控制列表权限</td></tr><tr><td># 权限示例</td><td></td><td></td></tr><tr><td>## 权限的格式</td><td></td><td></td></tr></tbody></table><blockquote><p>权限格式：<code>scheme:id:permission</code></p></blockquote><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><blockquote><p>设定指定节点scheme为digest</p></blockquote><ul><li>首先创建节点：<code>create /persistent_node data</code></li><li>授权：<code>setAcl /persistent_node digest:ryan:UvJWhBril5yzpEiA2eV7bwwhfLs=:rwadc</code></li><li>获取权限信息：<code>getAcl /persistent_node</code></li><li>鉴权：<code>addauth digest ryan:123456</code>，相当于登录，然后再使用<code>get /persistent_node</code>的方法来获取节点信息。<blockquote><p>加密的方法(在服务器执行如下命令即可)：</p></blockquote></li></ul><p><code>echo -n &lt;user&gt;:&lt;password&gt; | openssl dgst -binary -sha1 | openssl base64</code><br><strong>示例：</strong><br><code>echo -n ryan:123456 | openssl dgst -binary -sha1 | openssl base64</code></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>至此，ACL简单总结完毕，如若以后工作中用到，再来研究。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;关于ACL(Access Control List)权限控制列表，在实际工作中用的真是少之又少，并且我感觉也并不是
      
    
    </summary>
    
    
      <category term="zooKeeper" scheme="http://yoursite.com/categories/zooKeeper/"/>
    
    
      <category term="ZooKeeper" scheme="http://yoursite.com/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法简单使用</title>
    <link href="http://yoursite.com/tools/tools-markdown.html"/>
    <id>http://yoursite.com/tools/tools-markdown.html</id>
    <published>2019-07-22T14:15:00.000Z</published>
    <updated>2020-03-13T16:25:04.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="何为Markdown语法"><a href="#何为Markdown语法" class="headerlink" title="何为Markdown语法"></a>何为Markdown语法</h1><blockquote><p>markdown语法，是一种纯文本格式的标记语言，让我们摆脱排版的困扰，专心写作。</p></blockquote><h1 id="Markdown-IDE"><a href="#Markdown-IDE" class="headerlink" title="Markdown IDE"></a>Markdown IDE</h1><blockquote><p>推荐Typora这款IDE，优点如下：</p></blockquote><ul><li>即时排版，不用预览</li><li>支持各种插件，方便扩展</li><li>快捷键方便齐全</li><li>支持导出各种格式，包括word，pdf等。</li><li>界面极其美观，各种主题可选</li></ul><blockquote><p>缺点，我认为除了不支持云笔记，好像没什么缺点。</p></blockquote><h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><p><code>常用的语法，如：标题，有序无序列表，加粗什么的就不举例了，还有数学公式，流程图我几乎用不到，说一下不太常用的几个吧。</code></p><ul><li>单行代码</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`我是单行代码`</span><br></pre></td></tr></table></figure><blockquote><p>效果如下：</p></blockquote><p><code>我是单行代码</code></p><ul><li>java代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">​```java</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello Ryan~"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 效果如下：</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;java</span><br><span class="line">public static void main() &#123;</span><br><span class="line">System.out.println(&quot;Hello Ryan~&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字体加粗、倾斜、加粗倾斜以及删除线</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*倾斜*</span><br><span class="line">**加粗**</span><br><span class="line">***加粗倾斜***</span><br><span class="line">～～删除线～～</span><br></pre></td></tr></table></figure><blockquote><p>效果如下：</p></blockquote><p><em>倾斜</em></p><p><strong>加粗</strong></p><p><strong><em>加粗倾斜</em></strong></p><p><del>删除线</del></p><ul><li>表格</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 姓名 | 年龄 | 性别 |</span><br><span class="line">| ---- | ---- | ---- |</span><br><span class="line">| 张三 | 11   | 男   |</span><br><span class="line">| 李四 | 12   | 女   |</span><br><span class="line">| 王五 | 13   | 男   |</span><br></pre></td></tr></table></figure><blockquote><p>效果如下：</p></blockquote><table><thead><tr><th>姓名</th><th>年龄</th><th>性别</th></tr></thead><tbody><tr><td>张三</td><td>11</td><td>男</td></tr><tr><td>李四</td><td>12</td><td>女</td></tr><tr><td>王五</td><td>13</td><td>男</td></tr></tbody></table><ul><li>图片<figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![美丽的Picture](https://image.zhangjianbing.com/image/picture/002.jpg "夜景")</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>效果如下：</p></blockquote><p><img src="https://image.zhangjianbing.com/image/picture/002.jpg" alt="美丽的Picture" title="区块链"></p><ul><li>超链接<figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Ryan's Blog][1]</span><br><span class="line"></span><br><span class="line">  [1]: https://www.zhangjianbing.com</span><br></pre></td></tr></table></figure><blockquote><p>效果如下：</p></blockquote></li></ul><p><a href="https://www.zhangjianbing.com" target="_blank" rel="noopener">Ryan’s Blog</a></p><ul><li>嵌套列表（换行按Tab键即可）</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 一级列表1</span><br><span class="line">- 二级列表1</span><br><span class="line">- 三级列表1</span><br><span class="line">- 二级列表2</span><br><span class="line">- 一级列表2</span><br></pre></td></tr></table></figure><blockquote><p>效果如下：</p></blockquote><ul><li>一级列表1<ul><li>二级列表1<ul><li>三级列表1</li></ul></li><li>二级列表2</li></ul></li><li>一级列表2</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;何为Markdown语法&quot;&gt;&lt;a href=&quot;#何为Markdown语法&quot; class=&quot;headerlink&quot; title=&quot;何为Markdown语法&quot;&gt;&lt;/a&gt;何为Markdown语法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;markdown语法，是一种纯文本
      
    
    </summary>
    
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="MarkDown" scheme="http://yoursite.com/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>Apache ZooKeeper（二）：intrueduction和常用命令</title>
    <link href="http://yoursite.com/zookeeper/zookeeper-002.html"/>
    <id>http://yoursite.com/zookeeper/zookeeper-002.html</id>
    <published>2019-07-16T06:50:00.000Z</published>
    <updated>2020-03-13T16:23:43.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h1 id="服务端命令"><a href="#服务端命令" class="headerlink" title="服务端命令"></a>服务端命令</h1><blockquote><p>进入bin目录：</p></blockquote><ul><li><code>./zkServer.sh start</code>，除了<code>start</code>还可以加<code>{start|start-foreground|stop|restart|status|upgrade|print-cmd}</code>。<h1 id="客户端命令"><a href="#客户端命令" class="headerlink" title="客户端命令"></a>客户端命令</h1><blockquote><p>连接服务端</p></blockquote></li><li><code>/zkCli.sh</code> 连接本地</li><li><code>./zkCli.sh -server 192.168.1.1:2181</code> 连接远程<blockquote><p>创建普通的节点</p></blockquote></li><li><code>create /zhangjianbing &quot;a boy&quot;</code><blockquote><p>创建临时的节点</p></blockquote></li><li><code>create -e /zhangjianbing &quot;a boy&quot;</code><blockquote><p>创建顺序节点</p></blockquote></li><li><code>create -s /zhangjianbing &quot;a boy&quot;</code><blockquote><p>创建临时顺序节点</p></blockquote></li><li><code>create -s -e /zhangjianbing &quot;a boy&quot;</code><blockquote><p>获取节点内容</p></blockquote></li><li><code>get /zhangjianbing</code><blockquote><p>删除节点内容</p></blockquote></li><li><code>delete /zhangjianbing</code> 适用于该节点下没有子节点</li><li><code>rmr /zhangjianbing</code> 递归删除，若该节点下有子节点，会先删除子节点<blockquote><p>修改节点</p></blockquote></li><li><code>set /zhangjianbing</code><blockquote><p>在临时节点下是不能够创建持久节点的。</p></blockquote><h2 id="get节点内容"><a href="#get节点内容" class="headerlink" title="get节点内容"></a>get节点内容</h2><table><thead><tr><th align="center">字段</th><th align="center">内容</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">a boy</td><td align="center">该节点绑定的值</td><td align="center"></td></tr><tr><td align="center">cZxid</td><td align="center">0x262ea76</td><td align="center">该节点创建时的id</td></tr><tr><td align="center">ctime</td><td align="center">Mon Jul 15 14:27:17 CST 2019</td><td align="center">该节点的创建时间</td></tr><tr><td align="center">mZxid</td><td align="center">0x262ea76</td><td align="center">节点最新一次更新发生时的id</td></tr><tr><td align="center">mtime</td><td align="center">Mon Jul 15 14:27:17 CST 2019</td><td align="center">该节点的修改时间</td></tr><tr><td align="center">pZxid</td><td align="center">0x262ea76</td><td align="center"></td></tr><tr><td align="center">cversion</td><td align="center">0</td><td align="center">其子节点的更新次数</td></tr><tr><td align="center">dataVersion</td><td align="center">0</td><td align="center">该节点数据的更新次数</td></tr><tr><td align="center">aclVersion</td><td align="center">0</td><td align="center">节点ACL(授权信息)的更新次数</td></tr><tr><td align="center">ephemeralOwner</td><td align="center">0x0</td><td align="center">标识持久节点，若非，则为临时节点的sessionId</td></tr><tr><td align="center">dataLength</td><td align="center">5</td><td align="center">节点数据的字节数</td></tr><tr><td align="center">numChildren</td><td align="center">0</td><td align="center">子节点个数</td></tr></tbody></table></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h1 id=&quot;服务端命令&quot;&gt;&lt;a href=&quot;#服务端命令&quot; class=&quot;headerlink&quot; title=&quot;服务端命令&quot;&gt;&lt;/a&gt;服务端命
      
    
    </summary>
    
    
      <category term="zookeeper" scheme="http://yoursite.com/categories/zookeeper/"/>
    
    
      <category term="ZooKeeper" scheme="http://yoursite.com/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>Apache ZooKeeper（一）：standaloned单机版安装</title>
    <link href="http://yoursite.com/zookeeper/zookeeper-001.html"/>
    <id>http://yoursite.com/zookeeper/zookeeper-001.html</id>
    <published>2019-07-15T14:43:00.000Z</published>
    <updated>2020-03-13T16:22:54.192Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文ZooKeeper版本：3.4.14</p></blockquote><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><blockquote><p>官网下载即可：<a href="https://zookeeper.apache.org/documentation.html" target="_blank" rel="noopener">链接地址</a>。</p></blockquote><h1 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h1><blockquote><p>tar -zxvf zookeeper-3.4.14.tar.gz</p></blockquote><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><blockquote><p>默认的配置文件名字：<code>zoo.cfg</code>，可以将<code>conf</code>文件下的<code>zoo_sample.cfg</code>复制一份并重命名为：<code>zoo.cfg</code>，如下：</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The number of milliseconds of each tick</span></span><br><span class="line"><span class="attr">tickTime</span>=<span class="string">2000</span></span><br><span class="line"><span class="comment"># The number of ticks that the initial </span></span><br><span class="line"><span class="comment"># synchronization phase can take</span></span><br><span class="line"><span class="attr">initLimit</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># The number of ticks that can pass between </span></span><br><span class="line"><span class="comment"># sending a request and getting an acknowledgement</span></span><br><span class="line"><span class="attr">syncLimit</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment"># example sakes.</span></span><br><span class="line"><span class="attr">dataDir</span>=<span class="string">/usr/local/zookeeper/zookeeperlogs</span></span><br><span class="line"><span class="comment"># the port at which the clients will connect</span></span><br><span class="line"><span class="attr">clientPort</span>=<span class="string">2181</span></span><br><span class="line"><span class="comment"># the maximum number of client connections.</span></span><br><span class="line"><span class="comment"># increase this if you need to handle more clients</span></span><br><span class="line"><span class="comment">#maxClientCnxns=60</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Be sure to read the maintenance section of the </span></span><br><span class="line"><span class="comment"># administrator guide before turning on autopurge.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The number of snapshots to retain in dataDir</span></span><br><span class="line"><span class="comment">#autopurge.snapRetainCount=3</span></span><br><span class="line"><span class="comment"># Purge task interval in hours</span></span><br><span class="line"><span class="comment"># Set to "0" to disable auto purge feature</span></span><br><span class="line"><span class="comment">#autopurge.purgeInterval=1</span></span><br></pre></td></tr></table></figure><blockquote><p>单机版用默认的配置即可。</p></blockquote><h1 id="服务端启动"><a href="#服务端启动" class="headerlink" title="服务端启动"></a>服务端启动</h1><ul><li><code>./zkServer.sh start</code><blockquote><p>除了<code>start</code>参数，还有：<code>{start|start-foreground|stop|restart|status|upgrade|print-cmd}</code>等参数。</p></blockquote><h1 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h1></li><li>本地连接：<code>./zkCli.sh</code></li><li>远程连接：<code>./zkCli.sh -server 192.168.1.1:2181</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文ZooKeeper版本：3.4.14&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;官网
      
    
    </summary>
    
    
      <category term="zookeeper" scheme="http://yoursite.com/categories/zookeeper/"/>
    
    
      <category term="Zookeeper" scheme="http://yoursite.com/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 2.0 整合 Logback</title>
    <link href="http://yoursite.com/boot/boot-logback.html"/>
    <id>http://yoursite.com/boot/boot-logback.html</id>
    <published>2019-07-09T12:46:00.000Z</published>
    <updated>2020-03-13T16:21:41.962Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们无需关心Logback版本，只需关注Boot版本即可，Parent工程自动集成了Logback。Springboot本身就可以打印日志，为什么还需要规范日志？</p></blockquote><ul><li>日志统一，方便查阅管理。</li><li>日志归档功能。</li><li>日志持久化功能。</li><li>分布式日志查看功能（ELK），方便搜索和查阅。</li></ul><blockquote><p>关于Logback的介绍就略过了，下面进入代码阶段。本文主要有以下几个功能：</p></blockquote><ul><li>重新规定日志输出格式。</li><li>自定义指定包下的日志输出级别。</li><li>按模块输出日志。</li><li>日志异步推送Kafka</li></ul><h1 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM文件</h1><blockquote><p>如果需要将日志持久化到磁盘，则引入如下两个依赖（不需要推送Kafka也可以引入）。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logback-kafka-appender.version</span>&gt;</span>0.2.0-RC1<span class="tag">&lt;/<span class="name">logback-kafka-appender.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">janino.version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">janino.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将日志输出到Kafka --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.danielwegener<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-kafka-appender<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;logback-kafka-appender.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在xml中使用&lt;if condition&gt;的时候用到的jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.janino<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>janino<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;janino.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><blockquote><p>在<code>resource</code>文件夹下有三个配置文件。</p></blockquote><ul><li><code>logback-defaults.xml</code></li><li><code>logback-pattern.xml</code></li><li><code>logback-spring.xml</code></li></ul><blockquote><p><code>logback-spring.xml</code></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"logging/logback-pattern.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"logging/logback-defaults.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>logback-defaults.xml</code></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_FILE"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/spring.log&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志文件的输出路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOG_PATH:-/tmp&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        将日志追加到控制台（默认使用LogBack已经实现好的）</span></span><br><span class="line"><span class="comment">        进入文件，其中&lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/console-appender.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"logback-pattern.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义日志文件大小 超过这个大小会压缩归档 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"INFO_MAX_FILE_SIZE"</span> <span class="attr">value</span>=<span class="string">"100MB"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ERROR_MAX_FILE_SIZE"</span> <span class="attr">value</span>=<span class="string">"100MB"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"TRACE_MAX_FILE_SIZE"</span> <span class="attr">value</span>=<span class="string">"100MB"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"WARN_MAX_FILE_SIZE"</span> <span class="attr">value</span>=<span class="string">"100MB"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义日志文件最长保存时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"INFO_MAX_HISTORY"</span> <span class="attr">value</span>=<span class="string">"9"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ERROR_MAX_HISTORY"</span> <span class="attr">value</span>=<span class="string">"9"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"TRACE_MAX_HISTORY"</span> <span class="attr">value</span>=<span class="string">"9"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"WARN_MAX_HISTORY"</span> <span class="attr">value</span>=<span class="string">"9"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义归档日志文件最大保存大小，当所有归档日志大小超出定义时，会触发删除  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"INFO_TOTAL_SIZE_CAP"</span> <span class="attr">value</span>=<span class="string">"5GB"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ERROR_TOTAL_SIZE_CAP"</span> <span class="attr">value</span>=<span class="string">"5GB"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"TRACE_TOTAL_SIZE_CAP"</span> <span class="attr">value</span>=<span class="string">"5GB"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"WARN_TOTAL_SIZE_CAP"</span> <span class="attr">value</span>=<span class="string">"5GB"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 按照每天生成日志文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"INFO_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当前Log文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 压缩备份设置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/backup/info/info.%d&#123;yyyy-MM-dd&#125;.%i.log.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;INFO_MAX_HISTORY&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;INFO_MAX_FILE_SIZE&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>$&#123;INFO_TOTAL_SIZE_CAP&#125;<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"WARN_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当前Log文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 压缩备份设置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/backup/warn/warn.%d&#123;yyyy-MM-dd&#125;.%i.log.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;WARN_MAX_HISTORY&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;WARN_MAX_FILE_SIZE&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>$&#123;WARN_TOTAL_SIZE_CAP&#125;<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ERROR_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当前Log文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 压缩备份设置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/backup/error/error.%d&#123;yyyy-MM-dd&#125;.%i.log.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;ERROR_MAX_HISTORY&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;ERROR_MAX_FILE_SIZE&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>$&#123;ERROR_TOTAL_SIZE_CAP&#125;<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Kafka的appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"KAFKA"</span> <span class="attr">class</span>=<span class="string">"com.github.danielwegener.logback.kafka.KafkaAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">topic</span>&gt;</span>$&#123;kafka_env&#125;applog_$&#123;spring_application_name&#125;<span class="tag">&lt;/<span class="name">topic</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keyingStrategy</span> <span class="attr">class</span>=<span class="string">"com.github.danielwegener.logback.kafka.keying.HostNameKeyingStrategy"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">deliveryStrategy</span> <span class="attr">class</span>=<span class="string">"com.github.danielwegener.logback.kafka.delivery.AsynchronousDeliveryStrategy"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">producerConfig</span>&gt;</span>bootstrap.servers=$&#123;kafka_broker&#125;<span class="tag">&lt;/<span class="name">producerConfig</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- don't wait for a broker to ack the reception of a batch.  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">producerConfig</span>&gt;</span>acks=0<span class="tag">&lt;/<span class="name">producerConfig</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- wait up to 1000ms and collect log messages before sending them as a batch --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">producerConfig</span>&gt;</span>linger.ms=1000<span class="tag">&lt;/<span class="name">producerConfig</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- even if the producer buffer runs full, do not block the application but start to drop messages --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">producerConfig</span>&gt;</span>max.block.ms=0<span class="tag">&lt;/<span class="name">producerConfig</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Optional parameter to use a fixed partition --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">partition</span>&gt;</span>8<span class="tag">&lt;/<span class="name">partition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"KAFKA_ASYNC"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.AsyncAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"KAFKA"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">condition</span>=<span class="string">'"true".equals(property("kafka_enabled"))'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">then</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"KAFKA_ASYNC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">then</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p></blockquote><ul><li>上面的<code>&lt;partition&gt;8&lt;/partition&gt;</code>指的是将消息发送到哪个分区，如果你主题的分区为0~7，那么会报错，解决办法是要么去掉这个属性，要么指定有效的分区。</li><li><code>HostNameKeyingStrategy</code>是用来指定key的生成策略，我们知道kafka是根据key来判定将消息发送到哪个分区上的，此种是根据主机名来判定，这样带来的好处是每台服务器生成的日志都是在同一个分区上面，从而保证了时间顺序。但默认的是<code>NoKeyKeyingStrategy</code>，会随机分配到各个分区上面，这样带来的坏处是，无法保证日志的时间顺序，不推荐这样来记录日志。</li></ul><blockquote><p><code>logback-pattern.xml</code></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志展示规则，比如彩色日志、异常日志等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"clr"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wex"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wEx"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义日志展示规则 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"ip"</span> <span class="attr">converterClass</span>=<span class="string">"com.ryan.utils.IPAddressConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"module"</span> <span class="attr">converterClass</span>=<span class="string">"com.ryan.utils.ModuleConverter"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 上下文属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"spring_application_name"</span> <span class="attr">source</span>=<span class="string">"spring.application.name"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"server_port"</span> <span class="attr">source</span>=<span class="string">"server.port"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Kafka属性配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"spring_application_name"</span> <span class="attr">source</span>=<span class="string">"spring.application.name"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"kafka_enabled"</span> <span class="attr">source</span>=<span class="string">"ryan.web.logging.kafka.enabled"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"kafka_broker"</span> <span class="attr">source</span>=<span class="string">"ryan.web.logging.kafka.broker"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"kafka_env"</span> <span class="attr">source</span>=<span class="string">"ryan.web.logging.kafka.env"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出的格式如下 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- appID | module |  dateTime | level | requestID | traceID | requestIP | userIP | serverIP | serverPort | processID | thread | location | detailInfo--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- CONSOLE_LOG_PATTERN属性会在console-appender.xml文件中引用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"%clr($&#123;spring_application_name&#125;)&#123;cyan&#125;|%clr(%module)&#123;blue&#125;|%clr(%d&#123;ISO8601&#125;)&#123;faint&#125;|%clr(%p)|%X&#123;requestId&#125;|%X&#123;X-B3-TraceId:-&#125;|%X&#123;requestIp&#125;|%X&#123;userIp&#125;|%ip|$&#123;server_port&#125;|$&#123;PID&#125;|%clr(%t)&#123;faint&#125;|%clr(%.40logger&#123;39&#125;)&#123;cyan&#125;.%clr(%method)&#123;cyan&#125;:%L|%m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- FILE_LOG_PATTERN属性会在logback-defaults.xml文件中引用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"FILE_LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"$&#123;spring_application_name&#125;|%module|%d&#123;ISO8601&#125;|%p|%X&#123;requestId&#125;|%X&#123;X-B3-TraceId:-&#125;|%X&#123;requestIp&#125;|%X&#123;userIp&#125;|%ip|$&#123;server_port&#125;|$&#123;PID&#125;|%t|%.40logger&#123;39&#125;.%method:%L|%m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        将 org/springframework/boot/logging/logback/defaults.xml 文件下的默认logger写过来</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.catalina.startup.DigesterFactory"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.catalina.util.LifecycleBase"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span> <span class="attr">level</span>=<span class="string">"WARN"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.sshd.common.util.SecurityUtils"</span> <span class="attr">level</span>=<span class="string">"WARN"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.tomcat.util.net.NioSelectorPool"</span> <span class="attr">level</span>=<span class="string">"WARN"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.eclipse.jetty.util.component.AbstractLifeCycle"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.validator.internal.util.Version"</span> <span class="attr">level</span>=<span class="string">"WARN"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>自定义获取moudle</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取日志模块的名称</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuleConverter</span> <span class="keyword">extends</span> <span class="title">ClassicConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_LENGTH = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(ILoggingEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.getLoggerName().length() &gt; MAX_LENGTH) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> event.getLoggerName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>自定义获取ip</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取IP地址</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IPAddressConverter</span> <span class="keyword">extends</span> <span class="title">ClassicConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String ipAddress;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ipAddress = InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            log.error(<span class="string">"fetch localhost host address failed"</span>, e);</span><br><span class="line">            ipAddress = <span class="string">"UNKNOWN"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(ILoggingEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ipAddress;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="按模块输出"><a href="#按模块输出" class="headerlink" title="按模块输出"></a>按模块输出</h1><blockquote><p>给<code>@Slf4j</code>加上<code>topic</code>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/portal"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"LogbackController"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogbackController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/gohome"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"buddy,we go home~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义日志级别"><a href="#自定义日志级别" class="headerlink" title="自定义日志级别"></a>自定义日志级别</h1><blockquote><p>如果想打印SQL语句，需要将日志级别设置成<code>debug</code>级别。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logging.path = /tmp</span><br><span class="line">logging.level.com.ryan.trading.account.dao = debug</span><br></pre></td></tr></table></figure><h1 id="推送Kafka"><a href="#推送Kafka" class="headerlink" title="推送Kafka"></a>推送Kafka</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ryan.web.logging.kafka.enabled=true</span><br><span class="line">#多个broker用英文逗号分隔</span><br><span class="line">ryan.web.logging.kafka.broker=127.0.0.1:9092</span><br><span class="line">#创建Kafka的topic时使用</span><br><span class="line">ryan.web.logging.kafka.env=test</span><br></pre></td></tr></table></figure><blockquote><p>Tips<br>| :——— | ———– | ——— |<br>| 名称       | 含义        | 格式      |<br>| AppID      | 应用标识    |           |<br>| Module     | 模块/子系统 |           |<br>| DateTime   | 日期时间    | TimeStamp |<br>| Level      | 日志级别    | Level     |<br>| RequestID  | 请求标识    |           |<br>| TraceID    | 调用链标识  |           |<br>| RequestIP  | 请求IP      | IP        |<br>| UserIP     | 用户IP      | IP        |<br>| ServerIP   | 服务器IP    | IP        |<br>| ServerPort | 服务器端口  | Port      |<br>| ProcessID  | 进程标识    |           |<br>| Thread     | 线程名称    |           |<br>| Location   | 代码位置    |           |<br>| DetailInfo | 详细日志    |           |</p></blockquote><h1 id="启动示例"><a href="#启动示例" class="headerlink" title="启动示例"></a>启动示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">logback-framework-project||<span class="number">2019</span>-<span class="number">07</span>-<span class="number">09</span> <span class="number">21</span>:<span class="number">25</span>:<span class="number">48</span>,<span class="number">135</span>|INFO|||||<span class="number">192.168</span><span class="number">.0</span><span class="number">.102</span>|<span class="number">8080</span>|<span class="number">49877</span>|main|com.ryan.LogbackBootStrap.logStarting:<span class="number">50</span>|Starting LogbackBootStrap on bjw0101020035.lhwork.net with PID <span class="number">49877</span> (/Users/zhangjianbing/learn-note/logback-learn-note/target/classes started by zhangjianbing in /Users/zhangjianbing/learn-note)</span><br><span class="line">logback-framework-project||<span class="number">2019</span>-<span class="number">07</span>-<span class="number">09</span> <span class="number">21</span>:<span class="number">25</span>:<span class="number">48</span>,<span class="number">138</span>|INFO|||||<span class="number">192.168</span><span class="number">.0</span><span class="number">.102</span>|<span class="number">8080</span>|<span class="number">49877</span>|main|com.ryan.LogbackBootStrap.logStartupProfileInfo:<span class="number">652</span>|No active profile set, falling back to <span class="keyword">default</span> profiles: <span class="keyword">default</span></span><br><span class="line">logback-framework-project||<span class="number">2019</span>-<span class="number">07</span>-<span class="number">09</span> <span class="number">21</span>:<span class="number">25</span>:<span class="number">48</span>,<span class="number">248</span>|INFO|||||<span class="number">192.168</span><span class="number">.0</span><span class="number">.102</span>|<span class="number">8080</span>|<span class="number">49877</span>|main|ConfigServletWebServerApplicationContext.prepareRefresh:<span class="number">589</span>|Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@<span class="number">1</span>d2bd371: startup date [Tue Jul <span class="number">09</span> <span class="number">21</span>:<span class="number">25</span>:<span class="number">48</span> CST <span class="number">2019</span>]; root of context hierarchy</span><br><span class="line">logback-framework-project||<span class="number">2019</span>-<span class="number">07</span>-<span class="number">09</span> <span class="number">21</span>:<span class="number">25</span>:<span class="number">50</span>,<span class="number">155</span>|INFO|||||<span class="number">192.168</span><span class="number">.0</span><span class="number">.102</span>|<span class="number">8080</span>|<span class="number">49877</span>|main|o.s.b.w.embedded.tomcat.TomcatWebServer.initialize:<span class="number">91</span>|<span class="function">Tomcat initialized with <span class="title">port</span><span class="params">(s)</span>: 8080 <span class="params">(http)</span></span></span><br><span class="line"><span class="function">logback-framework-project||2019-07-09 21:25:50,249|INFO|||||192.168.0.102|8080|49877|main|o.apache.catalina.core.StandardService.log:180|Starting service [Tomcat]</span></span><br><span class="line"><span class="function">logback-framework-project||2019-07-09 21:25:50,249|INFO|||||192.168.0.102|8080|49877|main|org.apache.catalina.core.StandardEngine.log:180|Starting Servlet Engine: Apache Tomcat/8.5.28</span></span><br><span class="line"><span class="function">logback-framework-project||2019-07-09 21:25:50,256|INFO|||||192.168.0.102|8080|49877|localhost-startStop-1|o.a.catalina.core.AprLifecycleListener.log:180|The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [/Users/zhangjianbing/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.]</span></span><br><span class="line"><span class="function">logback-framework-project||2019-07-09 21:25:50,405|INFO|||||192.168.0.102|8080|49877|localhost-startStop-1|o.a.c.c.C.[Tomcat].[localhost].[/].log:180|Initializing Spring embedded WebApplicationContext</span></span><br><span class="line"><span class="function">logback-framework-project||2019-07-09 21:25:50,406|INFO|||||192.168.0.102|8080|49877|localhost-startStop-1|o.s.web.context.ContextLoader.prepareWebApplicationContext:285|Root WebApplicationContext: initialization completed in 2159 ms</span></span><br><span class="line"><span class="function">logback-framework-project||2019-07-09 21:25:50,566|INFO|||||192.168.0.102|8080|49877|localhost-startStop-1|o.s.b.w.servlet.ServletRegistrationBean.addRegistration:185|Servlet dispatcherServlet mapped to [/]</span></span><br><span class="line"><span class="function">logback-framework-project||2019-07-09 21:25:50,572|INFO|||||192.168.0.102|8080|49877|localhost-startStop-1|o.s.b.w.servlet.FilterRegistrationBean.configure:243|Mapping filter: 'characterEncodingFilter' to: [<span class="comment">/*]</span></span></span><br><span class="line"><span class="function"><span class="comment">logback-framework-project||2019-07-09 21:25:50,573|INFO|||||192.168.0.102|8080|49877|localhost-startStop-1|o.s.b.w.servlet.FilterRegistrationBean.configure:243|Mapping filter: 'hiddenHttpMethodFilter' to: [/*]</span></span></span><br><span class="line"><span class="function"><span class="comment">logback-framework-project||2019-07-09 21:25:50,573|INFO|||||192.168.0.102|8080|49877|localhost-startStop-1|o.s.b.w.servlet.FilterRegistrationBean.configure:243|Mapping filter: 'httpPutFormContentFilter' to: [/*]</span></span></span><br><span class="line"><span class="function"><span class="comment">logback-framework-project||2019-07-09 21:25:50,573|INFO|||||192.168.0.102|8080|49877|localhost-startStop-1|o.s.b.w.servlet.FilterRegistrationBean.configure:243|Mapping filter: 'requestContextFilter' to: [/*]</span></span></span><br><span class="line"><span class="function"><span class="comment">logback-framework-project||2019-07-09 21:25:50,966|INFO|||||192.168.0.102|8080|49877|main|s.w.s.m.m.a.RequestMappingHandlerAdapter.initControllerAdviceCache:567|Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@1d2bd371: startup date [Tue Jul 09 21:25:48 CST 2019]; root of context hierarchy</span></span></span><br><span class="line"><span class="function"><span class="comment">logback-framework-project||2019-07-09 21:25:51,097|INFO|||||192.168.0.102|8080|49877|main|s.w.s.m.m.a.RequestMappingHandlerMapping.register:548|Mapped "&#123;[/portal/gohome]&#125;" onto public void com.ryan.logback.LogbackController.m1()</span></span></span><br><span class="line"><span class="function"><span class="comment">logback-framework-project||2019-07-09 21:25:51,111|INFO|||||192.168.0.102|8080|49877|main|s.w.s.m.m.a.RequestMappingHandlerMapping.register:548|Mapped "&#123;[/error]&#125;" onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.error(javax.servlet.http.HttpServletRequest)</span></span></span><br><span class="line"><span class="function"><span class="comment">logback-framework-project||2019-07-09 21:25:51,113|INFO|||||192.168.0.102|8080|49877|main|s.w.s.m.m.a.RequestMappingHandlerMapping.register:548|Mapped "&#123;[/error],produces=[text/html]&#125;" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)</span></span></span><br><span class="line"><span class="function"><span class="comment">logback-framework-project||2019-07-09 21:25:51,164|INFO|||||192.168.0.102|8080|49877|main|o.s.w.s.handler.SimpleUrlHandlerMapping.registerHandler:373|Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span></span></span><br><span class="line"><span class="function"><span class="comment">logback-framework-project||2019-07-09 21:25:51,165|INFO|||||192.168.0.102|8080|49877|main|o.s.w.s.handler.SimpleUrlHandlerMapping.registerHandler:373|Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span></span></span><br><span class="line"><span class="function"><span class="comment">logback-framework-project||2019-07-09 21:25:51,262|INFO|||||192.168.0.102|8080|49877|main|o.s.w.s.handler.SimpleUrlHandlerMapping.registerHandler:373|Mapped URL path [/**/</span>favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span></span><br><span class="line"><span class="function">logback-framework-project||2019-07-09 21:25:51,540|INFO|||||192.168.0.102|8080|49877|main|o.s.j.e.a.AnnotationMBeanExporter.afterSingletonsInstantiated:434|Registering beans <span class="keyword">for</span> JMX exposure on startup</span></span><br><span class="line"><span class="function">logback-framework-project||2019-07-09 21:25:51,603|INFO|||||192.168.0.102|8080|49877|main|o.s.b.w.embedded.tomcat.TomcatWebServer.start:205|Tomcat started on <span class="title">port</span><span class="params">(s)</span>: 8080 <span class="params">(http)</span> with context path ''</span></span><br><span class="line"><span class="function">logback-framework-project||2019-07-09 21:25:51,608|INFO|||||192.168.0.102|8080|49877|main|com.ryan.LogbackBootStrap.logStarted:59|Started LogbackBootStrap in 5.001 <span class="title">seconds</span> <span class="params">(JVM running <span class="keyword">for</span> <span class="number">7.818</span>)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>全文完，本文用到的appender来自：<a href="https://github.com/danielwegener/logback-kafka-appender" target="_blank" rel="noopener">https://github.com/danielwegener/logback-kafka-appender</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我们无需关心Logback版本，只需关注Boot版本即可，Parent工程自动集成了Logback。Springboot本身就可以打印日志，为什么还需要规范日志？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;日志统一，方便查阅管理。&lt;/l
      
    
    </summary>
    
    
      <category term="boot" scheme="http://yoursite.com/categories/boot/"/>
    
    
      <category term="Boot" scheme="http://yoursite.com/tags/Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 2.0整合Swagger</title>
    <link href="http://yoursite.com/boot/boot-swagger.html"/>
    <id>http://yoursite.com/boot/boot-swagger.html</id>
    <published>2019-07-08T12:48:00.000Z</published>
    <updated>2020-03-13T16:21:06.648Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Swagger版本2.9.2，Lombok版本1.16.20，同时这篇利用了Spring自动装配的方式来整合Swagger，相对来说比较有趣。</p></blockquote><h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger-ui.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h1><blockquote><p>此配置类并没有加 <code>@Configuration</code> 注解，是因为要使用自动装配的方式导入配置类。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger config file</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.application.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String appName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SwaggerProperties swaggerProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">userPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Docket docket = <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .useDefaultResponseMessages(<span class="keyword">false</span>)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(swaggerProperties.getBasePackage()))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(appName)</span><br><span class="line">                .description(swaggerProperties.getDescription())</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(</span><br><span class="line">                        swaggerProperties.getContact().getName(),</span><br><span class="line">                        swaggerProperties.getContact().getUrl(),</span><br><span class="line">                        swaggerProperties.getContact().getEmail()))</span><br><span class="line">                .version(swaggerProperties.getVersion())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h1><blockquote><p>利用<code>@ConfigurationProperties</code>定义好Swagger属性的前缀，以及错误报告功能。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger properties</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"ryan.web.swagger"</span>, ignoreUnknownFields = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"squid:S1068"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 联系方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Contact contact = <span class="keyword">new</span> Contact();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否启用swagger</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean enabled = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文档描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String description = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扫描路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String basePath = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扫描路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String basePackage = <span class="string">"com.ryan"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前版本号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String version = <span class="string">"v1.0"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Contact</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String url;</span><br><span class="line">        <span class="keyword">private</span> String email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自动配置类"><a href="#自动配置类" class="headerlink" title="自动配置类"></a>自动配置类</h1><blockquote><p>在 <code>resource</code> 下创建 <code>META-INF</code> 文件夹，并在其中添加 <code>spring.factories</code> 文件，因为我们知道<code>@SpringApplication</code> 注解是一个复合注解，在SpringBoot启动的时候，会将<code>@EnableAutoConfiguration</code>注解中复合条件的类注入到容器中去，另外我们还利用类属性<code>ryan.web.swagger.enabled</code>对其进行开关作用，用到的注解是：<code>@ConditionalOnProperty</code>。</p></blockquote><h2 id="spring-factories"><a href="#spring-factories" class="headerlink" title="spring.factories"></a>spring.factories</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configuration</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.ryan.web.config.SwaggerAutoConfiguration</span><br></pre></td></tr></table></figure><h2 id="自动配置类-1"><a href="#自动配置类-1" class="headerlink" title="自动配置类"></a>自动配置类</h2><blockquote><p>在Springboot启动的时候，如果条件成立<code>@ConditionalOnProperty</code>，则向容器中注入<code>SwaggerAutoConfiguration</code>，同时再次向容器中注入了<code>SwaggerConfig</code>和<code>SwaggerProperties</code>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangjianbing</span></span><br><span class="line"><span class="comment"> * time 2019/7/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Import</span>(SwaggerConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ConditionalOnProperty("ryan.web.swagger.enabled")</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(SwaggerProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SwaggerAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Spring Auto Configuration</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port=8080</span><br><span class="line">spring.application.name=swagger-config-custom</span><br><span class="line">ryan.web.swagger.enabled=true</span><br><span class="line">ryan.web.swagger.contact.name=ryan</span><br><span class="line">ryan.web.swagger.contact.url=https://www.zhangjianbing.com</span><br><span class="line">ryan.web.swagger.contact.email=zhangjianbing777@163.com</span><br><span class="line">ryan.web.swagger.basePackage="com.ryan.web"</span><br><span class="line">ryan.web.swagger.description="Swagger Test Project"</span><br><span class="line">ryan.web.swagger.version="v1.0"</span><br></pre></td></tr></table></figure><blockquote><p>全文完</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Swagger版本2.9.2，Lombok版本1.16.20，同时这篇利用了Spring自动装配的方式来整合Swagger，相对来说比较有趣。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;引入依赖&quot;&gt;&lt;a href=&quot;#引入依赖&quot; clas
      
    
    </summary>
    
    
      <category term="boot" scheme="http://yoursite.com/categories/boot/"/>
    
    
      <category term="Boot" scheme="http://yoursite.com/tags/Boot/"/>
    
  </entry>
  
  <entry>
    <title>Kafka常见问题及使用总结（五）</title>
    <link href="http://yoursite.com/kafka/kafka-005.html"/>
    <id>http://yoursite.com/kafka/kafka-005.html</id>
    <published>2019-06-24T13:53:00.000Z</published>
    <updated>2020-03-13T16:20:19.697Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文基于Kafka2.2.0版本</p></blockquote><h1 id="Kafka-Tools"><a href="#Kafka-Tools" class="headerlink" title="Kafka Tools"></a>Kafka Tools</h1><p><strong>Kafka的可视化工具，使用起来很棒</strong>，<a href="https://www.cnblogs.com/frankdeng/p/9452982.html" target="_blank" rel="noopener">参考文章</a>。</p><h1 id="Kafka-Linux基本命令"><a href="#Kafka-Linux基本命令" class="headerlink" title="Kafka Linux基本命令"></a>Kafka Linux基本命令</h1><blockquote><p>进入Kafka的安装目录下的 <code>bin</code> 目录下，执行以下命令。（其他的命令基本不用，因为Kafka Tools都可以实现）</p></blockquote><ul><li>启动ZK和Kafka<ul><li><code>./zookeeper-server-start.sh ../config/zookeeper.properties &amp;</code></li><li><code>./kafka-server-start.sh ../config/server.properties &amp;</code></li></ul></li><li>查看所有的消费者群组<ul><li><code>kafka-consumer-groups.sh --bootstrap-server localhost:9090 --list</code></li></ul></li><li>查看指定群组下的所有消费者<ul><li><code>kafka-consumer-groups.sh --bootstrap-server localhost:9090 --describe --group your-group-name</code></li></ul></li><li>查看主题的详细信息<ul><li><code>kafka-topics.sh --zookeeper localhost:2181 --describe --topic your-topic-name</code></li></ul></li><li>增加分区<ul><li><code>kafka-topics.sh --zookeeper localhost:2181 --alter --topic your-topic-name --partitions 3</code></li></ul></li><li>列出所有主题<ul><li><code>kafka-topics.sh --list --zookeeper localhost:2181</code><h1 id="Kafka基本概念"><a href="#Kafka基本概念" class="headerlink" title="Kafka基本概念"></a>Kafka基本概念</h1><h2 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h2><blockquote><p>一个Kafka服务叫做一个Broker，跟Endpoint很相似，一群Broker组成一个Kafka集群。</p></blockquote><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><blockquote><p>主题（Topic）相当于消息的类别，一个对外服务的Kafka可以有很多很多的主题，且不能重复。</p></blockquote><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><blockquote><p>分区（Partition）相当于对某个主题的划分，一个主题可以有多个分区，分区在Kafka主题创建的时候就已经划分好了的，后续可以增加此主题分区的个数，但分区是不能删除的。新来的消息会被追加到分区的后面，先进先出原则消费消息。</p></blockquote><h2 id="偏移量"><a href="#偏移量" class="headerlink" title="偏移量"></a>偏移量</h2><blockquote><p>偏移量（Offset），Kafka的消费者，每次消费完消息后，都会将消息的偏移量提交给Kafka，由此记录自己读到了哪里，待新消息再来的时候，从最新的消息开始读取。</p></blockquote><h2 id="分区副本"><a href="#分区副本" class="headerlink" title="分区副本"></a>分区副本</h2><blockquote><p>分区副本（Replica，为了提高可用性），一个分区可有一个或多个副本，Leader副本用于接收读写请求，Follower副本用于做备份，一个分区只能有一个Leader和0个或多个Follower，Leader副本处理分区的所有读写请求并维护自身以及Follower副本的状态。当Leader副本失效时，会从Follower副本中选举一个新的Leader副本对外提供读写服务。Replica个数不能大于Broker的个数。</p></blockquote><h2 id="其他概念"><a href="#其他概念" class="headerlink" title="其他概念"></a>其他概念</h2></li></ul></li><li>由于一个主题下是有多个分区的，Kafka是利用分区器来对消息进行分区的，而分区器是根据传进来的Key来计算将消息分到哪个区，所以同一个主题下的消息几乎无法保证消息的顺序性，但如果仍然需要顺序，只能将分区个数设置为一个。</li><li>一个分区只能有一个消费者，但一个消费者可以同时拥有多个分区，所以得出，分区的个数，一定不要小于消费者的个数，因为当分区数比消费者个数小的时候，总会有消费者消费不到消息，引发错乱。</li><li>生产者是线程安全的，而消费者是非线程安全的。</li><li>消费者群组是用来保证同群组下的消费者，只能消费一次消息，但不同群组下的消费者可以共同消费一个消息。</li><li>Kafka是由Follower周期性或者尝试去Pull过来，写是都往Leader上写，读也只在Leader上读，Flower只是数据的一个备份，保证Leader被挂掉后顶上来，并不往外提供服务。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文基于Kafka2.2.0版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Kafka-Tools&quot;&gt;&lt;a href=&quot;#Kafka-Tools&quot; class=&quot;headerlink&quot; title=&quot;Kafka Tools&quot;&gt;&lt;/a&gt;Ka
      
    
    </summary>
    
    
      <category term="kafka" scheme="http://yoursite.com/categories/kafka/"/>
    
    
      <category term="Kafka" scheme="http://yoursite.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 2.0 整合Kafka（四）</title>
    <link href="http://yoursite.com/kafka/kafka-004.html"/>
    <id>http://yoursite.com/kafka/kafka-004.html</id>
    <published>2019-06-23T13:25:00.000Z</published>
    <updated>2020-03-13T16:19:43.739Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基于Kafka 2.2.0，SpringBoot 2.0</p></blockquote><h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#============== kafka ===================</span><br><span class="line"># 指定kafka server的地址，集群配多个，中间，逗号隔开</span><br><span class="line">spring.kafka.bootstrap-servers=47.104.129.162:9090</span><br><span class="line"></span><br><span class="line">#=============== provider  =======================</span><br><span class="line"># 写入失败时，重试次数。当leader节点失效，一个repli节点会替代成为leader节点，此时可能出现写入失败，</span><br><span class="line"># 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失。</span><br><span class="line">spring.kafka.producer.retries=0</span><br><span class="line"># 每次批量发送消息的数量,produce积累到一定数据，一次发送</span><br><span class="line">spring.kafka.producer.batch-size=16384</span><br><span class="line"># produce积累数据一次发送，缓存大小达到buffer.memory就发送数据</span><br><span class="line">spring.kafka.producer.buffer-memory=33554432</span><br><span class="line">#procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：</span><br><span class="line">#acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。</span><br><span class="line">#acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。</span><br><span class="line">#acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。</span><br><span class="line">#可以设置的值为：all, -1, 0, 1</span><br><span class="line">spring.kafka.producer.acks=1</span><br><span class="line"># 指定消息key和消息体的编解码方式</span><br><span class="line">spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line"></span><br><span class="line">#=============== consumer  =======================</span><br><span class="line"></span><br><span class="line"># 指定默认消费者group id --&gt; 由于在kafka中，同一组中的consumer不会读取到同一个消息，依靠groud.id设置组名</span><br><span class="line">spring.kafka.consumer.group-id=ryan_group</span><br><span class="line"># smallest和largest才有效，如果smallest重新0开始读取，如果是largest从logfile的offset读取。一般情况下我们都是设置smallest</span><br><span class="line">spring.kafka.consumer.auto-offset-reset=earliest</span><br><span class="line"># enable.auto.commit:true --&gt; 设置自动提交offset</span><br><span class="line">spring.kafka.consumer.enable-auto-commit=true</span><br><span class="line">#如果'enable.auto.commit'为true，则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000。</span><br><span class="line">spring.kafka.consumer.auto-commit-interval=100</span><br><span class="line"></span><br><span class="line"># 指定消息key和消息体的编解码方式</span><br><span class="line">spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer</span><br></pre></td></tr></table></figure><h1 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/kafka"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/sendMessage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        kafkaTemplate.send(TOPIC_1, <span class="string">"luyao_key"</span>, <span class="string">"hello world!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"消息已经成功发送。"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> record         消息主体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> acknowledgment 控制消息是否自动提交偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Ryan Zhang</span></span><br><span class="line"><span class="comment">     * Date: 2019/6/23</span></span><br><span class="line"><span class="comment">     * From: https://www.zhangjianbing.com</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@KafkaListener</span>(topics = TOPIC_1)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(ConsumerRecord&lt;String, String&gt; record)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"偏移量："</span> + record.offset());</span><br><span class="line">        System.out.println(<span class="string">"主题："</span> + record.topic());</span><br><span class="line">        System.out.println(<span class="string">"消息key："</span> + record.key());</span><br><span class="line">        System.out.println(<span class="string">"消息内容："</span> + record.value());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;基于Kafka 2.2.0，SpringBoot 2.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;引入依赖&quot;&gt;&lt;a href=&quot;#引入依赖&quot; class=&quot;headerlink&quot; title=&quot;引入依赖&quot;&gt;&lt;/a&gt;引入依赖&lt;/h1&gt;&lt;f
      
    
    </summary>
    
    
      <category term="kafka" scheme="http://yoursite.com/categories/kafka/"/>
    
    
      <category term="Kafka" scheme="http://yoursite.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka自定义序列化器和分区器（三）</title>
    <link href="http://yoursite.com/kafka/kafka-003.html"/>
    <id>http://yoursite.com/kafka/kafka-003.html</id>
    <published>2019-06-16T13:35:00.000Z</published>
    <updated>2020-03-13T16:18:53.672Z</updated>
    
    <content type="html"><![CDATA[<p>待完成。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;待完成。。。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="kafka" scheme="http://yoursite.com/categories/kafka/"/>
    
    
      <category term="Kafka" scheme="http://yoursite.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka Native Api（二）</title>
    <link href="http://yoursite.com/kafka/kafka-002.html"/>
    <id>http://yoursite.com/kafka/kafka-002.html</id>
    <published>2019-06-16T09:50:00.000Z</published>
    <updated>2020-03-13T16:17:49.008Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基于 Kafka 版本 2.2.0，Kafka原生API</p></blockquote><h1 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ryan Zhang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: ProducerMain</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Kafka Producer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/6/16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> https://www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 注册Kafka服务所在地址，如果是集群配置，官方推荐写两个到三个，但只写一个也没问题，因为kafka会自动</span></span><br><span class="line">        <span class="comment">// 从一个endpoint上读取所能读到的所有endpoints信息</span></span><br><span class="line">        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">"47.104.129.162:9090"</span>);</span><br><span class="line">        <span class="comment">// 设置key和value的序列化方式</span></span><br><span class="line">        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 创建生产者实例</span></span><br><span class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(properties);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 指定消息的主题，key以及消息体（value）</span></span><br><span class="line">            ProducerRecord&lt;String, String&gt; producerRecord = <span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">"ryan_topic"</span>, <span class="string">"ryan"</span>, <span class="string">"hello_world"</span>);</span><br><span class="line">            <span class="comment">// 异步发送消息</span></span><br><span class="line">            producer.send(producerRecord, <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(RecordMetadata metadata, Exception exception)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> != exception) &#123;</span><br><span class="line">                        System.out.println(exception.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> != metadata) &#123;</span><br><span class="line">                        System.out.println(metadata.topic() + <span class="string">"----"</span> + metadata.offset());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            System.out.println(<span class="string">"生产者消息已经发送～"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            producer.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果直接调用send函数，是无法知道发送成功与否的，所以需要传入一个回调函数，它的作用就是当消息发送成功，会返回一个metadata，如果异常，会返回exception。还可以直接用同步非阻塞的方法，send函数返回的是一个Future，利用get函数来获取返回结果。推荐使用Callback的方法。</p></blockquote><h1 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ryan Zhang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: ConsumerMain</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Kafka consumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/6/16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> https://www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 注册Kafka服务所在地址，如果是集群配置，官方推荐写两个到三个，但只写一个也没问题，因为kafka会自动</span></span><br><span class="line">        <span class="comment">// 从一个endpoint上读取所能读到的所有endpoints信息</span></span><br><span class="line">        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">"47.104.129.162:9090"</span>);</span><br><span class="line">        <span class="comment">// 设置key和value的序列化方式</span></span><br><span class="line">        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 加入消费者群组</span></span><br><span class="line">        properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">"ryan_group"</span>);</span><br><span class="line">        <span class="comment">// 创建消费者实例</span></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(properties);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 订阅主题</span></span><br><span class="line">            consumer.subscribe(Collections.singletonList(<span class="string">"ryan_topic"</span>));</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 不断从Kafka上拉取数据</span></span><br><span class="line">                ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">500</span>);</span><br><span class="line">                <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                    System.out.println(String.format(<span class="string">"消息主题：%s，分区：%d，偏移量：%d，key：%s，value：%s"</span>,</span><br><span class="line">                            record.topic(), record.partition(), record.offset(), record.key(), record.value()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            consumer.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h1><ul><li>在启动Kafka的时候抛出一个异常<code>OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c0000000, 1073741824, 0) failed; error=&#39;Cannot allocate memory&#39; (errno=12)</code> <ul><li>解决方法是将 <code>kafka-server-start.sh</code> 中<code>export KAFKA_HEAP_OPTS=&quot;-Xmx1G -Xms1G&quot;</code>改为<code>export KAFKA_HEAP_OPTS=&quot;-Xmx256M -Xms128M&quot;</code></li></ul></li><li>在生产者发送或者消费者消费消息的时候，报连接超时异常，超过6000ms，可能是<code>server.properties</code>配置文件中的<code>advertised.listeners</code> 没有打开，默认是关闭的，只监听本地，需要告诉生产者或消费者去发送、监听到哪个远程Kafka。 <h1 id="消息的发送与接收"><a href="#消息的发送与接收" class="headerlink" title="消息的发送与接收"></a>消息的发送与接收</h1></li><li>启动Zookeeper</li><li>启动Kafka</li></ul><blockquote><p>此种方法是Kafka不借助Spring来实现最基本的消息发送和接收，Spring的底层也是为我们包装了这两种方法。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;基于 Kafka 版本 2.2.0，Kafka原生API&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;生产者&quot;&gt;&lt;a href=&quot;#生产者&quot; class=&quot;headerlink&quot; title=&quot;生产者&quot;&gt;&lt;/a&gt;生产者&lt;/h1&gt;&lt;figur
      
    
    </summary>
    
    
      <category term="kafka" scheme="http://yoursite.com/categories/kafka/"/>
    
    
      <category term="Kafka" scheme="http://yoursite.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka环境搭建（一）</title>
    <link href="http://yoursite.com/kafka/kafka-001.html"/>
    <id>http://yoursite.com/kafka/kafka-001.html</id>
    <published>2019-06-16T09:00:00.000Z</published>
    <updated>2020-03-13T16:17:10.020Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基于Kafka版本2.2.0</p></blockquote><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><blockquote><p>Kafka原本LinkedIn公司内部用来保存消息以及流处理的开源产品，基于Scala语言编写，它天生就是分布式的，所以配置分布式非常的简单。作为消息中间件仅是它其中一个作用，它主要的还是消息的保存，以及流处理，类似Flink、Storm、Spark，以及阿里内部的Blink等。</p></blockquote><h1 id="简单安装、基本配置"><a href="#简单安装、基本配置" class="headerlink" title="简单安装、基本配置"></a>简单安装、基本配置</h1><blockquote><p><a href="http://kafka.apache.org/downloads" target="_blank" rel="noopener">Kafka官方下载地址</a>，Kafka对于Zookeeper是强依赖的，所以必须启用Zookeeper，下载后的压缩文件中内置了Zookeeper，使用它即可，生产环境建议搭建Zookeeper集群。</p></blockquote><ul><li>解压缩：<code>tar -zxvf kafka_2.12-2.2.0.tgz</code></li><li>config文件夹中，有Kafka的配置文件<code>server.properties</code>和Zookeeper的配置文件<code>zookeeper.properties</code></li><li><code>server.properties</code>配置文件如下，重要参数：<ul><li><code>broker.id</code> 每个Kafka应用叫一个broker，在一个集群中，保证此id不同即可。</li><li><code>listeners</code> Kafka应用的端口号</li><li><code>advertised.listeners</code> 告知生产者和消费者Kafka的地址是什么，默认是localhost，一般远程链接需要打开。</li><li><code>log.dirs</code> 日志存放的地址。</li><li><code>log.retention.hours</code> 日志存留的时间。</li><li><code>zookeeper.connect</code> ZK链接地址，多个用逗号隔开。<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################# Message Policy #############################</span></span><br><span class="line"><span class="comment"># 消息默认大小，大约1M</span></span><br><span class="line"><span class="comment"># message.max.bytes=1048576</span></span><br><span class="line"><span class="comment">############################# Server Basics #############################</span></span><br><span class="line"><span class="comment"># The id of the broker. This must be set to a unique integer for each broker.</span></span><br><span class="line"><span class="meta">broker.id</span>=<span class="string">0</span></span><br><span class="line"><span class="comment">############################# Socket Server Settings #############################</span></span><br><span class="line"><span class="comment"># Kafka监听的端口号，默认是9092，在同一个服务器上启用多个Kafka的时候需要修改这个</span></span><br><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://:9090</span></span><br><span class="line"><span class="meta">advertised.listeners</span>=<span class="string">PLAINTEXT://47.104.129.162:9090</span></span><br><span class="line"><span class="meta">num.network.threads</span>=<span class="string">3</span></span><br><span class="line"><span class="comment"># The number of threads that the server uses for processing requests, which may include disk I/O</span></span><br><span class="line"><span class="meta">num.io.threads</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># The send buffer (SO_SNDBUF) used by the socket server</span></span><br><span class="line"><span class="meta">socket.send.buffer.bytes</span>=<span class="string">102400</span></span><br><span class="line"><span class="comment"># The receive buffer (SO_RCVBUF) used by the socket server</span></span><br><span class="line"><span class="meta">socket.receive.buffer.bytes</span>=<span class="string">102400</span></span><br><span class="line"><span class="comment"># The maximum size of a request that the socket server will accept (protection against OOM)</span></span><br><span class="line"><span class="meta">socket.request.max.bytes</span>=<span class="string">104857600</span></span><br><span class="line"><span class="comment">############################# Log Basics #############################</span></span><br><span class="line"><span class="comment"># Kafka的日志记录目录，可以有多个，用逗号分隔即可</span></span><br><span class="line"><span class="meta">log.dirs</span>=<span class="string">/usr/local/kafka/kafka-logs-broker0</span></span><br><span class="line"><span class="comment"># 创建主题的时候，默认创建的主题个数，如何创建合适的分区数量？</span></span><br><span class="line"><span class="comment"># 假如，Kafka每秒接收1G（1000M）数据，每个消费者每秒处理50M数据，那需要20个分区</span></span><br><span class="line"><span class="meta">num.partitions</span>=<span class="string">3</span></span><br><span class="line"><span class="comment"># 主要是在Kafka启动的时候，用于读取每个日志目录所用的线程数目，读取完毕后会自行关闭，</span></span><br><span class="line"><span class="comment"># 所以完全可以根据机器性能设置大一些，一般一个日志目录设置2个即可。</span></span><br><span class="line"><span class="meta">num.recovery.threads.per.data.dir</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Internal Topic Settings  #############################</span></span><br><span class="line"><span class="comment"># The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"</span></span><br><span class="line"><span class="comment"># For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.</span></span><br><span class="line"><span class="meta">offsets.topic.replication.factor</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">transaction.state.log.replication.factor</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">transaction.state.log.min.isr</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Log Retention Policy #############################</span></span><br><span class="line"><span class="comment"># 日志默认保存的时间，7天，这个日志删除时间必须要等分区日志文件大小达到规定值的时候才开始计算</span></span><br><span class="line"><span class="meta">log.retention.hours</span>=<span class="string">168</span></span><br><span class="line"><span class="comment"># A size-based retention policy for logs. Segments are pruned from the log unless the remaining</span></span><br><span class="line"><span class="comment"># segments drop below log.retention.bytes. Functions independently of log.retention.hours.</span></span><br><span class="line"><span class="comment"># 每个分区日志文件大小，默认1G，-1则为无限大</span></span><br><span class="line"><span class="comment"># log.retention.bytes=1073741824</span></span><br><span class="line"><span class="comment"># The maximum size of a log segment file. When this size is reached a new log segment will be created.</span></span><br><span class="line"><span class="comment"># 每个分区日志片段文件大小，默认1G</span></span><br><span class="line"><span class="comment"># log.segment.bytes=1073741824</span></span><br><span class="line"><span class="meta">log.segment.bytes</span>=<span class="string">104857600</span></span><br><span class="line"><span class="comment"># The interval at which log segments are checked to see if they can be deleted according</span></span><br><span class="line"><span class="comment"># to the retention policies</span></span><br><span class="line"><span class="meta">log.retention.check.interval.ms</span>=<span class="string">300000</span></span><br><span class="line"><span class="comment">############################# Zookeeper #############################</span></span><br><span class="line"><span class="comment"># Kafka连接的ZK地址，prod环境尽量不使用内置的ZK，支持集群部署，逗号分隔。</span></span><br><span class="line"><span class="meta">zookeeper.connect</span>=<span class="string">47.104.129.162:2181</span></span><br><span class="line"><span class="comment"># Timeout in ms for connecting to zookeeper</span></span><br><span class="line"><span class="meta">zookeeper.connection.timeout.ms</span>=<span class="string">6000</span></span><br><span class="line"><span class="comment">############################ Group Coordinator Settings #############################</span></span><br><span class="line"><span class="meta">group.initial.rebalance.delay.ms</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure></li></ul></li><li><code>zookeeper.properties</code>文件如下：<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dataDir</span>=<span class="string">/usr/local/kafka/zookeeper-log</span></span><br><span class="line"><span class="attr">clientPort</span>=<span class="string">2181</span></span><br><span class="line"><span class="comment"># 非生产配置，不用对链接ip进行配置</span></span><br><span class="line"><span class="attr">maxClientCnxns</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure><blockquote><p>如果想搭建Kafka集群（分布在不同机器上），只需修改一个参数即可：</p></blockquote></li><li>broker.id 每个机器保证不同id<blockquote><p>至此，Kafka的Linux环境就搭建完了，相关Linux操作Kafka命令，请参考<a href="http://kafka.apache.org/quickstart" target="_blank" rel="noopener">Quickstart</a></p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;基于Kafka版本2.2.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="kafka" scheme="http://yoursite.com/categories/kafka/"/>
    
    
      <category term="Kafka" scheme="http://yoursite.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Bloom Filter 原理分析</title>
    <link href="http://yoursite.com/interview/interview-bloomfilter.html"/>
    <id>http://yoursite.com/interview/interview-bloomfilter.html</id>
    <published>2019-06-13T07:56:00.000Z</published>
    <updated>2020-03-13T16:15:53.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="布隆过滤器？"><a href="#布隆过滤器？" class="headerlink" title="布隆过滤器？"></a>布隆过滤器？</h1><h1 id="布隆过滤器原理"><a href="#布隆过滤器原理" class="headerlink" title="布隆过滤器原理"></a>布隆过滤器原理</h1><p><img src="https://image.zhangjianbing.com/article/picture/bloomfilter.png#mirages-width=974&mirages-height=621&mirages-cdn-type=1&shadow" alt="请输入图片描述"></p><h1 id="适用场景-优缺点"><a href="#适用场景-优缺点" class="headerlink" title="适用场景(优缺点)"></a>适用场景(优缺点)</h1><h1 id="增强版过滤器"><a href="#增强版过滤器" class="headerlink" title="增强版过滤器"></a>增强版过滤器</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;布隆过滤器？&quot;&gt;&lt;a href=&quot;#布隆过滤器？&quot; class=&quot;headerlink&quot; title=&quot;布隆过滤器？&quot;&gt;&lt;/a&gt;布隆过滤器？&lt;/h1&gt;&lt;h1 id=&quot;布隆过滤器原理&quot;&gt;&lt;a href=&quot;#布隆过滤器原理&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="interview" scheme="http://yoursite.com/categories/interview/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 2.0 单元测试</title>
    <link href="http://yoursite.com/boot/boot-ut.html"/>
    <id>http://yoursite.com/boot/boot-ut.html</id>
    <published>2019-06-09T12:58:00.000Z</published>
    <updated>2020-03-13T16:14:45.212Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>Springboot＋Junit＋Mockito</code> 已经被集成到了 <code>springboot-test</code> 测试start中了。</p></blockquote><h1 id="单测Controller、Service、Dao"><a href="#单测Controller、Service、Dao" class="headerlink" title="单测Controller、Service、Dao"></a>单测Controller、Service、Dao</h1><blockquote><p>在Controller中，一般需要注入Service，或者调用远程服务，比如这样：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IContentService contentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICommentService commentService;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果不启动服务，这些接口是不会注入到容器中的，我们需要对这些接口进行Mock，IndexController单元测试如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(MockitoJUnitRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">IndexControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> IndexController indexController;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> IContentService contentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> ICommentService commentService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义页面,如：前台关于页面&lt;单元测试&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pageTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Contents contents1 = <span class="keyword">new</span> Contents();</span><br><span class="line">        contents1.setAllowComment(<span class="number">1</span>);</span><br><span class="line">        contents1.setCid(<span class="number">1</span>);</span><br><span class="line">        contents1.setHits(<span class="number">2</span>);</span><br><span class="line">        when(contentService.getContentBySlug(any(String<span class="class">.<span class="keyword">class</span>))).<span class="title">thenReturn</span>(<span class="title">contents1</span>)</span>;</span><br><span class="line">        when(contentService.updateContent(any(Contents<span class="class">.<span class="keyword">class</span>))).<span class="title">thenReturn</span>(<span class="title">true</span>)</span>;      </span><br><span class="line">        when(commentService.getCommentsListByContentId(any(Integer<span class="class">.<span class="keyword">class</span>),<span class="title">any</span>(<span class="title">Integer</span>.<span class="title">class</span>),</span></span><br><span class="line"><span class="class">               <span class="title">any</span>(<span class="title">Integer</span>.<span class="title">class</span>))).<span class="title">thenReturn</span>(<span class="title">new</span> <span class="title">PageInfo</span>&lt;<span class="title">Comments</span>&gt;())</span>;</span><br><span class="line">        HttpServletRequest request = <span class="keyword">new</span> MockHttpServletRequest();</span><br><span class="line">        indexController.page(<span class="string">"article"</span>, <span class="string">"11"</span>, request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@InjectMocks</code> : 创建一个实例，其余用 <code>@Mock</code> 注解创建的 <code>Mock</code> 将被注入到用该实例中。</li><li><code>@Mock</code> : 创建一个 <code>Mock</code>。</li></ul><h1 id="连测Controller、Service、Dao"><a href="#连测Controller、Service、Dao" class="headerlink" title="连测Controller、Service、Dao"></a>连测Controller、Service、Dao</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Springboot＋Junit＋Mockito&lt;/code&gt; 已经被集成到了 &lt;code&gt;springboot-test&lt;/code&gt; 测试start中了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;单测Controller
      
    
    </summary>
    
    
      <category term="boot" scheme="http://yoursite.com/categories/boot/"/>
    
    
      <category term="Boot" scheme="http://yoursite.com/tags/Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 2.0深度实践：理解嵌入式Web容器</title>
    <link href="http://yoursite.com/boot/boot-webcontainer.html"/>
    <id>http://yoursite.com/boot/boot-webcontainer.html</id>
    <published>2019-04-27T13:46:00.000Z</published>
    <updated>2020-03-13T16:13:58.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="嵌入式Servlet-Web容器"><a href="#嵌入式Servlet-Web容器" class="headerlink" title="嵌入式Servlet Web容器"></a>嵌入式Servlet Web容器</h1><blockquote><p>根据Spring Boot 2.0官方文档，知道Spring Boot 支持三种嵌入式Servlet容器。</p></blockquote><table><thead><tr><th align="center">Name</th><th align="center">Servlet Version</th></tr></thead><tbody><tr><td align="center">Tomcat 8.5</td><td align="center">3.1</td></tr><tr><td align="center">Jetty 9.4</td><td align="center">3.1</td></tr><tr><td align="center">Undertow 1.4</td><td align="center">3.1</td></tr></tbody></table><blockquote><p>Spring Boot 2.0 延续了 Spring Boot 1.5 支持三种嵌入式Servlet容器类型的特性，Spring Boot 1.x 兼容Servlet 和 Java 的版本更低一些，即 Servlet 3.0+ 和 Java 6+。</p></blockquote><h2 id="Tomcat作为嵌入式Servlet-Web容器"><a href="#Tomcat作为嵌入式Servlet-Web容器" class="headerlink" title="Tomcat作为嵌入式Servlet Web容器"></a>Tomcat作为嵌入式Servlet Web容器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>spring-boot-starter-web</code> 间接的引入了Tomcat的依赖，表明它是一个Web工程，默认的端口是8080。</p></blockquote><h2 id="Jetty作为嵌入式Servlet-Web容器"><a href="#Jetty作为嵌入式Servlet-Web容器" class="headerlink" title="Jetty作为嵌入式Servlet Web容器"></a>Jetty作为嵌入式Servlet Web容器</h2><blockquote><p>当项目想使用Jetty作为Servlet容器的时候，只需要添加相应的jar包即可，比如Jetty：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>但是，<code>spring-boot-starter-web</code> 默认引入了Tomcat作为Servlet容器，如果想使用Jetty，需要将Tomcat排除掉，比如：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 排除tomcat --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用Jetty作为Servlet容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Undertow作为嵌入式Servlet-Web容器"><a href="#Undertow作为嵌入式Servlet-Web容器" class="headerlink" title="Undertow作为嵌入式Servlet Web容器"></a>Undertow作为嵌入式Servlet Web容器</h2><blockquote><p>引入的方法同Jetty</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 排除tomcat --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用Undertow作为Servlet容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="嵌入式Reactive-Web容器"><a href="#嵌入式Reactive-Web容器" class="headerlink" title="嵌入式Reactive Web容器"></a>嵌入式Reactive Web容器</h1><h2 id="Jetty作为Reactive-Web容器"><a href="#Jetty作为Reactive-Web容器" class="headerlink" title="Jetty作为Reactive Web容器"></a>Jetty作为Reactive Web容器</h2><h2 id="Tomcat作为Reactive-Web容器"><a href="#Tomcat作为Reactive-Web容器" class="headerlink" title="Tomcat作为Reactive Web容器"></a>Tomcat作为Reactive Web容器</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;嵌入式Servlet-Web容器&quot;&gt;&lt;a href=&quot;#嵌入式Servlet-Web容器&quot; class=&quot;headerlink&quot; title=&quot;嵌入式Servlet Web容器&quot;&gt;&lt;/a&gt;嵌入式Servlet Web容器&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;根
      
    
    </summary>
    
    
      <category term="boot" scheme="http://yoursite.com/categories/boot/"/>
    
    
      <category term="Boot" scheme="http://yoursite.com/tags/Boot/"/>
    
  </entry>
  
  <entry>
    <title>Synchronized的类锁和对象锁</title>
    <link href="http://yoursite.com/concurrent/concurrent-synchronized.html"/>
    <id>http://yoursite.com/concurrent/concurrent-synchronized.html</id>
    <published>2019-04-26T07:53:00.000Z</published>
    <updated>2020-03-13T16:12:44.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对象锁概念"><a href="#对象锁概念" class="headerlink" title="对象锁概念"></a>对象锁概念</h2><blockquote><p>Java的所有对象都含有一个互斥锁，这个锁由JVM自动获取和释放。线程进入synchronized方法的时候获取该对象的锁，当然如果已经有线程获取了这个对象的锁，那么当前线程会等待；synchronized方法正常返回或者抛异常而终止，JVM会自动释放对象锁。这里也体现了用synchronized来加锁的一个好处，方法抛异常的时候，锁仍然可以由JVM来自动释放。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象锁：形式1(方法锁)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">Method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"我是对象锁也是方法锁"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象锁：形式2（代码块形式）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"我是对象锁"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类锁的概念"><a href="#类锁的概念" class="headerlink" title="类锁的概念"></a>类锁的概念</h2><blockquote><p>由于一个class不论被实例化多少次，其中的静态方法和静态变量在内存中都只有一份。所以，一旦一个静态的方法被申明为synchronized。此类所有的实例化对象在调用此方法，共用同一把锁，我们称之为类锁。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是类锁"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="代码演示类锁和对象锁"><a href="#代码演示类锁和对象锁" class="headerlink" title="代码演示类锁和对象锁"></a>代码演示类锁和对象锁</h2><blockquote><p>下面这段代码是两个类锁和一个对象锁，拿到锁后，睡1秒钟。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类锁A</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">classLockA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"name = "</span> + Thread.currentThread().getName() + <span class="string">", begain"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"name = "</span> + Thread.currentThread().getName() + <span class="string">", end"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类锁B</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">classLockB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"name = "</span> + Thread.currentThread().getName() + <span class="string">", begain"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"name = "</span> + Thread.currentThread().getName() + <span class="string">", end"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">objectLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"name = "</span> + Thread.currentThread().getName() + <span class="string">", begain"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"name = "</span> + Thread.currentThread().getName() + <span class="string">", end"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建三个线程类：分别调用一个资源中的三个方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Test02 test02;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(Test02 tk)</span> </span>&#123;</span><br><span class="line">        test02 = tk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用类锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        test02.classLockA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Test02 test02;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(Test02 tk)</span> </span>&#123;</span><br><span class="line">        test02 = tk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用类锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        test02.classLockB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadC</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Test02 test02;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadC</span><span class="params">(Test02 tk)</span> </span>&#123;</span><br><span class="line">        test02 = tk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用对象锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        test02.objectLock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>main方法：起了三个线程，共同访问一个Test02对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        Test02 test02 = <span class="keyword">new</span> Test02();</span><br><span class="line">        ThreadA ta = <span class="keyword">new</span> ThreadA(test02);</span><br><span class="line">        ThreadB tb = <span class="keyword">new</span> ThreadB(test02);</span><br><span class="line">        ThreadC tc = <span class="keyword">new</span> ThreadC(test02);</span><br><span class="line"></span><br><span class="line">        ta.setName(<span class="string">"A"</span>);</span><br><span class="line">        tb.setName(<span class="string">"B"</span>);</span><br><span class="line">        tc.setName(<span class="string">"C"</span>);</span><br><span class="line"></span><br><span class="line">        ta.start();</span><br><span class="line">        tb.start();</span><br><span class="line">        tc.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行的结果：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name = A, begain</span><br><span class="line">name = C, begain</span><br><span class="line">name = A, end</span><br><span class="line">name = B, begain</span><br><span class="line">name = C, end</span><br><span class="line">name = B, end</span><br></pre></td></tr></table></figure><blockquote><p>可以看出由于 classLockA和classLockB都是类锁，即同一个锁，所以 A和B是按顺序执行，即同步的。而C是对象锁，和A/B不是同一种锁，所以C和A、B是 异步执行的。</p></blockquote><p>分析：</p><blockquote><p>对象锁要想保持同步执行，那么锁住的必须是同一个对象，举个例子：</p></blockquote><p>Test02类不变，重起两个线程类：均对对象锁进行了调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Test02 test02;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(Test02 tk)</span> </span>&#123;</span><br><span class="line">        test02 = tk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用类锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        test02.objectLock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Test02 test02;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(Test02 tk)</span> </span>&#123;</span><br><span class="line">        test02 = tk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用类锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        test02.objectLock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>main方法：创建两个不同的资源对象，启动两个线程，分别对加锁的方法进行调用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// 一个类，创建两个不同的对象，调用对象锁方法</span></span><br><span class="line">        Test02 test02 = <span class="keyword">new</span> Test02();</span><br><span class="line">        Test02 test03 = <span class="keyword">new</span> Test02();</span><br><span class="line">        ThreadA ta = <span class="keyword">new</span> ThreadA(test02);</span><br><span class="line">        ThreadB tb = <span class="keyword">new</span> ThreadB(test03);</span><br><span class="line"></span><br><span class="line">        ta.setName(<span class="string">"A"</span>);</span><br><span class="line">        tb.setName(<span class="string">"B"</span>);</span><br><span class="line"></span><br><span class="line">        ta.start();</span><br><span class="line">        tb.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = A, begain</span><br><span class="line">name = B, begain</span><br><span class="line">name = A, end</span><br><span class="line">name = B, end</span><br></pre></td></tr></table></figure><blockquote><p>可见，是异步执行的，没有达到同步的作用。</p></blockquote><p>改进：只需对类锁进行调用，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Test02 test02;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(Test02 tk)</span> </span>&#123;</span><br><span class="line">        test02 = tk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用类锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        test02.objectLock();</span></span><br><span class="line">        test02.classLockA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Test02 test02;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(Test02 tk)</span> </span>&#123;</span><br><span class="line">        test02 = tk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用类锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        test02.objectLock();</span></span><br><span class="line">        test02.classLockA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>main方法：同样是创建了多个对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// 一个类，创建两个不同的对象，调用类锁方法</span></span><br><span class="line">        Test02 test02 = <span class="keyword">new</span> Test02();</span><br><span class="line">        Test02 test03 = <span class="keyword">new</span> Test02();</span><br><span class="line">        ThreadA ta = <span class="keyword">new</span> ThreadA(test02);</span><br><span class="line">        ThreadB tb = <span class="keyword">new</span> ThreadB(test03);</span><br><span class="line"></span><br><span class="line">        ta.setName(<span class="string">"A"</span>);</span><br><span class="line">        tb.setName(<span class="string">"B"</span>);</span><br><span class="line"></span><br><span class="line">        ta.start();</span><br><span class="line">        tb.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = A, begain</span><br><span class="line">name = A, end</span><br><span class="line">name = B, begain</span><br><span class="line">name = B, end</span><br></pre></td></tr></table></figure><p>达到了同步的效果！</p><p><strong>总结：</strong></p><ol><li>如果多线程同时访问同一类的 类锁（synchronized 修饰的静态方法）以及对象锁（synchronized 修饰的非静态方法）这两个方法执行是异步的，原因：类锁和对象锁是两种不同的锁。 </li><li>类锁对该类的所有对象都能起作用，而对象锁不能。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;对象锁概念&quot;&gt;&lt;a href=&quot;#对象锁概念&quot; class=&quot;headerlink&quot; title=&quot;对象锁概念&quot;&gt;&lt;/a&gt;对象锁概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Java的所有对象都含有一个互斥锁，这个锁由JVM自动获取和释放。线程进入synchron
      
    
    </summary>
    
    
      <category term="concurrent" scheme="http://yoursite.com/categories/concurrent/"/>
    
    
      <category term="并发编程" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
