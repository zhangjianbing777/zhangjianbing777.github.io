<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>在谷歌上百度</title>
  
  <subtitle>但行好事，莫问前程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-13T14:59:20.126Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>BigBing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>还在使用BeanUtils吗？</title>
    <link href="http://yoursite.com/interview/beanutils.html"/>
    <id>http://yoursite.com/interview/beanutils.html</id>
    <published>2020-03-11T00:14:42.000Z</published>
    <updated>2020-03-13T14:59:20.126Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从名字上来看，BeanUtils是一个很好用的工具类。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;从名字上来看，BeanUtils是一个很好用的工具类。&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="interview" scheme="http://yoursite.com/categories/interview/"/>
    
    
      <category term="interview" scheme="http://yoursite.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>2020特殊的一年</title>
    <link href="http://yoursite.com/life/my2020.html"/>
    <id>http://yoursite.com/life/my2020.html</id>
    <published>2020-03-09T15:04:42.000Z</published>
    <updated>2020-03-13T15:00:28.016Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2020年真是特殊的一年，它是一个闰年</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;2020年真是特殊的一年，它是一个闰年&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
      <category term="life" scheme="http://yoursite.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>整数的翻转</title>
    <link href="http://yoursite.com/interview/algorithms/interger-cover.html"/>
    <id>http://yoursite.com/interview/algorithms/interger-cover.html</id>
    <published>2019-03-10T02:49:00.000Z</published>
    <updated>2020-03-13T15:00:23.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote><p>输入一个整数，倒序输出它，切正负符号不变。</p></blockquote><p>示例一：</p><ul><li>输入 123</li><li>输出 321</li></ul><p>示例二：</p><ul><li>输入 -123</li><li>输出 -321</li></ul><p>示例三：</p><ul><li>输入 -120</li><li>输出 -21</li></ul><p>注意：整数的范围，超出范围需要判断。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>弹出最后一位数字<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pop = x % <span class="number">10</span>;</span><br><span class="line">x /= <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li>组合<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temp = rev * <span class="number">10</span> + pop;</span><br><span class="line">rev = temp;</span><br></pre></td></tr></table></figure><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Allen 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: IntRevert</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 整数的翻转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@From</span> www.zhangjianbing.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntRevert</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">revert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化的数</span></span><br><span class="line">        <span class="keyword">int</span> rev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 传入整数的个位数字</span></span><br><span class="line">            <span class="keyword">int</span> pop = x % <span class="number">10</span>;</span><br><span class="line">            <span class="comment">// 去掉个位数字后的整数</span></span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * MAX_VALUE = 2147483647</span></span><br><span class="line"><span class="comment">             * MIN_VALUE = -2147483648</span></span><br><span class="line"><span class="comment">             * 1. 如果 temp = rev * 10 + pop 会导致溢出，那么rev &gt;= (MAX_VALUE/10)就一定会溢出。</span></span><br><span class="line"><span class="comment">             * 2. 当rev == Integer.MAX_VALUE / 10，也就是rev == 214748364的时候，只要pop大于最末位的7就会溢出。</span></span><br><span class="line"><span class="comment">             * 3. 以下同理。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (rev &gt; Integer.MAX_VALUE / <span class="number">10</span> || (rev == Integer.MAX_VALUE / <span class="number">10</span> &amp;&amp; pop &gt; <span class="number">7</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rev &lt; Integer.MIN_VALUE / <span class="number">10</span> || (rev == Integer.MIN_VALUE / <span class="number">10</span> &amp;&amp; pop &lt; -<span class="number">8</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            rev = rev * <span class="number">10</span> + pop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = revert(-<span class="number">990</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;输入一个整数，倒序输出它，切正负符号不变。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例一：&lt;/
      
    
    </summary>
    
    
      <category term="interview" scheme="http://yoursite.com/categories/interview/"/>
    
      <category term="algorithms" scheme="http://yoursite.com/categories/interview/algorithms/"/>
    
    
      <category term="interview,algorithms" scheme="http://yoursite.com/tags/interview-algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Java中的线程池</title>
    <link href="http://yoursite.com/interview/concurrent/concurrent-threadpool.html"/>
    <id>http://yoursite.com/interview/concurrent/concurrent-threadpool.html</id>
    <published>2019-03-08T06:34:00.000Z</published>
    <updated>2020-03-13T14:59:52.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java通过Executors提供四种线程池"><a href="#Java通过Executors提供四种线程池" class="headerlink" title="Java通过Executors提供四种线程池"></a>Java通过Executors提供四种线程池</h1><ol><li><code>CachedThreadPool()</code>：可缓存线程池。<ul><li>线程数无限制</li><li>有空闲线程则复用空闲线程，若无空闲线程则新建线程 一定程序减少频繁创建/销毁线程，减少系统开销</li></ul></li><li><code>FixedThreadPool()</code>：定长线程池。<ul><li>可控制线程最大并发数（同时执行的线程数）</li><li>超出的线程会在队列中等待</li></ul></li><li><code>ScheduledThreadPool()</code>：定时线程池。<ul><li>定时线程池。</li><li>支持定时及周期性任务执行。</li></ul></li><li><code>SingleThreadExecutor()</code>：单线程化的线程池。<ul><li>有且仅有一个工作线程执行任务</li><li>所有任务按照指定顺序执行，即遵循队列的入队出队规则</li></ul></li></ol><h1 id="ThreadPoolExecutor的执行流程"><a href="#ThreadPoolExecutor的执行流程" class="headerlink" title="ThreadPoolExecutor的执行流程"></a>ThreadPoolExecutor的执行流程</h1><ol><li>线程数量未达到corePoolSize，则新建一个线程(核心线程)执行任务。</li><li>线程数量达到了corePools，则将任务移入队列等待。</li><li>队列已满，新建线程(非核心线程)执行任务。</li><li>队列已满，总线程数又达到了maximumPoolSize，就会由(RejectedExecutionHandler)抛出异常(拒绝策略)<br>新建线程 -&gt; 达到核心数 -&gt; 加入队列 -&gt; 新建线程（非核心） -&gt; 达到最大数 -&gt; 触发拒绝策略</li></ol><h1 id="ThreadPoolExecutor的几个参数"><a href="#ThreadPoolExecutor的几个参数" class="headerlink" title="ThreadPoolExecutor的几个参数"></a>ThreadPoolExecutor的几个参数</h1><h2 id="corePoolSize"><a href="#corePoolSize" class="headerlink" title="corePoolSize"></a>corePoolSize</h2><p>   核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中。</p><h2 id="maximumPoolSize"><a href="#maximumPoolSize" class="headerlink" title="maximumPoolSize"></a>maximumPoolSize</h2><p>   线程池最大线程数，这个参数也是一个非常重要的参数，它表示在线程池中最多能创建多少个线程；如果当前阻塞队列满了，且继续提交任务，则创建新的线程执行任务，前提是当前线程数小于maximumPoolSize；当阻塞队列是无界队列， 则maximumPoolSize不起作用, 因为无法提交至核心线程池的线程会一直持续地放入workQueue(工作队列)中。</p><h2 id="keepAliveTime"><a href="#keepAliveTime" class="headerlink" title="keepAliveTime"></a>keepAliveTime</h2><p>   表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，即当线程池中线程数大于corePoolSize时， 如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用， 直到线程池中的线程数为0。</p><h2 id="allowCoreThreadTimeout"><a href="#allowCoreThreadTimeout" class="headerlink" title="allowCoreThreadTimeout"></a>allowCoreThreadTimeout</h2><p>   默认情况下超过keepAliveTime的时候，核心线程不会退出，可通过将该参数设置为true，让核心线程也退出。</p><h2 id="unit"><a href="#unit" class="headerlink" title="unit"></a>unit</h2><p>   可以指定keepAliveTime的时间单位。</p><h2 id="workQueue"><a href="#workQueue" class="headerlink" title="workQueue"></a>workQueue</h2><ul><li>ArrayBlockingQueue 有界队列，需要指定队列大小。</li><li>LinkedBlockingQueue 若指定大小则和ArrayBlockingQueue类似，若不指定大小则默认能存储Integer.MAX_VALUE个任务，相当于无界队列，此时maximumPoolSize值其实是无意义的。</li><li>SynchronousQueue 同步阻塞队列，当有任务添加进来后，必须有线程从队列中取出，当前线程才会被释放，newCachedThreadPool就使用这种队列。</li></ul><h2 id="RejectedExecutionHandler"><a href="#RejectedExecutionHandler" class="headerlink" title="RejectedExecutionHandler"></a>RejectedExecutionHandler</h2><p>   线程数和队列都满的情况下，线程池会执行的拒绝策略，有四个(也可以使用自定义的策略)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRejectedExecutionHandler</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CustomRejectedExecutionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">        Log.e(<span class="string">"umeweb"</span>, <span class="string">"Task "</span> + r.toString() + <span class="string">" rejected from "</span> + e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>下面是常用的参数设置:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查看服务器的cpu核数</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> cpu = Runtime.getRuntime().availableProcessors();</span><br><span class="line"><span class="comment">// 线程池中的好核心线程数</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> corePoolSize = cpu + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 线程池中最大线程数</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> maximumPoolSize = cpu * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 线程的空闲时间</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> keepAliveTime = <span class="number">1L</span>;</span><br><span class="line"><span class="comment">// 时间单位</span></span><br><span class="line"><span class="keyword">final</span> TimeUnit timeUnit = TimeUnit.SECONDS;</span><br><span class="line"><span class="comment">// 队列的长度</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> maxQueueNum = <span class="number">128</span>;</span><br></pre></td></tr></table></figure><p><strong>注意：不要直接<code>LinkedBlockingQueue queue = new LinkedBlockingQueue()</code>，这样实际上是将队列长度设置为Integer.MAX_VALUE，将会导致线程数量永远为corePoolSize，再也不会增加，当任务数量陡增时，任务响应时间也将随之陡增，需要给定合适的队列大小，比如maxQueueNum就可以。</strong></p><h1 id="线程池的四种拒绝策略"><a href="#线程池的四种拒绝策略" class="headerlink" title="线程池的四种拒绝策略"></a>线程池的四种拒绝策略</h1><ol><li>AbortPolicy：不执行新任务，直接抛出异常，提示线程池已满，线程池默认策略。</li><li>DiscardPolicy：不执行新任务，也不抛出异常，基本上为静默模式。</li><li>DisCardOldSetPolicy：将消息队列中的第一个任务替换为当前新进来的任务执行。</li><li>CallerRunPolicy：拒绝新任务进入，如果该线程池还没被关闭，那么这个新的任务在执行线程中被调用。</li></ol><h1 id="Executors和ThreadPoolExecutor创建线程的区别"><a href="#Executors和ThreadPoolExecutor创建线程的区别" class="headerlink" title="Executors和ThreadPoolExecutor创建线程的区别"></a>Executors和ThreadPoolExecutor创建线程的区别</h1><ul><li>Executors各个方法的弊端</li></ul><ol><li><p>newFixedThreadPool 和 newSingleThreadExecutor: 主要问题是堆积的请求处理队列可能会耗费非常大的内存，甚至OOM。</p></li><li><p>newCachedThreadPool 和 newScheduledThreadPool: 主要问题是线程数最大数是Integer.MAX_VALUE(2的31次方-1，int类型最大值)，可能会创建数量非常多的线程，甚至OOM。</p></li></ol><ul><li>ThreadPoolExecutor</li></ul><ol><li>创建线程池方式只有一种，就是走它的构造函数，参数自己指定。<h1 id="为什么使用线程池"><a href="#为什么使用线程池" class="headerlink" title="为什么使用线程池"></a>为什么使用线程池</h1></li><li>减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li><li>运用线程池能有效的控制线程最大并发数，可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</li><li>对线程进行一些简单的管理，比如：延时执行、定时循环执行的策略等，运用线程池都能进行很好的实现。<h1 id="如何向线程池中提交任务"><a href="#如何向线程池中提交任务" class="headerlink" title="如何向线程池中提交任务"></a>如何向线程池中提交任务</h1>可以通过execute()或submit()两个方法向线程池提交任务。</li></ol><ul><li>execute()方法没有返回值，所以无法判断任务知否被线程池执行成功。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">threadsPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>submit()方法返回一个future,那么我们可以通过这个future来判断任务是否执行成功，通过future的get方法来获取返回值。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">     Object s = future.get();</span><br><span class="line">   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">   <span class="comment">// 处理中断异常</span></span><br><span class="line">   &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">   <span class="comment">// 处理无法执行任务异常</span></span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">   <span class="comment">// 关闭线程池</span></span><br><span class="line">   executor.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="如何关闭线程池"><a href="#如何关闭线程池" class="headerlink" title="如何关闭线程池"></a>如何关闭线程池</h1>可以通过shutdown()或shutdownNow()方法来关闭线程池。</li><li>shutdown的原理是只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。</li><li>shutdownNow的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法终止。shutdownNow会首先将线程池的状态设置成STOP，然后尝试停止所有的正在执行或暂停任务的线程，并返回等待执行任务的列表。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java通过Executors提供四种线程池&quot;&gt;&lt;a href=&quot;#Java通过Executors提供四种线程池&quot; class=&quot;headerlink&quot; title=&quot;Java通过Executors提供四种线程池&quot;&gt;&lt;/a&gt;Java通过Executors提供四种线
      
    
    </summary>
    
    
      <category term="interview" scheme="http://yoursite.com/categories/interview/"/>
    
      <category term="concurrent" scheme="http://yoursite.com/categories/interview/concurrent/"/>
    
    
      <category term="interview,concurrent" scheme="http://yoursite.com/tags/interview-concurrent/"/>
    
  </entry>
  
  <entry>
    <title>Spring事务的传播行为</title>
    <link href="http://yoursite.com/spring/interview/spring-transactional-propergation.html"/>
    <id>http://yoursite.com/spring/interview/spring-transactional-propergation.html</id>
    <published>2019-03-08T06:27:00.000Z</published>
    <updated>2020-03-13T15:01:02.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring事务的七种传播行为"><a href="#Spring事务的七种传播行为" class="headerlink" title="Spring事务的七种传播行为"></a>Spring事务的七种传播行为</h1><p><strong>首先举例事务的嵌套：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ServiceA &#123;  </span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         ServiceB.methodB();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">ServiceB &#123;   </span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>其中ServiceA#methodA(我们称之为外部事务)，ServiceB#methodB(我们称之为内部事务)</em></p><p><strong>一、PROPAGATION_REQUIRED（Spring默认，常用）</strong></p><p>如果当前要执行的事务不在另外一个事务中，那么就新起一个事务。比如ServiceB.methodB的事务级别    定义为PROPAGATION_REQUIRED，那么当执行ServiceA.methodA的时候有两种情况：</p><ol><li>如果ServiceA.methodA已经存在事务，这时调用ServiceB.methodB，ServiceB.methodB看到自己已经运行在ServiceA.methodA的事务内部，就不再起新的事务。这时只有外部事务并且他们是共用的，所以这时ServiceA.methodA或者ServiceB.methodB无论哪个发生异常methodA和methodB作为一个整体都将一起回滚。</li><li>如果ServiceA.methodA没有事务，ServiceB.methodB就会为自己分配一个事务。这样，在ServiceA.methodA中是没有事务控制的。只是在ServiceB.methodB内的任何地方出现异常，ServiceB.methodB将会被回滚，不会引起ServiceA.methodA的回滚。</li></ol><p><strong>二、PROPAGATION_REQUIRES_NEW（常用）</strong></p><p>启动一个新的，不依赖于环境的 “内部” 事务。 这个事务将被完全 commited 或 rolled back 而不依赖于外部事务，它拥有自己的隔离范围，自己的锁，等等。当内部事务开始执行时，外部事务将被挂起，内务事务结束后，外部事务才将继续执行。</p><p>比如我们设计ServiceA.methodA的事务级别为PROPAGATION_REQUIRED，ServiceB.methodB的事务级别为PROPAGATION_REQUIRES_NEW，那么当执行到ServiceB.methodB的时候，ServiceA.methodA所在的事务就会挂起，ServiceB.methodB会起一个新的事务，等待ServiceB.methodB的事务完成以后，他才继续执行。他与PROPAGATION_REQUIRED 的事务区别在于事务的回滚程度了。因为ServiceB.methodB是新起一个事务，那么就是存在两个不同的事务：</p><ol><li>如果ServiceB.methodB已经提交，那么ServiceA.methodA失败回滚，ServiceB.methodB是不会回滚的。</li><li>如果ServiceB.methodB失败回滚，如果他抛出的异常被ServiceA.methodA的try..catch捕获并处理，ServiceA.methodA事务仍然可能提交；如果他抛出的异常未被ServiceA.methodA捕获处理，ServiceA.methodA事务将回滚。</li></ol><p><strong>三、PROPAGATION_NESTED（常用）</strong></p><p>开始一个”嵌套的”事务，它是已经存在事务的一个真正的子事务。嵌套事务开始执行时，它将取得一个 savepoint。如果这个嵌套事务失败，我们将回滚到此savepoint。潜套事务是外部事务的一部分，只有外部事务结束后它才会被提交。</p><p>比如我们将ServiceA.methodA事务级别设置为PROPAGATION_REQUIRED，ServiceB.methodB的事务级别为PROPAGATION_NESTED，那么当执行到ServiceB.methodB的时候，ServiceA.methodA所在的事务就会挂起，ServiceB.methodB会起一个新的子事务并设置savepoint，等待ServiceB.methodB的事务完成以后，ServiceA.methodA的事务才继续执行。因为ServiceB.methodB是外部事务的子事务，那么</p><ol><li>ServiceB.methodB执行完成无异常，此时还未提交事务，如果ServiceA.methodA发生异常回滚，ServiceB.methodB也将回滚。</li><li>如果ServiceB.methodB失败回滚，如果他抛出的异常被ServiceA.methodA的try..catch捕获并处理，ServiceA.methodA事务仍然可能提交；如果他抛出的异常未被ServiceA.methodA捕获处理，ServiceA.methodA事务将回滚。</li></ol><p>他与PROPAGATION_REQUIRES_NEW的区别是：<br>PROPAGATION_REQUIRES_NEW完全是一个新事务它与外部事务相互独立，而 PROPAGATION_NESTED 则是外部事务的子事务，如果外部事务 commit， 嵌套事务也会被 commit，这个规则同样适用于 roll back。</p><p><strong>在Spring中使用PROPAGATION_NESTED的前提条件：</strong></p><ol><li>TransactionManager中的nestedTransactionAllowed属性必须是true；</li><li>JKD版本为1.4+，因为需要SavePoint类；</li><li>JDBC Driver必须支持JDBC3.0。</li></ol><p><strong>四、PROPAGATION_SUPPORTS</strong></p><p>如果当前运行的代码包含在事务中，就以事务的方式运行，如果不在一个事务中，就以非事务的方式运行。</p><p><strong>五、PROPAGATION_NOT_SUPPORTED</strong></p><p>表示当前不支持事务。例如传播属性为PROPAGATION_REQUIRED的外部事务ServiceA.methodA，而ServiceB.methodB为内部事务，它的传播属性为PROPAGATION_NOT_SUPPORTED，当运行到ServiceB.methodB的时候ServiceA.methodA的事务将被挂起，待ServiceB.methodB以非事务的方式运行完以后，再来执行ServiceA.methodA的事务。</p><p><strong>六、PROPAGATION_MANDATORY</strong></p><p>必须在一个事务中运行。也就是说，他只能被一个父事务调用。否则，他就要抛出异常。</p><p><strong>七、PROPAGATION_NEVER</strong></p><p>不能在事务中运行。假设ServiceA.methodA的事务级别是PROPAGATION_REQUIRED， 而ServiceB.methodB的事务级别是PROPAGATION_NEVER ，那么ServiceB.methodB就要抛出异常了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring事务的七种传播行为&quot;&gt;&lt;a href=&quot;#Spring事务的七种传播行为&quot; class=&quot;headerlink&quot; title=&quot;Spring事务的七种传播行为&quot;&gt;&lt;/a&gt;Spring事务的七种传播行为&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;首先举例事务的嵌套：
      
    
    </summary>
    
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
      <category term="interview" scheme="http://yoursite.com/categories/spring/interview/"/>
    
    
      <category term="spring,interview" scheme="http://yoursite.com/tags/spring-interview/"/>
    
  </entry>
  
  <entry>
    <title>关于Java的浅拷贝和深拷贝</title>
    <link href="http://yoursite.com/interview/copy-deepcopy.html"/>
    <id>http://yoursite.com/interview/copy-deepcopy.html</id>
    <published>2019-03-07T14:41:00.000Z</published>
    <updated>2020-03-13T15:00:05.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅拷贝和深拷贝是什么？"><a href="#浅拷贝和深拷贝是什么？" class="headerlink" title="浅拷贝和深拷贝是什么？"></a>浅拷贝和深拷贝是什么？</h1><p>浅拷贝和深拷贝都是针对已经存在了的对象的操作，在java中，基本数据类型有八种，和引用数据类型。在程序中，一般用 <code>=</code> 来做赋值的操作，对于基本数据类型，实际上是拷贝它的值，而对于引用数据类型，则是拷贝的它的引用地址，举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j = i;</span><br><span class="line">    System.out.println(j);</span><br><span class="line"></span><br><span class="line">    Student stu1 = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>, <span class="number">12</span>);</span><br><span class="line">    System.out.println(stu1);</span><br><span class="line">    Student stu2 = stu1;</span><br><span class="line">    stu2.setAge(<span class="number">20</span>);</span><br><span class="line">    System.out.println(stu1);</span><br><span class="line">    System.out.println(stu2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line">Student&#123;name=<span class="string">'zhangsan'</span>, age=<span class="number">12</span>, active=<span class="keyword">null</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">'zhangsan'</span>, age=<span class="number">20</span>, active=<span class="keyword">null</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">'zhangsan'</span>, age=<span class="number">20</span>, active=<span class="keyword">null</span>&#125;</span><br></pre></td></tr></table></figure><p>从运行的结果，发现一个问题，int类型的值不用多说，而在引用类型中，明明修改的是stu2的age，为什么stu1的age也发生了变化，这里就涉及到了值传递和引用传递的问题了，ok，后面介绍。</p><h1 id="Java中的clone-方法"><a href="#Java中的clone-方法" class="headerlink" title="Java中的clone()方法"></a>Java中的clone()方法</h1><p>说到拷贝操作，那java必定提供了API来供我们使用，那就是Object类中的clone()方法了(它是一个native方法)，既然是超类中的protected方法，那么子类中就有必要重写一下，所有使用调用clone()来拷贝的时候，其对象必须要实现标识接口Cloneable，否则就会抛出CloneNotSupportedException这个异常。</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>首先创建一个Studen类，并实现Cloneable接口，重写clone方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Active active;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略get、set方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Active类的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Active</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Active</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例：用clone方法，复制新new出来的student1，得到student2,再做各种比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Student student1 = <span class="keyword">new</span> Student();</span><br><span class="line">    student1.setAge(<span class="number">10</span>);</span><br><span class="line">    student1.setName(<span class="string">"zhangsan"</span>);</span><br><span class="line">    student1.setActive(<span class="keyword">new</span> Active(<span class="string">"pingpang"</span>));</span><br><span class="line">    <span class="comment">// 原始对象的hashcode</span></span><br><span class="line">    System.out.println(student1.hashCode());</span><br><span class="line">    <span class="comment">// 克隆出来的对象</span></span><br><span class="line">    Student student2 = (Student) student1.clone();</span><br><span class="line">    <span class="comment">// 克隆出来的对象的hashcode</span></span><br><span class="line">    System.out.println(student2.hashCode());</span><br><span class="line">    <span class="comment">// 两个对象是否一样</span></span><br><span class="line">    System.out.println(student1 == student2);</span><br><span class="line">    <span class="comment">// 两个对象比较</span></span><br><span class="line">    System.out.println(student1);</span><br><span class="line">    System.out.println(student2);</span><br><span class="line">    <span class="comment">// 两个对象各自的引用比较</span></span><br><span class="line">    System.out.println(student1.getActive());</span><br><span class="line">    System.out.println(student2.getActive());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">697960108</span></span><br><span class="line"><span class="number">943010986</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">Student@<span class="number">299</span>a06ac</span><br><span class="line">Student@<span class="number">383534</span>aa</span><br><span class="line">Active@<span class="number">6</span>bc168e5</span><br><span class="line">Active@<span class="number">6</span>bc168e5</span><br></pre></td></tr></table></figure><p>可以得出关于浅拷贝的几点结论：</p><ul><li>clone()方法，会创建一个新的对象。</li><li>浅拷贝基本数据类型是拷贝值。</li><li>拷贝引用数据类型如：<code>Active</code> ，则拷贝的是它的引用地址。<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2>Student类，在克隆此类对象的时候，将此对象中的引用属性也克隆一份，只有clone方法不同：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Active active;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Student student = (Student) <span class="keyword">super</span>.clone();</span><br><span class="line">        student.active = (Active) <span class="keyword">this</span>.active.clone();</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get、set方法省略</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>Active类，实现Cloneable接口，并重写了clone方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Active</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Active</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>测试用例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Student student1 = <span class="keyword">new</span> Student();</span><br><span class="line">    student1.setAge(<span class="number">10</span>);</span><br><span class="line">    student1.setName(<span class="string">"zhangsan"</span>);</span><br><span class="line">    student1.setActive(<span class="keyword">new</span> Active(<span class="string">"pingpang"</span>));</span><br><span class="line">    <span class="comment">// 原始对象的hashcode</span></span><br><span class="line">    System.out.println(student1.hashCode());</span><br><span class="line">    <span class="comment">// 克隆出来的对象</span></span><br><span class="line">    Student student2 = (Student) student1.clone();</span><br><span class="line">    <span class="comment">// 克隆出来的对象的hashcode</span></span><br><span class="line">    System.out.println(student2.hashCode());</span><br><span class="line">    <span class="comment">// 两个对象是否一样</span></span><br><span class="line">    System.out.println(student1 == student2);</span><br><span class="line">    <span class="comment">// 两个对象比较</span></span><br><span class="line">    System.out.println(student1);</span><br><span class="line">    System.out.println(student2);</span><br><span class="line">    <span class="comment">// 两个对象各自的引用比较</span></span><br><span class="line">    System.out.println(student1.getActive());</span><br><span class="line">    System.out.println(student2.getActive());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>测试结果中显示不同student对象中的active对象也不同了：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">697960108</span></span><br><span class="line"><span class="number">943010986</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">com.nmys.story.interview.copy_interview.Student@<span class="number">299</span>a06ac</span><br><span class="line">com.nmys.story.interview.copy_interview.Student@<span class="number">383534</span>aa</span><br><span class="line">com.nmys.story.interview.copy_interview.Active@<span class="number">6</span>bc168e5</span><br><span class="line">com.nmys.story.interview.copy_interview.Active@<span class="number">7</span>b3300e5</span><br></pre></td></tr></table></figure>可以得出深拷贝的几点结论：</li><li>深拷贝是完全创建一个新的对象</li><li>深拷贝也会将原始对象中的引用对象重新复制一份<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1></li></ul><ol><li>一定要实现Cloneable接口。</li><li>重写clone()方法，注意：默认是浅拷贝，这里需要将引用类型进行深拷贝处。</li><li>特殊：String类虽然是引用类型，但是是final类，同时也有字符串常量池的存在，不必进行处理。</li><li>深拷贝可以通过上面所说的clone方法实现，还可以通过序列化来实现。 </li><li>当时写测试用例的时候，我这里用了lombok的注解@Data，为的就是不用手写get、set方法了，但测试的时候，发现clone出来的对象的hashcode是一样的，原因是lombok在为我们生成get、set的同时，toString、hashCode、equals等方法都替我们重写了，导致clone出来的类虽然 <code>==</code> 是 <code>false</code> ，但是hashCode却一样，建议还是手动写比较好。</li><li>最后再总结下，假设，A 类中引用了 B 类，B 类中引用了 C 类，对象分别对应 a，b，c，浅拷贝 a 的结果 a1，b，c。深拷贝 a 的结果 a1，b1，c1。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;浅拷贝和深拷贝是什么？&quot;&gt;&lt;a href=&quot;#浅拷贝和深拷贝是什么？&quot; class=&quot;headerlink&quot; title=&quot;浅拷贝和深拷贝是什么？&quot;&gt;&lt;/a&gt;浅拷贝和深拷贝是什么？&lt;/h1&gt;&lt;p&gt;浅拷贝和深拷贝都是针对已经存在了的对象的操作，在java中，基本数据
      
    
    </summary>
    
    
      <category term="interview" scheme="http://yoursite.com/categories/interview/"/>
    
    
      <category term="interview" scheme="http://yoursite.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>Spring源码分析：@Autowired注解原理分析</title>
    <link href="http://yoursite.com/spring-source/spring-autowired.html"/>
    <id>http://yoursite.com/spring-source/spring-autowired.html</id>
    <published>2019-03-05T13:53:00.000Z</published>
    <updated>2020-03-13T15:00:39.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>关于@Autowired这个注解，我们再熟悉不过了，经常跟@Resource来做对比，这篇文章我们不讨论两者有何异同，仅分析@Autowired的原理（基于Spring5）。</strong></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>假如一个接口(IUserService)有两个实现类，分别是(UserServiceImpl01)和(UserServiceImpl02)，在我们给类注入的时候，这样写(@Autowired private IUserService userService)会发生什么情况？答案肯定是报错，那么原理呢？文字描述：因为首先@Autowired是按照类型注入的，也就是.class，但UserServiceImpl01和UserServiceImpl02都是IUserService类型的，于是Spring就会按照后面的名字(userService)在容器中查找，但发现根本没有这个名字，因为两个实现类在不指定名字情况下，就是首字母小写的类名，然后抛出异常：expected single matching bean but found 2。。。</p><h1 id="如何解决这类问题"><a href="#如何解决这类问题" class="headerlink" title="如何解决这类问题"></a>如何解决这类问题</h1><ol><li>如果有两个实现类，还要使用@Autowired注解，可以将userService改成我们指定的实现类名称，比如UserServiceImpl01，或者不想改userService，可以加@Qualifier(value = “userServiceImpl01”)，指定需要注入的实现类。</li><li>使用@Resource注解，手动指定实现类名称。</li></ol><p><strong>还有很多种方法，但基本思想都一样，无非就是如何区分两个同祖宗的儿子，既然根儿相同，那就只有指定名字了。</strong></p><h1 id="Autowired原理"><a href="#Autowired原理" class="headerlink" title="@Autowired原理"></a>@Autowired原理</h1><p>提到@Autowired我们一般都知道叫依赖注入</p><ol><li>什么是依赖注入？</li><li>什么是注入，注到哪里？</li><li>什么时候注入的？<h2 id="什么是依赖注入？"><a href="#什么是依赖注入？" class="headerlink" title="什么是依赖注入？"></a>什么是依赖注入？</h2></li></ol><p><strong>依赖注入：Dependency Injection，简称DI，说白了就是利用反射机制为类的属性赋值的操作。</strong></p><h2 id="什么是注入，注入到哪里？"><a href="#什么是注入，注入到哪里？" class="headerlink" title="什么是注入，注入到哪里？"></a>什么是注入，注入到哪里？</h2><p><strong>注入就是为某个对象的外部资源赋值，注入某个对象所需要的外部资源（包括对象、资源、常量数据等）。IOC容器注入应用程序某个对象，应用程序所依赖的对象。</strong></p><h2 id="什么时候注入的？"><a href="#什么时候注入的？" class="headerlink" title="什么时候注入的？"></a>什么时候注入的？</h2><p><strong>在完成对象的创建，为对象变量进行赋值的时候进行注入（populate）。</strong></p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>1.首先点开@Autowired，注释上写Please consult the javadoc for the AutowiredAnnotationBeanPostProcessor，让我们去查阅这个类，看一下这个类的继承关系树，如下所示，可见它间接实现InstantiationAwareBeanPostProcessor，就具备了实例化前后(而不是初始化前后)管理对象的能力，实现了BeanPostProcessor，具有初始化前后管理对象的能力，实现BeanFactoryAware，具备随时拿到BeanFactory的能力，也就是说，这个AutowiredAnnotationBeanPostProcessor具备一切后置处理器的能力。<br><img src="https://image.nmyswls.com/nmyswls/article/image/20190130133909878" alt="请输入图片描述"><br>2.容器在初始化的时候，后置处理器的初始化要优先于剩下自定义Bean(比如我们自定义的Service，Controller等等)的初始化的，我们自定义的Bean初始化是在finishBeanFactoryInitialization(beanFactory)这里完成的，来到AbstractApplicationContext的refresh()方法。<br>3.finishBeanFactoryInitialization(beanFactory) –&gt; beanFactory.preInstantiateSingletons() –&gt; getBean(beanName) –&gt; doGetBean(beanName) –&gt; 来到AbstractBeanFactory第317行createBean(beanName, mbd, args)，来创建bean实例 –&gt; 来到AbstractAutowireCapableBeanFactory第503行doCreateBean(beanName, mbdToUse, args) –&gt; 紧接着来到AbstractAutowireCapableBeanFactory的第543行，instanceWrapper = createBeanInstance(beanName, mbd, args)就已经把Bean实例创建出来了，只不过instanceWrapper是一个被包装过了的bean，它里面的属性还未赋实际值 –&gt; 然后来到第555行applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName)，这一步的作用就是将所有的后置处理器拿出来，并且把名字叫beanName的类中的变量都封装到InjectionMetadata的injectedElements集合里面，目的是以后从中获取，挨个创建实例，通过反射注入到相应类中。<br><img src="https://image.nmyswls.com/nmyswls/article/image/20190130143035776" alt="请输入图片描述"><br>4.紧接着来到AbstractAutowireCapableBeanFactory第588行populateBean(beanName, mbd, instanceWrapper)<br> –&gt; 点进去，来到AbstractAutowireCapableBeanFactory的第1347行，来循环遍历所有的后置处理器for (BeanPostProcessor bp : getBeanPostProcessors())，从方法名字postProcessPropertyValues也能看出来，就是给属性赋值，当bp是AutowiredAnnotationBeanPostProcessor的时候，进入postProcessPropertyValues方法，来到AutowiredAnnotationBeanPostProcessor的postProcessPropertyValues方法，如下所示，首先找到需要注入的哪些元数据，然后metadata.inject（注入），注入方法点进去，来到InjectionMetadata的inject方法，在一个for循环里面依次执行element.inject(target, beanName, pvs)，来对属性进行注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PropertyValues <span class="title">postProcessPropertyValues</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)</span> <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">InjectionMetadata metadata = findAutowiringMetadata(beanName, bean.getClass(), pvs);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">metadata.inject(bean, beanName, pvs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">"Injection of autowired dependencies failed"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pvs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.进入element.inject(target, beanName, pvs)，注意，这里必须要debug才可以进入真正的方法。来到AutowiredAnnotationBeanPostProcessor的inject方法，第584行，value = beanFactory.resolveDependency(desc, beanName, autowiredBeanNames, typeConverter)，由工厂解析这个依赖，进入，来到DefaultListableBeanFactory第1065行，result = doResolveDependency(descriptor, requestingBeanName, autowiredBeanNames, typeConverter)再次解析依赖，点击进入，来到DefaultListableBeanFactory的doResolveDependency()方法，前面是一堆判断，比较，查看属性类型，这种类型的有几个(matchingBeans)，如果只有一个匹配，那么来到第1138行，instanceCandidate = descriptor.resolveCandidate(autowiredBeanName, type, this)，进入这个方法，可以看到就是前面说的根据工厂来创建实例的过程了：beanFactory.getBean(beanName)，其中这个beanName就是属性的名称，当经过一系列操作完成属性的实例化后，便来到AutowiredAnnotationBeanPostProcessor的第611行，利用反射为此对象赋值。这样，对象的创建以及赋值就完成了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>在容器启动，为对象赋值的时候，遇到@Autowired注解，会用后置处理器机制，来创建属性的实例，然后再利用反射机制，将实例化好的属性，赋值给对象上，这就是Autowired的原理。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;关于@Autowired这个注解，我们再熟悉不过了，经常跟@Resource来做对比，这篇文章我们不讨论两者有何异同，仅分析
      
    
    </summary>
    
    
      <category term="spring source" scheme="http://yoursite.com/categories/spring-source/"/>
    
    
      <category term="spring source" scheme="http://yoursite.com/tags/spring-source/"/>
    
  </entry>
  
  <entry>
    <title>Spring源码分析：Spring的循环依赖分析</title>
    <link href="http://yoursite.com/spring-source/spring-loop.html"/>
    <id>http://yoursite.com/spring-source/spring-loop.html</id>
    <published>2019-03-04T13:57:00.000Z</published>
    <updated>2020-03-13T15:00:46.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><ol start="0"><li>基于Spring5+</li><li>什么是循环依赖？</li><li>循环依赖有几种？</li><li>Spring可以解决哪几种，为什么不能解决这几种？</li><li>Spring是如何判断存在循环依赖的？<h1 id="什么是循环依赖？"><a href="#什么是循环依赖？" class="headerlink" title="什么是循环依赖？"></a>什么是循环依赖？</h1></li></ol><blockquote><p><strong>什么是循环依赖？我们都知道Spring最大的作用就是来替我们管理Bean的，当然也包括Bean的创建以及整个生命周期，但是有这么一种情况，假设有三个类A、B、C需要交给Spring来管理，但A实例的创建需要先有B实例，而B实例的创建需要先有C实例，C实例的创建需要先有A实例，这样三个类就自然形成了一个环状结构，如果用代码来表示，如下：</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestA</span> </span>&#123;</span><br><span class="line">    TestB testB;</span><br><span class="line">    get;</span><br><span class="line">    set;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestB</span> </span>&#123;</span><br><span class="line">    TestC testC;</span><br><span class="line">    get;</span><br><span class="line">    set;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestC</span> </span>&#123;</span><br><span class="line">    TestA testA;</span><br><span class="line">    get;</span><br><span class="line">    set;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>这样，三个类就彼此形成了一个环状，那么Spring是如何来处理这样的状况呢？</strong></p></blockquote><h1 id="循环依赖有几种？"><a href="#循环依赖有几种？" class="headerlink" title="循环依赖有几种？"></a>循环依赖有几种？</h1><blockquote><p><strong>有三种情况：</strong></p></blockquote><ol><li>基于构造方法的循环依赖</li><li>基于setter构造的循环依赖(网上也叫field属性依赖)</li><li>基于prototype范围的依赖</li></ol><h1 id="Spring可以解决哪些循环依赖，为什么？"><a href="#Spring可以解决哪些循环依赖，为什么？" class="headerlink" title="Spring可以解决哪些循环依赖，为什么？"></a>Spring可以解决哪些循环依赖，为什么？</h1><p><strong>首先说一下结论：除了第二种Spring可以帮我们解决，其它两种都不能解决。我们知道Spring为我们完全实例化好一个Bean一定会经过一下三步：</strong></p><ol><li>createBeanInstance：实例化，其实也就是调用对象的构造方法实例化对象。</li><li>populateBean：填充属性，这一步主要是多bean的依赖属性进行填充。</li><li>initializeBean：调用默认的或者自定义的init方法。</li></ol><p><strong>循环依赖的产生定会发生在步骤1和2中，因为1是利用构造方法，2是利用属性赋值。</strong></p><h2 id="基于构造方法的循环依赖"><a href="#基于构造方法的循环依赖" class="headerlink" title="基于构造方法的循环依赖"></a>基于构造方法的循环依赖</h2><blockquote><p><strong>先说结论基于构造器的循环依赖Spring是无法解决的，是因为没有加入提前曝光的集合中，加入集合的条件是已经创建了Bean的包装对象，而构造注入的时候，并没有完成对象的创建，下面会有代码说明。</strong></p></blockquote><p>测试用例：</p><p>xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testA"</span> <span class="attr">class</span>=<span class="string">"com.nmys.story.springCore.loop_dependency.loop01.LoopA"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"testB"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testB"</span> <span class="attr">class</span>=<span class="string">"com.nmys.story.springCore.loop_dependency.loop01.LoopB"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"testC"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testC"</span> <span class="attr">class</span>=<span class="string">"com.nmys.story.springCore.loop_dependency.loop01.LoopC"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"testA"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description:测试通过有参构造方式注入产生的循环依赖问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 70KG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/12/21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"test02.xml"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析上面代码：</p><ol><li>Spring容器创建testA的Bean实例，首先去”当前创建Bean池”，查找是否当前Bean正在创建，如果没发现，则继续准备其需要的构造器参数testB，并将testA标识符放到”当前创建Bean池”。</li><li>Spring容器创建testB的Bean实例，首先去”当前创建Bean池”，查找是否当前Bean正在创建，如果没发现，则继续准备其需要的构造器参数testC，并将testB标识符放到”当前创建Bean池”。</li><li>Spring容器创建testC的Bean实例，首先去”当前创建Bean池”，查找是否当前Bean正在创建，如果没发现，则继续准备其需要的构造器参数testA，并将testC标识符放到”当前创建Bean池”。</li><li>到此为止Spring容器要去创建testA，但发现该Bean的标志符在”当前创建Bean池”中，表示了循环依赖，于是抛出BeanCurrentlyInCreationException异常。</li></ol><p>其中”当前创建Bean池”就是一个Set集合，DefaultSingletonBeanRegistry类中beforeSingletonCreation方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeSingletonCreation</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.inCreationCheckExclusions.contains(beanName) &amp;&amp; !<span class="keyword">this</span>.singletonsCurrentlyInCreation.add(beanName)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>然后我们来到创建Bean实例的地方：</strong></p></blockquote><p>AbstractAutowireCapableBeanFactory类的543行，通过这个方法返回一个这个Bean的包装对象：</p><p>–&gt; instanceWrapper = createBeanInstance(beanName, mbd, args);—-&gt; 进入这个方法</p><p>–&gt; AbstractAutowireCapableBeanFactory类的1129行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Need to determine the constructor...</span></span><br><span class="line"><span class="comment">// 需要确定构造函数，也就是说构造方法的循环依赖会在这儿return</span></span><br><span class="line">Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line"><span class="keyword">if</span> (ctors != <span class="keyword">null</span> ||</span><br><span class="line">mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||</span><br><span class="line">mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  &#123;</span><br><span class="line"><span class="keyword">return</span> autowireConstructor(beanName, mbd, ctors, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// No special handling: simply use no-arg constructor.</span></span><br><span class="line"><span class="comment">// 无需特殊处理，仅使用无参构造即可，setter的循环依赖会在这个地方return</span></span><br><span class="line"><span class="keyword">return</span> instantiateBean(beanName, mbd);</span><br></pre></td></tr></table></figure><p><strong>在上面代码中返回Bean的包装对象下面紧接着才是将这个对象曝光，也就是加入到SingletonFactory集合中，所以构造方法的循环引用，Spring是无法解决的，来到AbstractAutowireCapableBeanFactory的574行。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br></pre></td></tr></table></figure><h2 id="基于setter构造的循环依赖"><a href="#基于setter构造的循环依赖" class="headerlink" title="基于setter构造的循环依赖"></a>基于setter构造的循环依赖</h2><blockquote><p><strong>首先说结论：Spring是可以为我们解决这样的依赖的，原理说白了就是用了缓存处理，也就是常说的提前曝光，为什么叫提前曝光呢？因为这个缓存中的Bean是一个还未进行赋值的Bean，仅仅是一个引用而已。</strong></p></blockquote><p>xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testA"</span> <span class="attr">class</span>=<span class="string">"com.nmys.story.springCore.loop_dependency.loop01.LoopA"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loopB"</span> <span class="attr">ref</span>=<span class="string">"testB"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testB"</span> <span class="attr">class</span>=<span class="string">"com.nmys.story.springCore.loop_dependency.loop01.LoopB"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loopC"</span> <span class="attr">ref</span>=<span class="string">"testC"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testC"</span> <span class="attr">class</span>=<span class="string">"com.nmys.story.springCore.loop_dependency.loop01.LoopC"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loopA"</span> <span class="attr">ref</span>=<span class="string">"testA"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description:通过setter注入产生的循环依赖问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 70KG</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"test03.xml"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码分析：</p><ol><li>Spring容器创建单例”loopA”，首先根据无参构造创建Bean，并暴露到Map(singletonFactories)中，并将”loopA”标志符放到当前创建正在创建的Bean池(singletonsCurrentlyInCreation)中，然后进行setter注入”loopB”。</li><li>Spring容器创建单例”loopB”，首先根据无参构造创建Bean，并暴露到Map(singletonFactories)中，并将”loopA”标志符放到当前创建正在创建的Bean池(singletonsCurrentlyInCreation)中，然后进行setter注入”loopC”。</li><li>Spring容器创建单例”loopC”，首先根据无参构造创建Bean，并暴露到Map(singletonFactories)中，并将”loopA”标志符放到当前创建正在创建的Bean池(singletonsCurrentlyInCreation)中，然后进行setter注入”loopA”。在注入”loopA”的时候，由于提前暴露在singletonFactories集合中了，利用它就可以取到”loopA”正在创建的Bean对象。</li><li>最后依赖注入”testB”，”testA”，完成setter注入。</li></ol><p><strong>查看控制台输出日志：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正在创建testA对象</span></span><br><span class="line">Creating shared instance of singleton bean <span class="string">'testA'</span></span><br><span class="line">Creating instance of bean <span class="string">'testA'</span></span><br><span class="line"><span class="comment">// 在缓存早期引用，目的是防止循环引用问题</span></span><br><span class="line">Eagerly caching bean <span class="string">'testA'</span> to allow <span class="keyword">for</span> resolving potential circular references</span><br><span class="line">Creating shared instance of singleton bean <span class="string">'testB'</span></span><br><span class="line">Creating instance of bean <span class="string">'testB'</span></span><br><span class="line">Eagerly caching bean <span class="string">'testB'</span> to allow <span class="keyword">for</span> resolving potential circular references</span><br><span class="line">Creating shared instance of singleton bean <span class="string">'testC'</span></span><br><span class="line">Creating instance of bean <span class="string">'testC'</span></span><br><span class="line">Eagerly caching bean <span class="string">'testC'</span> to allow <span class="keyword">for</span> resolving potential circular references</span><br><span class="line"><span class="comment">// 在创建testC的时候会去缓存中拿原来存储的testA，并返回，但此时的testA是一个不完全的对象，也就是尚未初始化</span></span><br><span class="line">Returning eagerly cached instance of singleton bean <span class="string">'testA'</span> that is not fully initialized yet - a consequence of a circular reference</span><br><span class="line"><span class="comment">// 紧接着完成C的创建，顺便其它的也完成了</span></span><br><span class="line">Finished creating instance of bean <span class="string">'testC'</span></span><br><span class="line">Finished creating instance of bean <span class="string">'testB'</span></span><br><span class="line">Finished creating instance of bean <span class="string">'testA'</span></span><br><span class="line">Returning cached instance of singleton bean <span class="string">'testB'</span></span><br><span class="line">Returning cached instance of singleton bean <span class="string">'testC'</span></span><br></pre></td></tr></table></figure><p><strong>基于setter的循环依赖利用了提前曝光机制，这一步的关键代码，在AbstractAutowireCapableBeanFactory的574行，代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br></pre></td></tr></table></figure><p><strong>在加入SingletonFactory的前提是此Bean已经创建出来，才能够加入到这个Map集合中，也就是提前曝光，可以让别的Bean在初始化的时候从中拿到。否则是没有机会加入到Map中的。</strong></p><h2 id="基于prototype范围的依赖"><a href="#基于prototype范围的依赖" class="headerlink" title="基于prototype范围的依赖"></a>基于prototype范围的依赖</h2><blockquote><p><strong>首先说结论，对于多例情况下的循环依赖，是无法解决的，因为Spring容器不进行缓存，更无法提前暴露。</strong></p></blockquote><p>测试用例：</p><p>xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testA"</span> <span class="attr">class</span>=<span class="string">"com.nmys.story.springCore.loop_dependency.loop01.LoopA"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loopB"</span> <span class="attr">ref</span>=<span class="string">"testB"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testB"</span> <span class="attr">class</span>=<span class="string">"com.nmys.story.springCore.loop_dependency.loop01.LoopB"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loopC"</span> <span class="attr">ref</span>=<span class="string">"testC"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testC"</span> <span class="attr">class</span>=<span class="string">"com.nmys.story.springCore.loop_dependency.loop01.LoopC"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loopA"</span> <span class="attr">ref</span>=<span class="string">"testA"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description:通过setter注入产生的循环依赖问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 70KG</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"test03.xml"</span>);</span><br><span class="line">        LoopA loopA = context.getBean(LoopA<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(loopA);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>会抛出BeanCurrentlyInCreationException异常。</strong></p><h1 id="Spring是如何检测循环依赖"><a href="#Spring是如何检测循环依赖" class="headerlink" title="Spring是如何检测循环依赖"></a>Spring是如何检测循环依赖</h1><p><strong>来到AbstractBeanFactory的246行，代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object sharedInstance = getSingleton(beanName);</span><br></pre></td></tr></table></figure><p><strong>这一步是从缓存中获取以前创建的实例，如果发现存在，那么就存在循环依赖。</strong></p><p>到此，全文完，自我感觉比其他的整理还算详细，如有疑问，请留言。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;基于Spring5+&lt;/li&gt;
&lt;li&gt;什么是循环依赖？&lt;/li&gt;
&lt;li&gt;循环依赖有几种？&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="spring source" scheme="http://yoursite.com/categories/spring-source/"/>
    
    
      <category term="spring source" scheme="http://yoursite.com/tags/spring-source/"/>
    
  </entry>
  
</feed>
